name: VORTEX Windows Test

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install openpyxl pandas numpy matplotlib
        
    - name: Configure environment
      run: |
        mkdir -p DATA/raw
        mkdir -p DATA/processed
        mkdir -p DATA/real_world
        mkdir -p models
        mkdir -p outputs
        mkdir -p real_world_results
        mkdir -p resultados_shap/logs
        mkdir -p resultados_shap/plots
        mkdir -p resultados_shap/tables
        
    - name: Create sample data
      run: |
        # Script para generar datos de muestra
        echo "import pandas as pd; import numpy as np;" > create_sample.py
        echo "data = []" >> create_sample.py
        echo "for i in range(12): data.append({\"Site\": \"Can_Tintorer\", \"Ca\": np.random.uniform(9.5, 10.5), \"S\": np.random.uniform(2.0, 2.5), \"K\": np.random.uniform(1.4, 1.6), \"Ti\": np.random.uniform(0.5, 0.7), \"V\": np.random.uniform(0.6, 0.8), \"Cr\": np.random.uniform(0.3, 0.5), \"Cu\": np.random.uniform(1.0, 1.4), \"Zn\": np.random.uniform(0.8, 1.0), \"As\": np.random.uniform(2.0, 2.3), \"Se\": np.random.uniform(0.2, 0.4), \"Sr\": np.random.uniform(1.0, 1.2), \"Mo\": np.random.uniform(0.4, 0.6), \"Ba\": np.random.uniform(0.7, 0.9), \"Ta\": np.random.uniform(0.1, 0.3)})" >> create_sample.py
        echo "for i in range(10): data.append({\"Site\": \"Terena\", \"Ca\": np.random.uniform(9.3, 10.2), \"S\": np.random.uniform(2.1, 2.6), \"K\": np.random.uniform(1.5, 1.8), \"Ti\": np.random.uniform(0.4, 0.6), \"V\": np.random.uniform(0.7, 0.9), \"Cr\": np.random.uniform(0.2, 0.4), \"Cu\": np.random.uniform(0.9, 1.2), \"Zn\": np.random.uniform(1.0, 1.2), \"As\": np.random.uniform(1.8, 2.1), \"Se\": np.random.uniform(0.3, 0.5), \"Sr\": np.random.uniform(1.2, 1.4), \"Mo\": np.random.uniform(0.3, 0.5), \"Ba\": np.random.uniform(0.8, 1.0), \"Ta\": np.random.uniform(0.2, 0.4)})" >> create_sample.py
        echo "for i in range(10): data.append({\"Site\": \"Aliste\", \"Ca\": np.random.uniform(10.0, 11.0), \"S\": np.random.uniform(2.3, 2.7), \"K\": np.random.uniform(1.2, 1.5), \"Ti\": np.random.uniform(0.6, 0.8), \"V\": np.random.uniform(0.5, 0.7), \"Cr\": np.random.uniform(0.4, 0.6), \"Cu\": np.random.uniform(1.2, 1.5), \"Zn\": np.random.uniform(0.7, 0.9), \"As\": np.random.uniform(2.2, 2.5), \"Se\": np.random.uniform(0.1, 0.3), \"Sr\": np.random.uniform(0.9, 1.1), \"Mo\": np.random.uniform(0.5, 0.7), \"Ba\": np.random.uniform(0.6, 0.8), \"Ta\": np.random.uniform(0.05, 0.2)})" >> create_sample.py
        echo "df = pd.DataFrame(data)" >> create_sample.py
        echo "df.to_excel('DATA/raw/sample_data.xlsx', index=False)" >> create_sample.py
        echo "df.to_excel('DATA/real_world/real_world_data.xlsx', index=False)" >> create_sample.py
        
        # Ejecutar script
        python create_sample.py
        
    - name: Run main pipeline
      run: |
        python main.py --input "DATA/raw/sample_data.xlsx" --output-dir "test_output" --min-class-size 3 --validation-split 0.2 --full
      
    - name: Prepare for real-world testing
      run: |
        # Copiar modelos para el análisis de mundo real
        Copy-Item test_output/experiment_*/models/*.pkl -Destination models/ -Recurse
      
    - name: Run real-world predictions
      run: |
        python real_world.py --data "DATA/real_world/real_world_data.xlsx" --models "models" --output "real_world_results" --threshold 0.7
      
    - name: Verify outputs
      run: |
        # Verificar outputs del pipeline principal
        $experimentDirs = Get-ChildItem -Directory test_output
        if ($experimentDirs.Count -eq 0) {
          Write-Error "No se crearon directorios de experimento"
          exit 1
        }
        
        $experimentDir = $experimentDirs | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        $experimentPath = $experimentDir.FullName
        Write-Host "Verificando archivos en: $experimentPath"
        
        # Verificar archivos clave
        $requiredModels = @("final_model.pkl", "rf_Destilled.pkl", "rf_French.pkl", "rf_Quiruelas.pkl", "rf_VdH.pkl")
        foreach ($model in $requiredModels) {
          if (-not (Test-Path "$experimentPath\models\$model")) {
            Write-Error "Modelo requerido no encontrado: $model"
            exit 1
          }
        }
        
        # Verificar resultados de mundo real
        $rwFiles = Get-ChildItem "real_world_results" -File
        if ($rwFiles.Count -eq 0) {
          Write-Error "No se encontraron archivos de resultados de mundo real"
          exit 1
        }
        
        Write-Host "¡Todas las verificaciones pasaron correctamente!"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: vortex-windows-test-results
        path: |
          test_output/
          real_world_results/
          
    - name: Debug on failure
      if: ${{ failure() }}
      run: |
        Write-Host "============== DEBUGGING INFO =============="
        Write-Host "Contenido del directorio de trabajo:"
        Get-ChildItem -Recurse | Select-Object -First 30 FullName
        
        Write-Host "Últimas líneas de logs (si existen):"
        Get-ChildItem -Recurse -Filter "*.log" | ForEach-Object {
          Write-Host "=== $($_.FullName) ==="
          Get-Content $_.FullName -Tail 20
        }