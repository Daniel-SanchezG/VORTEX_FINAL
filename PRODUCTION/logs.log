2025-02-19 13:35:21,161:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:35:21,162:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:35:21,162:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:35:21,162:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:39:20,490:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:39:20,490:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:39:20,490:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:39:20,490:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:40:58,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:40:58,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:40:58,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:40:58,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:41:03,862:INFO:PyCaret ClassificationExperiment
2025-02-19 13:41:03,862:INFO:Logging name: clf-default-name
2025-02-19 13:41:03,862:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 13:41:03,862:INFO:version 3.3.2
2025-02-19 13:41:03,862:INFO:Initializing setup()
2025-02-19 13:41:03,862:INFO:self.USI: 9564
2025-02-19 13:41:03,862:INFO:self._variable_keys: {'logging_param', 'html_param', 'n_jobs_param', '_available_plots', 'y_train', 'pipeline', 'gpu_n_jobs_param', 'y_test', 'fold_shuffle_param', 'USI', 'target_param', 'data', 'log_plots_param', '_ml_usecase', 'is_multiclass', 'idx', 'y', 'fix_imbalance', 'X_test', 'exp_name_log', 'memory', 'exp_id', 'seed', 'X', 'X_train', 'fold_groups_param', 'fold_generator', 'gpu_param'}
2025-02-19 13:41:03,863:INFO:Checking environment
2025-02-19 13:41:03,863:INFO:python_version: 3.10.12
2025-02-19 13:41:03,863:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 13:41:03,863:INFO:machine: x86_64
2025-02-19 13:41:03,864:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 13:41:03,865:INFO:Memory: svmem(total=7813279744, available=1198432256, percent=84.7, used=5672689664, free=205049856, active=2130771968, inactive=4738306048, buffers=87560192, cached=1847980032, shared=653443072, slab=320262144)
2025-02-19 13:41:03,865:INFO:Physical Core: 2
2025-02-19 13:41:03,865:INFO:Logical Core: 4
2025-02-19 13:41:03,866:INFO:Checking libraries
2025-02-19 13:41:03,866:INFO:System:
2025-02-19 13:41:03,866:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 13:41:03,866:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 13:41:03,866:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 13:41:03,866:INFO:PyCaret required dependencies:
2025-02-19 13:41:04,462:INFO:                 pip: 23.3.2
2025-02-19 13:41:04,462:INFO:          setuptools: 65.5.0
2025-02-19 13:41:04,462:INFO:             pycaret: 3.3.2
2025-02-19 13:41:04,462:INFO:             IPython: 8.20.0
2025-02-19 13:41:04,462:INFO:          ipywidgets: 8.1.1
2025-02-19 13:41:04,462:INFO:                tqdm: 4.66.1
2025-02-19 13:41:04,462:INFO:               numpy: 1.24.4
2025-02-19 13:41:04,462:INFO:              pandas: 1.5.3
2025-02-19 13:41:04,462:INFO:              jinja2: 3.1.3
2025-02-19 13:41:04,462:INFO:               scipy: 1.10.1
2025-02-19 13:41:04,462:INFO:              joblib: 1.3.2
2025-02-19 13:41:04,462:INFO:             sklearn: 1.2.2
2025-02-19 13:41:04,462:INFO:                pyod: 1.1.2
2025-02-19 13:41:04,462:INFO:            imblearn: 0.12.3
2025-02-19 13:41:04,462:INFO:   category_encoders: 2.6.3
2025-02-19 13:41:04,463:INFO:            lightgbm: 4.2.0
2025-02-19 13:41:04,463:INFO:               numba: 0.58.1
2025-02-19 13:41:04,463:INFO:            requests: 2.31.0
2025-02-19 13:41:04,463:INFO:          matplotlib: 3.6.0
2025-02-19 13:41:04,463:INFO:          scikitplot: 0.3.7
2025-02-19 13:41:04,463:INFO:         yellowbrick: 1.5
2025-02-19 13:41:04,463:INFO:              plotly: 5.18.0
2025-02-19 13:41:04,463:INFO:    plotly-resampler: Not installed
2025-02-19 13:41:04,463:INFO:             kaleido: 0.2.1
2025-02-19 13:41:04,463:INFO:           schemdraw: 0.15
2025-02-19 13:41:04,463:INFO:         statsmodels: 0.14.1
2025-02-19 13:41:04,463:INFO:              sktime: 0.21.1
2025-02-19 13:41:04,463:INFO:               tbats: 1.1.3
2025-02-19 13:41:04,463:INFO:            pmdarima: 2.0.4
2025-02-19 13:41:04,463:INFO:              psutil: 5.9.7
2025-02-19 13:41:04,463:INFO:          markupsafe: 2.1.3
2025-02-19 13:41:04,463:INFO:             pickle5: Not installed
2025-02-19 13:41:04,463:INFO:         cloudpickle: 2.2.1
2025-02-19 13:41:04,463:INFO:         deprecation: 2.1.0
2025-02-19 13:41:04,463:INFO:              xxhash: 3.4.1
2025-02-19 13:41:04,463:INFO:           wurlitzer: 3.0.3
2025-02-19 13:41:04,463:INFO:PyCaret optional dependencies:
2025-02-19 13:41:05,745:INFO:                shap: 0.44.0
2025-02-19 13:41:05,745:INFO:           interpret: 0.5.0
2025-02-19 13:41:05,745:INFO:                umap: 0.5.5
2025-02-19 13:41:05,745:INFO:     ydata_profiling: 4.6.0
2025-02-19 13:41:05,745:INFO:  explainerdashboard: 0.4.5
2025-02-19 13:41:05,745:INFO:             autoviz: 0.1.804
2025-02-19 13:41:05,745:INFO:           fairlearn: 0.7.0
2025-02-19 13:41:05,745:INFO:          deepchecks: Not installed
2025-02-19 13:41:05,745:INFO:             xgboost: 1.6.2
2025-02-19 13:41:05,745:INFO:            catboost: 1.2.2
2025-02-19 13:41:05,745:INFO:              kmodes: 0.12.2
2025-02-19 13:41:05,746:INFO:             mlxtend: 0.23.1
2025-02-19 13:41:05,746:INFO:       statsforecast: 1.5.0
2025-02-19 13:41:05,746:INFO:        tune_sklearn: 0.5.0
2025-02-19 13:41:05,746:INFO:                 ray: 2.9.0
2025-02-19 13:41:05,746:INFO:            hyperopt: 0.2.7
2025-02-19 13:41:05,746:INFO:              optuna: 3.5.0
2025-02-19 13:41:05,746:INFO:               skopt: 0.9.0
2025-02-19 13:41:05,746:INFO:              mlflow: 1.30.1
2025-02-19 13:41:05,746:INFO:              gradio: 3.50.2
2025-02-19 13:41:05,746:INFO:             fastapi: 0.109.0
2025-02-19 13:41:05,746:INFO:             uvicorn: 0.25.0
2025-02-19 13:41:05,746:INFO:              m2cgen: 0.10.0
2025-02-19 13:41:05,747:INFO:           evidently: 0.2.8
2025-02-19 13:41:05,747:INFO:               fugue: 0.8.6
2025-02-19 13:41:05,747:INFO:           streamlit: Not installed
2025-02-19 13:41:05,747:INFO:             prophet: Not installed
2025-02-19 13:41:05,747:INFO:None
2025-02-19 13:41:05,747:INFO:Set up data.
2025-02-19 13:41:05,768:INFO:Set up folding strategy.
2025-02-19 13:41:05,769:INFO:Set up train/test split.
2025-02-19 13:41:05,775:INFO:Set up index.
2025-02-19 13:41:05,775:INFO:Assigning column types.
2025-02-19 13:41:05,778:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 13:41:05,828:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 13:41:05,833:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:41:05,867:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:41:05,906:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:41:06,037:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 13:41:06,038:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:41:06,066:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:41:06,069:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:41:06,070:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 13:41:06,122:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:41:06,150:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:41:06,153:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:41:06,201:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:41:06,231:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:41:06,234:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:41:06,235:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 13:41:06,312:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:41:06,315:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:41:06,391:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:41:06,393:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:41:06,398:INFO:Preparing preprocessing pipeline...
2025-02-19 13:41:06,402:INFO:Set up label encoding.
2025-02-19 13:41:06,402:INFO:Set up simple imputation.
2025-02-19 13:41:06,439:INFO:Finished creating preprocessing pipeline.
2025-02-19 13:41:06,445:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 13:41:06,445:INFO:Creating final display dataframe.
2025-02-19 13:41:06,545:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    9564
2025-02-19 13:41:06,621:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:41:06,624:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:41:06,701:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:41:06,704:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:41:06,707:INFO:setup() successfully completed in 2.85s...............
2025-02-19 13:41:06,708:INFO:Initializing create_model()
2025-02-19 13:41:06,708:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f6a7eee1210>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 13:41:06,708:INFO:Checking exceptions
2025-02-19 13:41:06,711:INFO:Importing libraries
2025-02-19 13:41:06,712:INFO:Copying training dataset
2025-02-19 13:41:06,723:INFO:Defining folds
2025-02-19 13:41:06,723:INFO:Declaring metric variables
2025-02-19 13:41:06,723:INFO:Importing untrained model
2025-02-19 13:41:06,724:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:41:06,725:INFO:Starting cross validation
2025-02-19 13:41:06,726:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:41:13,750:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:13,757:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:13,778:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:13,875:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:13,916:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:13,929:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:14,025:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:14,032:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:14,040:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:14,149:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:14,171:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:14,182:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,345:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,363:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,404:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,411:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,419:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,426:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,433:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,440:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,801:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,817:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:15,823:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:16,259:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:16,267:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:16,274:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:16,282:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:16,286:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:16,290:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:16,298:INFO:Calculating mean and std
2025-02-19 13:41:16,301:INFO:Creating metrics dataframe
2025-02-19 13:41:16,304:INFO:Finalizing model
2025-02-19 13:41:16,773:INFO:Uploading results into container
2025-02-19 13:41:16,774:INFO:Uploading model into container now
2025-02-19 13:41:16,782:INFO:_master_model_container: 1
2025-02-19 13:41:16,783:INFO:_display_container: 2
2025-02-19 13:41:16,784:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:41:16,784:INFO:create_model() successfully completed......................................
2025-02-19 13:41:16,944:INFO:Initializing tune_model()
2025-02-19 13:41:16,944:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f6a7eee1210>)
2025-02-19 13:41:16,944:INFO:Checking exceptions
2025-02-19 13:41:16,952:INFO:Copying training dataset
2025-02-19 13:41:16,956:INFO:Checking base model
2025-02-19 13:41:16,957:INFO:Base model : Random Forest Classifier
2025-02-19 13:41:16,957:INFO:Declaring metric variables
2025-02-19 13:41:16,958:INFO:Defining Hyperparameters
2025-02-19 13:41:17,082:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 13:41:17,082:INFO:Tuning with n_jobs=-1
2025-02-19 13:41:17,082:INFO:Initializing RandomizedSearchCV
2025-02-19 13:41:17,089:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/model_selection/_search.py:318: UserWarning: The total space of parameters 1 is smaller than n_iter=10. Running 1 iterations. For exhaustive searches, use GridSearchCV.
  warnings.warn(

2025-02-19 13:41:18,557:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:18,585:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:18,594:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:18,596:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:19,902:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:19,903:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:19,929:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:19,956:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:20,646:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:20,660:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:20,671:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 13:41:20,672:INFO:Hyperparameter search completed
2025-02-19 13:41:20,672:INFO:SubProcess create_model() called ==================================
2025-02-19 13:41:20,672:INFO:Initializing create_model()
2025-02-19 13:41:20,672:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f6a7eee1210>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f6a716f5c00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 13:41:20,672:INFO:Checking exceptions
2025-02-19 13:41:20,672:INFO:Importing libraries
2025-02-19 13:41:20,673:INFO:Copying training dataset
2025-02-19 13:41:20,677:INFO:Defining folds
2025-02-19 13:41:20,678:INFO:Declaring metric variables
2025-02-19 13:41:20,678:INFO:Importing untrained model
2025-02-19 13:41:20,678:INFO:Declaring custom model
2025-02-19 13:41:20,679:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:41:20,679:INFO:Starting cross validation
2025-02-19 13:41:20,680:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:41:22,024:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,024:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,032:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,036:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,040:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,045:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,061:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,068:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,073:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,076:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,079:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:22,091:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,377:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,378:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,384:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,384:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,391:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,396:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,413:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,418:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,424:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,430:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:23,439:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:24,190:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:24,198:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:24,206:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:24,214:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:24,218:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:24,221:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:24,230:INFO:Calculating mean and std
2025-02-19 13:41:24,232:INFO:Creating metrics dataframe
2025-02-19 13:41:24,238:INFO:Finalizing model
2025-02-19 13:41:24,751:INFO:Uploading results into container
2025-02-19 13:41:24,752:INFO:Uploading model into container now
2025-02-19 13:41:24,752:INFO:_master_model_container: 2
2025-02-19 13:41:24,753:INFO:_display_container: 3
2025-02-19 13:41:24,753:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:41:24,753:INFO:create_model() successfully completed......................................
2025-02-19 13:41:24,869:INFO:SubProcess create_model() end ==================================
2025-02-19 13:41:24,869:INFO:choose_better activated
2025-02-19 13:41:24,870:INFO:SubProcess create_model() called ==================================
2025-02-19 13:41:24,871:INFO:Initializing create_model()
2025-02-19 13:41:24,871:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f6a7eee1210>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 13:41:24,871:INFO:Checking exceptions
2025-02-19 13:41:24,874:INFO:Importing libraries
2025-02-19 13:41:24,874:INFO:Copying training dataset
2025-02-19 13:41:24,881:INFO:Defining folds
2025-02-19 13:41:24,882:INFO:Declaring metric variables
2025-02-19 13:41:24,882:INFO:Importing untrained model
2025-02-19 13:41:24,882:INFO:Declaring custom model
2025-02-19 13:41:24,883:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:41:24,883:INFO:Starting cross validation
2025-02-19 13:41:24,885:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:41:26,254:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,262:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,268:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,279:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,286:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,286:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,286:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,293:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,301:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:26,311:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,602:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,610:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,618:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,639:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,643:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,647:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,655:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,659:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,674:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,684:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,691:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:27,697:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:28,442:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:28,446:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:28,452:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:28,455:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:28,464:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:28,464:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:28,478:INFO:Calculating mean and std
2025-02-19 13:41:28,479:INFO:Creating metrics dataframe
2025-02-19 13:41:28,481:INFO:Finalizing model
2025-02-19 13:41:28,985:INFO:Uploading results into container
2025-02-19 13:41:28,986:INFO:Uploading model into container now
2025-02-19 13:41:28,986:INFO:_master_model_container: 3
2025-02-19 13:41:28,986:INFO:_display_container: 4
2025-02-19 13:41:28,987:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:41:28,987:INFO:create_model() successfully completed......................................
2025-02-19 13:41:29,100:INFO:SubProcess create_model() end ==================================
2025-02-19 13:41:29,102:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 13:41:29,103:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 13:41:29,104:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 13:41:29,104:INFO:choose_better completed
2025-02-19 13:41:29,104:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 13:41:29,117:INFO:_master_model_container: 3
2025-02-19 13:41:29,118:INFO:_display_container: 3
2025-02-19 13:41:29,119:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:41:29,119:INFO:tune_model() successfully completed......................................
2025-02-19 13:41:29,243:INFO:Initializing calibrate_model()
2025-02-19 13:41:29,243:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f6a7eee1210>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 13:41:29,243:INFO:Checking exceptions
2025-02-19 13:41:29,247:INFO:Preloading libraries
2025-02-19 13:41:29,247:INFO:Preparing display monitor
2025-02-19 13:41:29,249:INFO:Getting model name
2025-02-19 13:41:29,250:INFO:Base model : Random Forest Classifier
2025-02-19 13:41:29,250:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 13:41:29,250:INFO:SubProcess create_model() called ==================================
2025-02-19 13:41:29,253:INFO:Initializing create_model()
2025-02-19 13:41:29,253:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f6a7eee1210>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f6a7dfff700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 13:41:29,253:INFO:Checking exceptions
2025-02-19 13:41:29,253:INFO:Importing libraries
2025-02-19 13:41:29,253:INFO:Copying training dataset
2025-02-19 13:41:29,260:INFO:Defining folds
2025-02-19 13:41:29,260:INFO:Declaring metric variables
2025-02-19 13:41:29,260:INFO:Importing untrained model
2025-02-19 13:41:29,260:INFO:Declaring custom model
2025-02-19 13:41:29,262:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:41:29,262:INFO:Starting cross validation
2025-02-19 13:41:29,264:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:41:34,909:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:34,917:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:34,924:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:35,024:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:35,031:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:35,037:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:35,045:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:35,060:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:35,067:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:35,239:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:35,245:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:35,251:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:40,232:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:40,246:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:40,252:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:40,816:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:40,834:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:40,849:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:40,905:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:40,919:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:40,927:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:41,172:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:41,183:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:41,189:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:43,906:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:43,913:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:43,920:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:44,408:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:44,414:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:44,423:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:44,433:INFO:Calculating mean and std
2025-02-19 13:41:44,434:INFO:Creating metrics dataframe
2025-02-19 13:41:44,436:INFO:Finalizing model
2025-02-19 13:41:46,913:INFO:Uploading results into container
2025-02-19 13:41:46,914:INFO:Uploading model into container now
2025-02-19 13:41:46,915:INFO:_master_model_container: 4
2025-02-19 13:41:46,915:INFO:_display_container: 4
2025-02-19 13:41:46,916:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 13:41:46,916:INFO:create_model() successfully completed......................................
2025-02-19 13:41:47,033:INFO:SubProcess create_model() end ==================================
2025-02-19 13:41:47,048:INFO:_master_model_container: 4
2025-02-19 13:41:47,048:INFO:_display_container: 4
2025-02-19 13:41:47,050:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 13:41:47,050:INFO:calibrate_model() successfully completed......................................
2025-02-19 13:41:47,189:INFO:Initializing finalize_model()
2025-02-19 13:41:47,189:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f6a7eee1210>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 13:41:47,191:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 13:41:47,197:INFO:Initializing create_model()
2025-02-19 13:41:47,197:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f6a7eee1210>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 13:41:47,198:INFO:Checking exceptions
2025-02-19 13:41:47,199:INFO:Importing libraries
2025-02-19 13:41:47,199:INFO:Copying training dataset
2025-02-19 13:41:47,200:INFO:Defining folds
2025-02-19 13:41:47,200:INFO:Declaring metric variables
2025-02-19 13:41:47,200:INFO:Importing untrained model
2025-02-19 13:41:47,200:INFO:Declaring custom model
2025-02-19 13:41:47,202:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:41:47,203:INFO:Cross validation set to False
2025-02-19 13:41:47,203:INFO:Fitting Model
2025-02-19 13:41:49,853:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 13:41:49,854:INFO:create_model() successfully completed......................................
2025-02-19 13:41:49,968:INFO:_master_model_container: 4
2025-02-19 13:41:49,968:INFO:_display_container: 4
2025-02-19 13:41:49,983:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 13:41:49,983:INFO:finalize_model() successfully completed......................................
2025-02-19 13:41:50,121:INFO:Initializing predict_model()
2025-02-19 13:41:50,121:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f6a7eee1210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f6a72aaf760>)
2025-02-19 13:41:50,121:INFO:Checking exceptions
2025-02-19 13:41:50,121:INFO:Preloading libraries
2025-02-19 13:41:50,122:INFO:Set up data.
2025-02-19 13:41:50,144:INFO:Set up index.
2025-02-19 13:41:50,607:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:50,614:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:50,620:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:41:51,606:INFO:Initializing save_model()
2025-02-19 13:41:51,606:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), model_name=outputs/models/trained_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 13:41:51,607:INFO:Adding model into prep_pipe
2025-02-19 13:41:51,607:WARNING:Only Model saved as it was a pipeline.
2025-02-19 13:41:51,951:INFO:outputs/models/trained_model.pkl saved in current working directory
2025-02-19 13:41:51,959:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 13:41:51,959:INFO:save_model() successfully completed......................................
2025-02-19 13:48:01,613:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:48:01,613:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:48:01,613:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:48:01,613:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:48:06,625:INFO:PyCaret ClassificationExperiment
2025-02-19 13:48:06,625:INFO:Logging name: clf-default-name
2025-02-19 13:48:06,625:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 13:48:06,626:INFO:version 3.3.2
2025-02-19 13:48:06,626:INFO:Initializing setup()
2025-02-19 13:48:06,626:INFO:self.USI: 4fc7
2025-02-19 13:48:06,626:INFO:self._variable_keys: {'y_train', 'exp_name_log', 'html_param', '_available_plots', 'fold_generator', 'fold_shuffle_param', 'fold_groups_param', 'fix_imbalance', 'data', 'X_test', 'log_plots_param', 'n_jobs_param', 'memory', 'X', 'y_test', 'seed', 'logging_param', 'gpu_param', 'target_param', 'X_train', 'is_multiclass', 'idx', 'USI', 'pipeline', 'exp_id', '_ml_usecase', 'gpu_n_jobs_param', 'y'}
2025-02-19 13:48:06,626:INFO:Checking environment
2025-02-19 13:48:06,626:INFO:python_version: 3.10.12
2025-02-19 13:48:06,626:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 13:48:06,626:INFO:machine: x86_64
2025-02-19 13:48:06,628:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 13:48:06,628:INFO:Memory: svmem(total=7813279744, available=1618227200, percent=79.3, used=5278609408, free=768540672, active=2156826624, inactive=4168056832, buffers=79470592, cached=1686659072, shared=627527680, slab=320720896)
2025-02-19 13:48:06,629:INFO:Physical Core: 2
2025-02-19 13:48:06,629:INFO:Logical Core: 4
2025-02-19 13:48:06,629:INFO:Checking libraries
2025-02-19 13:48:06,629:INFO:System:
2025-02-19 13:48:06,629:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 13:48:06,629:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 13:48:06,630:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 13:48:06,630:INFO:PyCaret required dependencies:
2025-02-19 13:48:07,091:INFO:                 pip: 23.3.2
2025-02-19 13:48:07,091:INFO:          setuptools: 65.5.0
2025-02-19 13:48:07,091:INFO:             pycaret: 3.3.2
2025-02-19 13:48:07,091:INFO:             IPython: 8.20.0
2025-02-19 13:48:07,091:INFO:          ipywidgets: 8.1.1
2025-02-19 13:48:07,091:INFO:                tqdm: 4.66.1
2025-02-19 13:48:07,091:INFO:               numpy: 1.24.4
2025-02-19 13:48:07,091:INFO:              pandas: 1.5.3
2025-02-19 13:48:07,091:INFO:              jinja2: 3.1.3
2025-02-19 13:48:07,091:INFO:               scipy: 1.10.1
2025-02-19 13:48:07,091:INFO:              joblib: 1.3.2
2025-02-19 13:48:07,091:INFO:             sklearn: 1.2.2
2025-02-19 13:48:07,091:INFO:                pyod: 1.1.2
2025-02-19 13:48:07,091:INFO:            imblearn: 0.12.3
2025-02-19 13:48:07,091:INFO:   category_encoders: 2.6.3
2025-02-19 13:48:07,092:INFO:            lightgbm: 4.2.0
2025-02-19 13:48:07,092:INFO:               numba: 0.58.1
2025-02-19 13:48:07,092:INFO:            requests: 2.31.0
2025-02-19 13:48:07,092:INFO:          matplotlib: 3.6.0
2025-02-19 13:48:07,092:INFO:          scikitplot: 0.3.7
2025-02-19 13:48:07,092:INFO:         yellowbrick: 1.5
2025-02-19 13:48:07,092:INFO:              plotly: 5.18.0
2025-02-19 13:48:07,092:INFO:    plotly-resampler: Not installed
2025-02-19 13:48:07,092:INFO:             kaleido: 0.2.1
2025-02-19 13:48:07,092:INFO:           schemdraw: 0.15
2025-02-19 13:48:07,092:INFO:         statsmodels: 0.14.1
2025-02-19 13:48:07,092:INFO:              sktime: 0.21.1
2025-02-19 13:48:07,092:INFO:               tbats: 1.1.3
2025-02-19 13:48:07,092:INFO:            pmdarima: 2.0.4
2025-02-19 13:48:07,092:INFO:              psutil: 5.9.7
2025-02-19 13:48:07,092:INFO:          markupsafe: 2.1.3
2025-02-19 13:48:07,092:INFO:             pickle5: Not installed
2025-02-19 13:48:07,092:INFO:         cloudpickle: 2.2.1
2025-02-19 13:48:07,092:INFO:         deprecation: 2.1.0
2025-02-19 13:48:07,092:INFO:              xxhash: 3.4.1
2025-02-19 13:48:07,092:INFO:           wurlitzer: 3.0.3
2025-02-19 13:48:07,092:INFO:PyCaret optional dependencies:
2025-02-19 13:48:08,190:INFO:                shap: 0.44.0
2025-02-19 13:48:08,190:INFO:           interpret: 0.5.0
2025-02-19 13:48:08,190:INFO:                umap: 0.5.5
2025-02-19 13:48:08,190:INFO:     ydata_profiling: 4.6.0
2025-02-19 13:48:08,190:INFO:  explainerdashboard: 0.4.5
2025-02-19 13:48:08,191:INFO:             autoviz: 0.1.804
2025-02-19 13:48:08,191:INFO:           fairlearn: 0.7.0
2025-02-19 13:48:08,191:INFO:          deepchecks: Not installed
2025-02-19 13:48:08,191:INFO:             xgboost: 1.6.2
2025-02-19 13:48:08,191:INFO:            catboost: 1.2.2
2025-02-19 13:48:08,191:INFO:              kmodes: 0.12.2
2025-02-19 13:48:08,191:INFO:             mlxtend: 0.23.1
2025-02-19 13:48:08,191:INFO:       statsforecast: 1.5.0
2025-02-19 13:48:08,191:INFO:        tune_sklearn: 0.5.0
2025-02-19 13:48:08,191:INFO:                 ray: 2.9.0
2025-02-19 13:48:08,191:INFO:            hyperopt: 0.2.7
2025-02-19 13:48:08,191:INFO:              optuna: 3.5.0
2025-02-19 13:48:08,191:INFO:               skopt: 0.9.0
2025-02-19 13:48:08,191:INFO:              mlflow: 1.30.1
2025-02-19 13:48:08,191:INFO:              gradio: 3.50.2
2025-02-19 13:48:08,191:INFO:             fastapi: 0.109.0
2025-02-19 13:48:08,191:INFO:             uvicorn: 0.25.0
2025-02-19 13:48:08,191:INFO:              m2cgen: 0.10.0
2025-02-19 13:48:08,191:INFO:           evidently: 0.2.8
2025-02-19 13:48:08,191:INFO:               fugue: 0.8.6
2025-02-19 13:48:08,191:INFO:           streamlit: Not installed
2025-02-19 13:48:08,191:INFO:             prophet: Not installed
2025-02-19 13:48:08,191:INFO:None
2025-02-19 13:48:08,191:INFO:Set up data.
2025-02-19 13:48:08,211:INFO:Set up folding strategy.
2025-02-19 13:48:08,211:INFO:Set up train/test split.
2025-02-19 13:48:08,217:INFO:Set up index.
2025-02-19 13:48:08,217:INFO:Assigning column types.
2025-02-19 13:48:08,221:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 13:48:08,270:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 13:48:08,273:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:48:08,305:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:48:08,327:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:48:08,394:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 13:48:08,395:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:48:08,423:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:48:08,426:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:48:08,426:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 13:48:08,478:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:48:08,506:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:48:08,509:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:48:08,556:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:48:08,585:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:48:08,587:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:48:08,588:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 13:48:08,664:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:48:08,667:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:48:08,742:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:48:08,745:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:48:08,746:INFO:Preparing preprocessing pipeline...
2025-02-19 13:48:08,748:INFO:Set up label encoding.
2025-02-19 13:48:08,748:INFO:Set up simple imputation.
2025-02-19 13:48:08,775:INFO:Finished creating preprocessing pipeline.
2025-02-19 13:48:08,781:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 13:48:08,781:INFO:Creating final display dataframe.
2025-02-19 13:48:08,873:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    4fc7
2025-02-19 13:48:08,949:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:48:08,951:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:48:09,026:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:48:09,031:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:48:09,033:INFO:setup() successfully completed in 2.41s...............
2025-02-19 13:48:09,033:INFO:Initializing create_model()
2025-02-19 13:48:09,034:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f77c20c4dc0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 13:48:09,034:INFO:Checking exceptions
2025-02-19 13:48:09,036:INFO:Importing libraries
2025-02-19 13:48:09,036:INFO:Copying training dataset
2025-02-19 13:48:09,041:INFO:Defining folds
2025-02-19 13:48:09,041:INFO:Declaring metric variables
2025-02-19 13:48:09,041:INFO:Importing untrained model
2025-02-19 13:48:09,042:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:48:09,042:INFO:Starting cross validation
2025-02-19 13:48:09,044:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:48:15,663:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:15,690:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:15,700:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:15,895:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:15,907:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:15,917:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:15,982:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:15,990:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:16,000:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:16,069:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:16,079:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:16,096:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,085:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,095:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,130:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,329:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,338:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,368:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,440:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,447:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,463:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,662:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,668:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:17,685:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:18,107:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:18,114:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:18,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:18,203:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:18,208:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:18,213:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:18,222:INFO:Calculating mean and std
2025-02-19 13:48:18,223:INFO:Creating metrics dataframe
2025-02-19 13:48:18,227:INFO:Finalizing model
2025-02-19 13:48:18,660:INFO:Uploading results into container
2025-02-19 13:48:18,661:INFO:Uploading model into container now
2025-02-19 13:48:18,668:INFO:_master_model_container: 1
2025-02-19 13:48:18,668:INFO:_display_container: 2
2025-02-19 13:48:18,669:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:48:18,669:INFO:create_model() successfully completed......................................
2025-02-19 13:48:18,825:INFO:Initializing tune_model()
2025-02-19 13:48:18,825:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f77c20c4dc0>)
2025-02-19 13:48:18,825:INFO:Checking exceptions
2025-02-19 13:48:18,833:INFO:Copying training dataset
2025-02-19 13:48:18,837:INFO:Checking base model
2025-02-19 13:48:18,837:INFO:Base model : Random Forest Classifier
2025-02-19 13:48:18,838:INFO:Declaring metric variables
2025-02-19 13:48:18,838:INFO:Defining Hyperparameters
2025-02-19 13:48:18,961:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 13:48:18,961:INFO:Tuning with n_jobs=-1
2025-02-19 13:48:18,961:INFO:Initializing RandomizedSearchCV
2025-02-19 13:48:18,967:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/model_selection/_search.py:318: UserWarning: The total space of parameters 1 is smaller than n_iter=10. Running 1 iterations. For exhaustive searches, use GridSearchCV.
  warnings.warn(

2025-02-19 13:48:20,265:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:20,324:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:20,333:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:20,341:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:21,655:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:21,690:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:21,708:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:21,713:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:22,402:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:22,422:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:22,428:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 13:48:22,428:INFO:Hyperparameter search completed
2025-02-19 13:48:22,428:INFO:SubProcess create_model() called ==================================
2025-02-19 13:48:22,429:INFO:Initializing create_model()
2025-02-19 13:48:22,429:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f77c20c4dc0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f77c0e4ad40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 13:48:22,429:INFO:Checking exceptions
2025-02-19 13:48:22,429:INFO:Importing libraries
2025-02-19 13:48:22,429:INFO:Copying training dataset
2025-02-19 13:48:22,435:INFO:Defining folds
2025-02-19 13:48:22,435:INFO:Declaring metric variables
2025-02-19 13:48:22,435:INFO:Importing untrained model
2025-02-19 13:48:22,435:INFO:Declaring custom model
2025-02-19 13:48:22,436:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:48:22,436:INFO:Starting cross validation
2025-02-19 13:48:22,437:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:48:23,679:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,686:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,696:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,719:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,727:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,734:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,797:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,804:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,811:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,843:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,868:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:23,882:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:24,902:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:24,912:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:24,918:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,132:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,139:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,145:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,172:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,179:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,188:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,223:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,231:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,249:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,827:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,831:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,836:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,890:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,894:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,898:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:25,908:INFO:Calculating mean and std
2025-02-19 13:48:25,909:INFO:Creating metrics dataframe
2025-02-19 13:48:25,911:INFO:Finalizing model
2025-02-19 13:48:26,369:INFO:Uploading results into container
2025-02-19 13:48:26,371:INFO:Uploading model into container now
2025-02-19 13:48:26,373:INFO:_master_model_container: 2
2025-02-19 13:48:26,373:INFO:_display_container: 3
2025-02-19 13:48:26,374:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:48:26,374:INFO:create_model() successfully completed......................................
2025-02-19 13:48:26,494:INFO:SubProcess create_model() end ==================================
2025-02-19 13:48:26,494:INFO:choose_better activated
2025-02-19 13:48:26,495:INFO:SubProcess create_model() called ==================================
2025-02-19 13:48:26,496:INFO:Initializing create_model()
2025-02-19 13:48:26,496:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f77c20c4dc0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 13:48:26,496:INFO:Checking exceptions
2025-02-19 13:48:26,497:INFO:Importing libraries
2025-02-19 13:48:26,497:INFO:Copying training dataset
2025-02-19 13:48:26,505:INFO:Defining folds
2025-02-19 13:48:26,505:INFO:Declaring metric variables
2025-02-19 13:48:26,505:INFO:Importing untrained model
2025-02-19 13:48:26,505:INFO:Declaring custom model
2025-02-19 13:48:26,506:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:48:26,507:INFO:Starting cross validation
2025-02-19 13:48:26,508:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:48:27,837:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,848:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,856:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,859:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,866:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,873:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,875:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,883:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,898:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,921:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,928:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:27,935:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,274:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,282:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,299:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,317:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,323:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,330:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,355:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,366:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,374:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,389:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,396:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:29,402:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:30,091:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:30,093:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:30,096:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:30,097:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:30,100:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:30,101:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:30,114:INFO:Calculating mean and std
2025-02-19 13:48:30,116:INFO:Creating metrics dataframe
2025-02-19 13:48:30,123:INFO:Finalizing model
2025-02-19 13:48:30,627:INFO:Uploading results into container
2025-02-19 13:48:30,628:INFO:Uploading model into container now
2025-02-19 13:48:30,628:INFO:_master_model_container: 3
2025-02-19 13:48:30,628:INFO:_display_container: 4
2025-02-19 13:48:30,628:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:48:30,629:INFO:create_model() successfully completed......................................
2025-02-19 13:48:30,741:INFO:SubProcess create_model() end ==================================
2025-02-19 13:48:30,742:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 13:48:30,743:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 13:48:30,744:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 13:48:30,745:INFO:choose_better completed
2025-02-19 13:48:30,745:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 13:48:30,757:INFO:_master_model_container: 3
2025-02-19 13:48:30,758:INFO:_display_container: 3
2025-02-19 13:48:30,759:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:48:30,759:INFO:tune_model() successfully completed......................................
2025-02-19 13:48:30,883:INFO:Initializing calibrate_model()
2025-02-19 13:48:30,883:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f77c20c4dc0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 13:48:30,884:INFO:Checking exceptions
2025-02-19 13:48:30,887:INFO:Preloading libraries
2025-02-19 13:48:30,887:INFO:Preparing display monitor
2025-02-19 13:48:30,889:INFO:Getting model name
2025-02-19 13:48:30,890:INFO:Base model : Random Forest Classifier
2025-02-19 13:48:30,890:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 13:48:30,890:INFO:SubProcess create_model() called ==================================
2025-02-19 13:48:30,893:INFO:Initializing create_model()
2025-02-19 13:48:30,893:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f77c20c4dc0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f77b4d13d00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 13:48:30,893:INFO:Checking exceptions
2025-02-19 13:48:30,893:INFO:Importing libraries
2025-02-19 13:48:30,893:INFO:Copying training dataset
2025-02-19 13:48:30,902:INFO:Defining folds
2025-02-19 13:48:30,902:INFO:Declaring metric variables
2025-02-19 13:48:30,902:INFO:Importing untrained model
2025-02-19 13:48:30,902:INFO:Declaring custom model
2025-02-19 13:48:30,905:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:48:30,905:INFO:Starting cross validation
2025-02-19 13:48:30,906:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:48:36,668:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,676:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,701:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,719:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,727:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,734:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,734:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,743:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,756:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,764:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,771:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:36,779:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,309:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,316:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,323:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,368:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,376:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,384:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,536:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,543:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,550:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,682:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,699:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:42,705:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:45,846:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:45,852:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:45,857:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:45,935:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:45,939:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:45,943:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:45,948:INFO:Calculating mean and std
2025-02-19 13:48:45,948:INFO:Creating metrics dataframe
2025-02-19 13:48:45,950:INFO:Finalizing model
2025-02-19 13:48:48,424:INFO:Uploading results into container
2025-02-19 13:48:48,426:INFO:Uploading model into container now
2025-02-19 13:48:48,427:INFO:_master_model_container: 4
2025-02-19 13:48:48,427:INFO:_display_container: 4
2025-02-19 13:48:48,431:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 13:48:48,431:INFO:create_model() successfully completed......................................
2025-02-19 13:48:48,552:INFO:SubProcess create_model() end ==================================
2025-02-19 13:48:48,567:INFO:_master_model_container: 4
2025-02-19 13:48:48,567:INFO:_display_container: 4
2025-02-19 13:48:48,569:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 13:48:48,569:INFO:calibrate_model() successfully completed......................................
2025-02-19 13:48:48,692:INFO:Initializing finalize_model()
2025-02-19 13:48:48,692:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f77c20c4dc0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 13:48:48,695:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 13:48:48,702:INFO:Initializing create_model()
2025-02-19 13:48:48,702:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f77c20c4dc0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 13:48:48,702:INFO:Checking exceptions
2025-02-19 13:48:48,704:INFO:Importing libraries
2025-02-19 13:48:48,704:INFO:Copying training dataset
2025-02-19 13:48:48,704:INFO:Defining folds
2025-02-19 13:48:48,704:INFO:Declaring metric variables
2025-02-19 13:48:48,705:INFO:Importing untrained model
2025-02-19 13:48:48,705:INFO:Declaring custom model
2025-02-19 13:48:48,706:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:48:48,708:INFO:Cross validation set to False
2025-02-19 13:48:48,708:INFO:Fitting Model
2025-02-19 13:48:51,545:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 13:48:51,545:INFO:create_model() successfully completed......................................
2025-02-19 13:48:51,668:INFO:_master_model_container: 4
2025-02-19 13:48:51,668:INFO:_display_container: 4
2025-02-19 13:48:51,683:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 13:48:51,683:INFO:finalize_model() successfully completed......................................
2025-02-19 13:48:51,819:INFO:Initializing predict_model()
2025-02-19 13:48:51,819:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f77c20c4dc0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f77b4c753f0>)
2025-02-19 13:48:51,819:INFO:Checking exceptions
2025-02-19 13:48:51,819:INFO:Preloading libraries
2025-02-19 13:48:51,819:INFO:Set up data.
2025-02-19 13:48:51,841:INFO:Set up index.
2025-02-19 13:48:52,300:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:52,306:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:52,311:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:48:53,134:INFO:Initializing save_model()
2025-02-19 13:48:53,134:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), model_name=outputs/experiment_20250219_134802/models/trained_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 13:48:53,135:INFO:Adding model into prep_pipe
2025-02-19 13:48:53,135:WARNING:Only Model saved as it was a pipeline.
2025-02-19 13:48:53,390:INFO:outputs/experiment_20250219_134802/models/trained_model.pkl saved in current working directory
2025-02-19 13:48:53,399:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 13:48:53,400:INFO:save_model() successfully completed......................................
2025-02-19 13:52:21,824:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:52:21,824:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:52:21,824:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:52:21,824:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 13:52:26,753:INFO:PyCaret ClassificationExperiment
2025-02-19 13:52:26,753:INFO:Logging name: clf-default-name
2025-02-19 13:52:26,753:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 13:52:26,754:INFO:version 3.3.2
2025-02-19 13:52:26,754:INFO:Initializing setup()
2025-02-19 13:52:26,754:INFO:self.USI: e214
2025-02-19 13:52:26,754:INFO:self._variable_keys: {'gpu_param', 'exp_id', 'memory', '_ml_usecase', 'X_test', 'idx', 'y_train', 'X', 'fold_generator', 'pipeline', 'y_test', 'seed', 'fold_groups_param', 'X_train', 'log_plots_param', 'target_param', 'y', 'fix_imbalance', 'data', 'gpu_n_jobs_param', 'n_jobs_param', '_available_plots', 'html_param', 'exp_name_log', 'fold_shuffle_param', 'logging_param', 'is_multiclass', 'USI'}
2025-02-19 13:52:26,754:INFO:Checking environment
2025-02-19 13:52:26,754:INFO:python_version: 3.10.12
2025-02-19 13:52:26,754:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 13:52:26,754:INFO:machine: x86_64
2025-02-19 13:52:26,756:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 13:52:26,756:INFO:Memory: svmem(total=7813279744, available=1717542912, percent=78.0, used=5187645440, free=910159872, active=2382471168, inactive=3908046848, buffers=64434176, cached=1651040256, shared=619163648, slab=320643072)
2025-02-19 13:52:26,757:INFO:Physical Core: 2
2025-02-19 13:52:26,757:INFO:Logical Core: 4
2025-02-19 13:52:26,757:INFO:Checking libraries
2025-02-19 13:52:26,757:INFO:System:
2025-02-19 13:52:26,757:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 13:52:26,757:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 13:52:26,757:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 13:52:26,758:INFO:PyCaret required dependencies:
2025-02-19 13:52:27,215:INFO:                 pip: 23.3.2
2025-02-19 13:52:27,215:INFO:          setuptools: 65.5.0
2025-02-19 13:52:27,215:INFO:             pycaret: 3.3.2
2025-02-19 13:52:27,215:INFO:             IPython: 8.20.0
2025-02-19 13:52:27,216:INFO:          ipywidgets: 8.1.1
2025-02-19 13:52:27,216:INFO:                tqdm: 4.66.1
2025-02-19 13:52:27,216:INFO:               numpy: 1.24.4
2025-02-19 13:52:27,216:INFO:              pandas: 1.5.3
2025-02-19 13:52:27,216:INFO:              jinja2: 3.1.3
2025-02-19 13:52:27,216:INFO:               scipy: 1.10.1
2025-02-19 13:52:27,216:INFO:              joblib: 1.3.2
2025-02-19 13:52:27,216:INFO:             sklearn: 1.2.2
2025-02-19 13:52:27,216:INFO:                pyod: 1.1.2
2025-02-19 13:52:27,216:INFO:            imblearn: 0.12.3
2025-02-19 13:52:27,216:INFO:   category_encoders: 2.6.3
2025-02-19 13:52:27,216:INFO:            lightgbm: 4.2.0
2025-02-19 13:52:27,216:INFO:               numba: 0.58.1
2025-02-19 13:52:27,217:INFO:            requests: 2.31.0
2025-02-19 13:52:27,217:INFO:          matplotlib: 3.6.0
2025-02-19 13:52:27,217:INFO:          scikitplot: 0.3.7
2025-02-19 13:52:27,217:INFO:         yellowbrick: 1.5
2025-02-19 13:52:27,217:INFO:              plotly: 5.18.0
2025-02-19 13:52:27,217:INFO:    plotly-resampler: Not installed
2025-02-19 13:52:27,217:INFO:             kaleido: 0.2.1
2025-02-19 13:52:27,217:INFO:           schemdraw: 0.15
2025-02-19 13:52:27,217:INFO:         statsmodels: 0.14.1
2025-02-19 13:52:27,217:INFO:              sktime: 0.21.1
2025-02-19 13:52:27,217:INFO:               tbats: 1.1.3
2025-02-19 13:52:27,217:INFO:            pmdarima: 2.0.4
2025-02-19 13:52:27,218:INFO:              psutil: 5.9.7
2025-02-19 13:52:27,218:INFO:          markupsafe: 2.1.3
2025-02-19 13:52:27,218:INFO:             pickle5: Not installed
2025-02-19 13:52:27,218:INFO:         cloudpickle: 2.2.1
2025-02-19 13:52:27,218:INFO:         deprecation: 2.1.0
2025-02-19 13:52:27,218:INFO:              xxhash: 3.4.1
2025-02-19 13:52:27,218:INFO:           wurlitzer: 3.0.3
2025-02-19 13:52:27,218:INFO:PyCaret optional dependencies:
2025-02-19 13:52:28,250:INFO:                shap: 0.44.0
2025-02-19 13:52:28,250:INFO:           interpret: 0.5.0
2025-02-19 13:52:28,250:INFO:                umap: 0.5.5
2025-02-19 13:52:28,251:INFO:     ydata_profiling: 4.6.0
2025-02-19 13:52:28,251:INFO:  explainerdashboard: 0.4.5
2025-02-19 13:52:28,251:INFO:             autoviz: 0.1.804
2025-02-19 13:52:28,251:INFO:           fairlearn: 0.7.0
2025-02-19 13:52:28,251:INFO:          deepchecks: Not installed
2025-02-19 13:52:28,251:INFO:             xgboost: 1.6.2
2025-02-19 13:52:28,251:INFO:            catboost: 1.2.2
2025-02-19 13:52:28,251:INFO:              kmodes: 0.12.2
2025-02-19 13:52:28,251:INFO:             mlxtend: 0.23.1
2025-02-19 13:52:28,251:INFO:       statsforecast: 1.5.0
2025-02-19 13:52:28,251:INFO:        tune_sklearn: 0.5.0
2025-02-19 13:52:28,251:INFO:                 ray: 2.9.0
2025-02-19 13:52:28,251:INFO:            hyperopt: 0.2.7
2025-02-19 13:52:28,251:INFO:              optuna: 3.5.0
2025-02-19 13:52:28,251:INFO:               skopt: 0.9.0
2025-02-19 13:52:28,251:INFO:              mlflow: 1.30.1
2025-02-19 13:52:28,251:INFO:              gradio: 3.50.2
2025-02-19 13:52:28,251:INFO:             fastapi: 0.109.0
2025-02-19 13:52:28,251:INFO:             uvicorn: 0.25.0
2025-02-19 13:52:28,251:INFO:              m2cgen: 0.10.0
2025-02-19 13:52:28,251:INFO:           evidently: 0.2.8
2025-02-19 13:52:28,251:INFO:               fugue: 0.8.6
2025-02-19 13:52:28,252:INFO:           streamlit: Not installed
2025-02-19 13:52:28,252:INFO:             prophet: Not installed
2025-02-19 13:52:28,252:INFO:None
2025-02-19 13:52:28,252:INFO:Set up data.
2025-02-19 13:52:28,272:INFO:Set up folding strategy.
2025-02-19 13:52:28,272:INFO:Set up train/test split.
2025-02-19 13:52:28,279:INFO:Set up index.
2025-02-19 13:52:28,279:INFO:Assigning column types.
2025-02-19 13:52:28,283:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 13:52:28,330:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 13:52:28,332:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:52:28,389:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:52:28,443:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:52:28,508:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 13:52:28,509:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:52:28,537:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:52:28,540:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:52:28,540:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 13:52:28,590:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:52:28,621:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:52:28,624:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:52:28,672:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 13:52:28,700:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:52:28,703:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:52:28,704:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 13:52:28,783:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:52:28,786:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:52:28,860:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:52:28,863:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:52:28,865:INFO:Preparing preprocessing pipeline...
2025-02-19 13:52:28,866:INFO:Set up label encoding.
2025-02-19 13:52:28,866:INFO:Set up simple imputation.
2025-02-19 13:52:28,893:INFO:Finished creating preprocessing pipeline.
2025-02-19 13:52:28,899:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 13:52:28,899:INFO:Creating final display dataframe.
2025-02-19 13:52:28,993:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    e214
2025-02-19 13:52:29,066:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:52:29,069:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:52:29,143:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 13:52:29,146:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 13:52:29,150:INFO:setup() successfully completed in 2.4s...............
2025-02-19 13:52:29,151:INFO:Initializing create_model()
2025-02-19 13:52:29,151:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f955d018ee0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 13:52:29,151:INFO:Checking exceptions
2025-02-19 13:52:29,153:INFO:Importing libraries
2025-02-19 13:52:29,153:INFO:Copying training dataset
2025-02-19 13:52:29,159:INFO:Defining folds
2025-02-19 13:52:29,159:INFO:Declaring metric variables
2025-02-19 13:52:29,159:INFO:Importing untrained model
2025-02-19 13:52:29,160:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:52:29,160:INFO:Starting cross validation
2025-02-19 13:52:29,161:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:52:35,701:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,709:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,713:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,717:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,722:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,734:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,734:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,740:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,743:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,749:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,751:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:35,758:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,185:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,191:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,197:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,254:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,258:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,258:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,265:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,267:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,272:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,299:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,306:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,312:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,984:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,992:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:37,998:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:38,006:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:38,010:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:38,013:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:38,026:INFO:Calculating mean and std
2025-02-19 13:52:38,027:INFO:Creating metrics dataframe
2025-02-19 13:52:38,031:INFO:Finalizing model
2025-02-19 13:52:38,532:INFO:Uploading results into container
2025-02-19 13:52:38,533:INFO:Uploading model into container now
2025-02-19 13:52:38,541:INFO:_master_model_container: 1
2025-02-19 13:52:38,541:INFO:_display_container: 2
2025-02-19 13:52:38,541:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:52:38,541:INFO:create_model() successfully completed......................................
2025-02-19 13:52:38,697:INFO:Initializing tune_model()
2025-02-19 13:52:38,698:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f955d018ee0>)
2025-02-19 13:52:38,698:INFO:Checking exceptions
2025-02-19 13:52:38,705:INFO:Copying training dataset
2025-02-19 13:52:38,709:INFO:Checking base model
2025-02-19 13:52:38,709:INFO:Base model : Random Forest Classifier
2025-02-19 13:52:38,710:INFO:Declaring metric variables
2025-02-19 13:52:38,710:INFO:Defining Hyperparameters
2025-02-19 13:52:38,832:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 13:52:38,833:INFO:Tuning with n_jobs=-1
2025-02-19 13:52:38,833:INFO:Initializing RandomizedSearchCV
2025-02-19 13:52:38,838:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/model_selection/_search.py:318: UserWarning: The total space of parameters 1 is smaller than n_iter=10. Running 1 iterations. For exhaustive searches, use GridSearchCV.
  warnings.warn(

2025-02-19 13:52:40,192:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:40,207:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:40,242:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:40,291:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:41,781:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:41,915:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:41,959:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:42,112:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:42,773:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:42,896:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:42,906:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 13:52:42,906:INFO:Hyperparameter search completed
2025-02-19 13:52:42,906:INFO:SubProcess create_model() called ==================================
2025-02-19 13:52:42,907:INFO:Initializing create_model()
2025-02-19 13:52:42,907:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f955d018ee0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f95477be860>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 13:52:42,907:INFO:Checking exceptions
2025-02-19 13:52:42,907:INFO:Importing libraries
2025-02-19 13:52:42,907:INFO:Copying training dataset
2025-02-19 13:52:42,917:INFO:Defining folds
2025-02-19 13:52:42,917:INFO:Declaring metric variables
2025-02-19 13:52:42,918:INFO:Importing untrained model
2025-02-19 13:52:42,918:INFO:Declaring custom model
2025-02-19 13:52:42,919:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:52:42,920:INFO:Starting cross validation
2025-02-19 13:52:42,922:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:52:44,433:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,444:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,451:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,475:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,484:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,498:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,564:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,575:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,587:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,607:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,614:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:44,623:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:45,991:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,013:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,053:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,062:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,090:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,118:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,216:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,223:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,230:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,239:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,246:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,253:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,957:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,965:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,972:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:46,998:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:47,003:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:47,007:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:47,020:INFO:Calculating mean and std
2025-02-19 13:52:47,021:INFO:Creating metrics dataframe
2025-02-19 13:52:47,023:INFO:Finalizing model
2025-02-19 13:52:47,546:INFO:Uploading results into container
2025-02-19 13:52:47,547:INFO:Uploading model into container now
2025-02-19 13:52:47,547:INFO:_master_model_container: 2
2025-02-19 13:52:47,547:INFO:_display_container: 3
2025-02-19 13:52:47,548:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:52:47,548:INFO:create_model() successfully completed......................................
2025-02-19 13:52:47,680:INFO:SubProcess create_model() end ==================================
2025-02-19 13:52:47,680:INFO:choose_better activated
2025-02-19 13:52:47,680:INFO:SubProcess create_model() called ==================================
2025-02-19 13:52:47,682:INFO:Initializing create_model()
2025-02-19 13:52:47,682:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f955d018ee0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 13:52:47,682:INFO:Checking exceptions
2025-02-19 13:52:47,684:INFO:Importing libraries
2025-02-19 13:52:47,684:INFO:Copying training dataset
2025-02-19 13:52:47,692:INFO:Defining folds
2025-02-19 13:52:47,692:INFO:Declaring metric variables
2025-02-19 13:52:47,692:INFO:Importing untrained model
2025-02-19 13:52:47,693:INFO:Declaring custom model
2025-02-19 13:52:47,694:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:52:47,694:INFO:Starting cross validation
2025-02-19 13:52:47,696:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:52:49,175:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,182:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,190:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,193:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,200:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,210:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,223:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,231:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,239:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,250:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,258:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:49,266:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,643:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,651:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,659:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,672:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,678:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,680:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,686:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,688:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,694:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,719:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,726:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:50,733:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:51,456:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:51,464:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:51,465:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:51,469:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:51,469:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:51,473:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:51,480:INFO:Calculating mean and std
2025-02-19 13:52:51,481:INFO:Creating metrics dataframe
2025-02-19 13:52:51,483:INFO:Finalizing model
2025-02-19 13:52:51,958:INFO:Uploading results into container
2025-02-19 13:52:51,958:INFO:Uploading model into container now
2025-02-19 13:52:51,959:INFO:_master_model_container: 3
2025-02-19 13:52:51,959:INFO:_display_container: 4
2025-02-19 13:52:51,959:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:52:51,959:INFO:create_model() successfully completed......................................
2025-02-19 13:52:52,092:INFO:SubProcess create_model() end ==================================
2025-02-19 13:52:52,093:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 13:52:52,094:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 13:52:52,095:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 13:52:52,095:INFO:choose_better completed
2025-02-19 13:52:52,095:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 13:52:52,107:INFO:_master_model_container: 3
2025-02-19 13:52:52,107:INFO:_display_container: 3
2025-02-19 13:52:52,108:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 13:52:52,108:INFO:tune_model() successfully completed......................................
2025-02-19 13:52:52,239:INFO:Initializing calibrate_model()
2025-02-19 13:52:52,239:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f955d018ee0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 13:52:52,239:INFO:Checking exceptions
2025-02-19 13:52:52,242:INFO:Preloading libraries
2025-02-19 13:52:52,242:INFO:Preparing display monitor
2025-02-19 13:52:52,244:INFO:Getting model name
2025-02-19 13:52:52,244:INFO:Base model : Random Forest Classifier
2025-02-19 13:52:52,245:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 13:52:52,245:INFO:SubProcess create_model() called ==================================
2025-02-19 13:52:52,247:INFO:Initializing create_model()
2025-02-19 13:52:52,247:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f955d018ee0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f95477be860>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 13:52:52,247:INFO:Checking exceptions
2025-02-19 13:52:52,247:INFO:Importing libraries
2025-02-19 13:52:52,247:INFO:Copying training dataset
2025-02-19 13:52:52,253:INFO:Defining folds
2025-02-19 13:52:52,253:INFO:Declaring metric variables
2025-02-19 13:52:52,253:INFO:Importing untrained model
2025-02-19 13:52:52,253:INFO:Declaring custom model
2025-02-19 13:52:52,255:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:52:52,255:INFO:Starting cross validation
2025-02-19 13:52:52,256:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 13:52:58,680:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:58,693:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:58,715:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:58,732:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:58,747:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:58,763:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:59,191:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:59,224:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:59,252:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:59,345:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:59,378:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:52:59,385:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:06,861:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:06,880:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:06,887:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:07,253:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:07,272:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:07,287:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:07,649:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:07,672:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:07,691:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:07,891:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:07,898:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:07,926:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:12,017:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:12,027:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:12,033:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:12,102:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:12,115:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:12,125:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:12,140:INFO:Calculating mean and std
2025-02-19 13:53:12,141:INFO:Creating metrics dataframe
2025-02-19 13:53:12,144:INFO:Finalizing model
2025-02-19 13:53:15,907:INFO:Uploading results into container
2025-02-19 13:53:15,909:INFO:Uploading model into container now
2025-02-19 13:53:15,909:INFO:_master_model_container: 4
2025-02-19 13:53:15,910:INFO:_display_container: 4
2025-02-19 13:53:15,911:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 13:53:15,911:INFO:create_model() successfully completed......................................
2025-02-19 13:53:16,099:INFO:SubProcess create_model() end ==================================
2025-02-19 13:53:16,113:INFO:_master_model_container: 4
2025-02-19 13:53:16,113:INFO:_display_container: 4
2025-02-19 13:53:16,116:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 13:53:16,116:INFO:calibrate_model() successfully completed......................................
2025-02-19 13:53:16,312:INFO:Initializing finalize_model()
2025-02-19 13:53:16,312:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f955d018ee0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 13:53:16,314:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 13:53:16,321:INFO:Initializing create_model()
2025-02-19 13:53:16,321:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f955d018ee0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 13:53:16,321:INFO:Checking exceptions
2025-02-19 13:53:16,323:INFO:Importing libraries
2025-02-19 13:53:16,324:INFO:Copying training dataset
2025-02-19 13:53:16,324:INFO:Defining folds
2025-02-19 13:53:16,324:INFO:Declaring metric variables
2025-02-19 13:53:16,324:INFO:Importing untrained model
2025-02-19 13:53:16,324:INFO:Declaring custom model
2025-02-19 13:53:16,328:INFO:Random Forest Classifier Imported successfully
2025-02-19 13:53:16,329:INFO:Cross validation set to False
2025-02-19 13:53:16,329:INFO:Fitting Model
2025-02-19 13:53:19,839:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 13:53:19,842:INFO:create_model() successfully completed......................................
2025-02-19 13:53:20,038:INFO:_master_model_container: 4
2025-02-19 13:53:20,038:INFO:_display_container: 4
2025-02-19 13:53:20,065:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 13:53:20,065:INFO:finalize_model() successfully completed......................................
2025-02-19 13:53:20,260:INFO:Initializing predict_model()
2025-02-19 13:53:20,260:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f955d018ee0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f9555153c70>)
2025-02-19 13:53:20,260:INFO:Checking exceptions
2025-02-19 13:53:20,261:INFO:Preloading libraries
2025-02-19 13:53:20,261:INFO:Set up data.
2025-02-19 13:53:20,287:INFO:Set up index.
2025-02-19 13:53:20,918:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:20,924:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:20,929:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 13:53:21,839:INFO:Initializing save_model()
2025-02-19 13:53:21,839:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), model_name=outputs/experiment_20250219_135222/models/trained_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 13:53:21,839:INFO:Adding model into prep_pipe
2025-02-19 13:53:21,839:WARNING:Only Model saved as it was a pipeline.
2025-02-19 13:53:22,235:INFO:outputs/experiment_20250219_135222/models/trained_model.pkl saved in current working directory
2025-02-19 13:53:22,257:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 13:53:22,258:INFO:save_model() successfully completed......................................
2025-02-19 15:35:59,219:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:35:59,219:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:35:59,219:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:35:59,219:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:36:04,785:INFO:PyCaret ClassificationExperiment
2025-02-19 15:36:04,785:INFO:Logging name: clf-default-name
2025-02-19 15:36:04,785:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 15:36:04,785:INFO:version 3.3.2
2025-02-19 15:36:04,785:INFO:Initializing setup()
2025-02-19 15:36:04,785:INFO:self.USI: fbc4
2025-02-19 15:36:04,785:INFO:self._variable_keys: {'X', 'fold_shuffle_param', 'pipeline', 'y', 'html_param', 'logging_param', 'y_train', 'gpu_param', 'gpu_n_jobs_param', 'log_plots_param', '_ml_usecase', 'USI', 'seed', 'X_test', 'exp_id', 'n_jobs_param', 'target_param', 'fold_generator', 'data', 'X_train', 'y_test', '_available_plots', 'is_multiclass', 'memory', 'fold_groups_param', 'fix_imbalance', 'exp_name_log', 'idx'}
2025-02-19 15:36:04,785:INFO:Checking environment
2025-02-19 15:36:04,786:INFO:python_version: 3.10.12
2025-02-19 15:36:04,786:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 15:36:04,786:INFO:machine: x86_64
2025-02-19 15:36:04,787:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 15:36:04,788:INFO:Memory: svmem(total=7813279744, available=1692196864, percent=78.3, used=5067784192, free=177283072, active=3132051456, inactive=3540963328, buffers=134934528, cached=2433277952, shared=758636544, slab=338198528)
2025-02-19 15:36:04,789:INFO:Physical Core: 2
2025-02-19 15:36:04,789:INFO:Logical Core: 4
2025-02-19 15:36:04,789:INFO:Checking libraries
2025-02-19 15:36:04,789:INFO:System:
2025-02-19 15:36:04,789:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 15:36:04,789:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 15:36:04,789:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 15:36:04,790:INFO:PyCaret required dependencies:
2025-02-19 15:36:05,380:INFO:                 pip: 23.3.2
2025-02-19 15:36:05,380:INFO:          setuptools: 65.5.0
2025-02-19 15:36:05,380:INFO:             pycaret: 3.3.2
2025-02-19 15:36:05,380:INFO:             IPython: 8.20.0
2025-02-19 15:36:05,380:INFO:          ipywidgets: 8.1.1
2025-02-19 15:36:05,380:INFO:                tqdm: 4.66.1
2025-02-19 15:36:05,381:INFO:               numpy: 1.24.4
2025-02-19 15:36:05,381:INFO:              pandas: 1.5.3
2025-02-19 15:36:05,381:INFO:              jinja2: 3.1.3
2025-02-19 15:36:05,381:INFO:               scipy: 1.10.1
2025-02-19 15:36:05,381:INFO:              joblib: 1.3.2
2025-02-19 15:36:05,381:INFO:             sklearn: 1.2.2
2025-02-19 15:36:05,381:INFO:                pyod: 1.1.2
2025-02-19 15:36:05,381:INFO:            imblearn: 0.12.3
2025-02-19 15:36:05,381:INFO:   category_encoders: 2.6.3
2025-02-19 15:36:05,381:INFO:            lightgbm: 4.2.0
2025-02-19 15:36:05,381:INFO:               numba: 0.58.1
2025-02-19 15:36:05,381:INFO:            requests: 2.31.0
2025-02-19 15:36:05,382:INFO:          matplotlib: 3.6.0
2025-02-19 15:36:05,382:INFO:          scikitplot: 0.3.7
2025-02-19 15:36:05,382:INFO:         yellowbrick: 1.5
2025-02-19 15:36:05,382:INFO:              plotly: 5.18.0
2025-02-19 15:36:05,382:INFO:    plotly-resampler: Not installed
2025-02-19 15:36:05,382:INFO:             kaleido: 0.2.1
2025-02-19 15:36:05,382:INFO:           schemdraw: 0.15
2025-02-19 15:36:05,382:INFO:         statsmodels: 0.14.1
2025-02-19 15:36:05,382:INFO:              sktime: 0.21.1
2025-02-19 15:36:05,382:INFO:               tbats: 1.1.3
2025-02-19 15:36:05,382:INFO:            pmdarima: 2.0.4
2025-02-19 15:36:05,382:INFO:              psutil: 5.9.7
2025-02-19 15:36:05,382:INFO:          markupsafe: 2.1.3
2025-02-19 15:36:05,382:INFO:             pickle5: Not installed
2025-02-19 15:36:05,382:INFO:         cloudpickle: 2.2.1
2025-02-19 15:36:05,382:INFO:         deprecation: 2.1.0
2025-02-19 15:36:05,382:INFO:              xxhash: 3.4.1
2025-02-19 15:36:05,382:INFO:           wurlitzer: 3.0.3
2025-02-19 15:36:05,382:INFO:PyCaret optional dependencies:
2025-02-19 15:36:06,665:INFO:                shap: 0.44.0
2025-02-19 15:36:06,665:INFO:           interpret: 0.5.0
2025-02-19 15:36:06,666:INFO:                umap: 0.5.5
2025-02-19 15:36:06,666:INFO:     ydata_profiling: 4.6.0
2025-02-19 15:36:06,666:INFO:  explainerdashboard: 0.4.5
2025-02-19 15:36:06,666:INFO:             autoviz: 0.1.804
2025-02-19 15:36:06,666:INFO:           fairlearn: 0.7.0
2025-02-19 15:36:06,666:INFO:          deepchecks: Not installed
2025-02-19 15:36:06,666:INFO:             xgboost: 1.6.2
2025-02-19 15:36:06,666:INFO:            catboost: 1.2.2
2025-02-19 15:36:06,666:INFO:              kmodes: 0.12.2
2025-02-19 15:36:06,666:INFO:             mlxtend: 0.23.1
2025-02-19 15:36:06,666:INFO:       statsforecast: 1.5.0
2025-02-19 15:36:06,666:INFO:        tune_sklearn: 0.5.0
2025-02-19 15:36:06,666:INFO:                 ray: 2.9.0
2025-02-19 15:36:06,667:INFO:            hyperopt: 0.2.7
2025-02-19 15:36:06,667:INFO:              optuna: 3.5.0
2025-02-19 15:36:06,667:INFO:               skopt: 0.9.0
2025-02-19 15:36:06,667:INFO:              mlflow: 1.30.1
2025-02-19 15:36:06,667:INFO:              gradio: 3.50.2
2025-02-19 15:36:06,667:INFO:             fastapi: 0.109.0
2025-02-19 15:36:06,667:INFO:             uvicorn: 0.25.0
2025-02-19 15:36:06,667:INFO:              m2cgen: 0.10.0
2025-02-19 15:36:06,667:INFO:           evidently: 0.2.8
2025-02-19 15:36:06,667:INFO:               fugue: 0.8.6
2025-02-19 15:36:06,667:INFO:           streamlit: Not installed
2025-02-19 15:36:06,667:INFO:             prophet: Not installed
2025-02-19 15:36:06,667:INFO:None
2025-02-19 15:36:06,668:INFO:Set up data.
2025-02-19 15:36:06,690:INFO:Set up folding strategy.
2025-02-19 15:36:06,690:INFO:Set up train/test split.
2025-02-19 15:36:06,698:INFO:Set up index.
2025-02-19 15:36:06,698:INFO:Assigning column types.
2025-02-19 15:36:06,702:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 15:36:06,750:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 15:36:06,755:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:36:06,795:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:36:06,878:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:36:07,098:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 15:36:07,099:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:36:07,127:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:36:07,129:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:36:07,130:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 15:36:07,176:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:36:07,203:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:36:07,206:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:36:07,253:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:36:07,282:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:36:07,285:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:36:07,286:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 15:36:07,358:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:36:07,361:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:36:07,441:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:36:07,444:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:36:07,448:INFO:Preparing preprocessing pipeline...
2025-02-19 15:36:07,450:INFO:Set up label encoding.
2025-02-19 15:36:07,450:INFO:Set up simple imputation.
2025-02-19 15:36:07,478:INFO:Finished creating preprocessing pipeline.
2025-02-19 15:36:07,484:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 15:36:07,484:INFO:Creating final display dataframe.
2025-02-19 15:36:07,576:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    fbc4
2025-02-19 15:36:07,651:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:36:07,654:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:36:07,730:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:36:07,733:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:36:07,738:INFO:setup() successfully completed in 2.96s...............
2025-02-19 15:36:07,738:INFO:Initializing create_model()
2025-02-19 15:36:07,738:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f04b8b18e80>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 15:36:07,739:INFO:Checking exceptions
2025-02-19 15:36:07,740:INFO:Importing libraries
2025-02-19 15:36:07,740:INFO:Copying training dataset
2025-02-19 15:36:07,745:INFO:Defining folds
2025-02-19 15:36:07,745:INFO:Declaring metric variables
2025-02-19 15:36:07,745:INFO:Importing untrained model
2025-02-19 15:36:07,746:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:36:07,746:INFO:Starting cross validation
2025-02-19 15:36:07,747:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:36:14,546:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:14,566:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:14,576:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:14,687:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:14,704:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:14,712:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:14,743:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:14,766:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:14,775:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:15,343:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:15,350:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:15,357:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:15,875:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:15,889:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:15,896:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:16,165:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:16,171:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:16,178:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:16,218:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:16,224:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:16,237:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:16,926:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:16,942:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:16,961:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:17,028:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:17,034:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:17,041:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:17,160:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:17,169:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:17,181:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:17,187:INFO:Calculating mean and std
2025-02-19 15:36:17,189:INFO:Creating metrics dataframe
2025-02-19 15:36:17,193:INFO:Finalizing model
2025-02-19 15:36:17,644:INFO:Uploading results into container
2025-02-19 15:36:17,645:INFO:Uploading model into container now
2025-02-19 15:36:17,654:INFO:_master_model_container: 1
2025-02-19 15:36:17,654:INFO:_display_container: 2
2025-02-19 15:36:17,655:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:36:17,655:INFO:create_model() successfully completed......................................
2025-02-19 15:36:17,818:INFO:Initializing tune_model()
2025-02-19 15:36:17,818:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f04b8b18e80>)
2025-02-19 15:36:17,818:INFO:Checking exceptions
2025-02-19 15:36:17,826:INFO:Copying training dataset
2025-02-19 15:36:17,831:INFO:Checking base model
2025-02-19 15:36:17,831:INFO:Base model : Random Forest Classifier
2025-02-19 15:36:17,832:INFO:Declaring metric variables
2025-02-19 15:36:17,832:INFO:Defining Hyperparameters
2025-02-19 15:36:17,956:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 15:36:17,957:INFO:Tuning with n_jobs=-1
2025-02-19 15:36:17,957:INFO:Initializing RandomizedSearchCV
2025-02-19 15:36:17,966:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/model_selection/_search.py:318: UserWarning: The total space of parameters 1 is smaller than n_iter=10. Running 1 iterations. For exhaustive searches, use GridSearchCV.
  warnings.warn(

2025-02-19 15:36:19,340:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:19,346:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:19,370:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:19,424:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:20,709:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:20,719:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:20,767:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:20,803:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:21,492:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:21,515:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:21,527:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 15:36:21,527:INFO:Hyperparameter search completed
2025-02-19 15:36:21,528:INFO:SubProcess create_model() called ==================================
2025-02-19 15:36:21,529:INFO:Initializing create_model()
2025-02-19 15:36:21,529:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f04b8b18e80>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f04b8adb2e0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 15:36:21,529:INFO:Checking exceptions
2025-02-19 15:36:21,529:INFO:Importing libraries
2025-02-19 15:36:21,530:INFO:Copying training dataset
2025-02-19 15:36:21,537:INFO:Defining folds
2025-02-19 15:36:21,537:INFO:Declaring metric variables
2025-02-19 15:36:21,537:INFO:Importing untrained model
2025-02-19 15:36:21,538:INFO:Declaring custom model
2025-02-19 15:36:21,539:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:36:21,540:INFO:Starting cross validation
2025-02-19 15:36:21,542:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:36:22,919:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,925:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,925:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,928:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,932:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,933:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,935:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,940:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,945:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,964:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,972:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:22,979:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,346:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,348:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,359:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,370:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,374:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,380:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,387:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,388:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,395:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,396:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,403:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:24,411:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:25,130:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:25,136:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:25,141:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:25,205:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:25,216:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:25,229:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:25,239:INFO:Calculating mean and std
2025-02-19 15:36:25,241:INFO:Creating metrics dataframe
2025-02-19 15:36:25,247:INFO:Finalizing model
2025-02-19 15:36:25,789:INFO:Uploading results into container
2025-02-19 15:36:25,790:INFO:Uploading model into container now
2025-02-19 15:36:25,791:INFO:_master_model_container: 2
2025-02-19 15:36:25,791:INFO:_display_container: 3
2025-02-19 15:36:25,791:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:36:25,791:INFO:create_model() successfully completed......................................
2025-02-19 15:36:25,907:INFO:SubProcess create_model() end ==================================
2025-02-19 15:36:25,907:INFO:choose_better activated
2025-02-19 15:36:25,908:INFO:SubProcess create_model() called ==================================
2025-02-19 15:36:25,909:INFO:Initializing create_model()
2025-02-19 15:36:25,909:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f04b8b18e80>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:36:25,909:INFO:Checking exceptions
2025-02-19 15:36:25,911:INFO:Importing libraries
2025-02-19 15:36:25,911:INFO:Copying training dataset
2025-02-19 15:36:25,918:INFO:Defining folds
2025-02-19 15:36:25,918:INFO:Declaring metric variables
2025-02-19 15:36:25,919:INFO:Importing untrained model
2025-02-19 15:36:25,919:INFO:Declaring custom model
2025-02-19 15:36:25,920:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:36:25,921:INFO:Starting cross validation
2025-02-19 15:36:25,922:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:36:27,257:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,270:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,297:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,305:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,313:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,320:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,417:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,431:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,441:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,461:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,474:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:27,480:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:28,962:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:28,970:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:28,977:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:28,987:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:28,991:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:28,998:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:28,998:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,005:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,005:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,029:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,033:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,037:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,762:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,769:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,775:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,787:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,792:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,796:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:29,804:INFO:Calculating mean and std
2025-02-19 15:36:29,805:INFO:Creating metrics dataframe
2025-02-19 15:36:29,807:INFO:Finalizing model
2025-02-19 15:36:30,340:INFO:Uploading results into container
2025-02-19 15:36:30,342:INFO:Uploading model into container now
2025-02-19 15:36:30,343:INFO:_master_model_container: 3
2025-02-19 15:36:30,343:INFO:_display_container: 4
2025-02-19 15:36:30,345:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:36:30,345:INFO:create_model() successfully completed......................................
2025-02-19 15:36:30,472:INFO:SubProcess create_model() end ==================================
2025-02-19 15:36:30,474:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 15:36:30,475:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 15:36:30,476:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 15:36:30,476:INFO:choose_better completed
2025-02-19 15:36:30,476:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 15:36:30,488:INFO:_master_model_container: 3
2025-02-19 15:36:30,488:INFO:_display_container: 3
2025-02-19 15:36:30,489:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:36:30,489:INFO:tune_model() successfully completed......................................
2025-02-19 15:36:30,616:INFO:Initializing calibrate_model()
2025-02-19 15:36:30,616:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f04b8b18e80>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 15:36:30,616:INFO:Checking exceptions
2025-02-19 15:36:30,619:INFO:Preloading libraries
2025-02-19 15:36:30,620:INFO:Preparing display monitor
2025-02-19 15:36:30,622:INFO:Getting model name
2025-02-19 15:36:30,622:INFO:Base model : Random Forest Classifier
2025-02-19 15:36:30,622:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 15:36:30,623:INFO:SubProcess create_model() called ==================================
2025-02-19 15:36:30,625:INFO:Initializing create_model()
2025-02-19 15:36:30,625:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f04b8b18e80>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f04b3b0d690>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:36:30,625:INFO:Checking exceptions
2025-02-19 15:36:30,625:INFO:Importing libraries
2025-02-19 15:36:30,625:INFO:Copying training dataset
2025-02-19 15:36:30,633:INFO:Defining folds
2025-02-19 15:36:30,633:INFO:Declaring metric variables
2025-02-19 15:36:30,633:INFO:Importing untrained model
2025-02-19 15:36:30,633:INFO:Declaring custom model
2025-02-19 15:36:30,635:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:36:30,636:INFO:Starting cross validation
2025-02-19 15:36:30,637:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:36:36,525:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,534:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,537:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,543:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,544:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,545:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,552:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,555:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,565:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,594:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,601:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:36,610:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,289:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,299:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,307:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,316:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,324:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,332:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,367:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,375:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,382:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,483:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,490:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:42,502:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:45,936:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:45,944:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:45,951:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:45,996:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:46,000:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:46,004:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:46,010:INFO:Calculating mean and std
2025-02-19 15:36:46,011:INFO:Creating metrics dataframe
2025-02-19 15:36:46,014:INFO:Finalizing model
2025-02-19 15:36:48,410:INFO:Uploading results into container
2025-02-19 15:36:48,411:INFO:Uploading model into container now
2025-02-19 15:36:48,411:INFO:_master_model_container: 4
2025-02-19 15:36:48,411:INFO:_display_container: 4
2025-02-19 15:36:48,413:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:36:48,413:INFO:create_model() successfully completed......................................
2025-02-19 15:36:48,527:INFO:SubProcess create_model() end ==================================
2025-02-19 15:36:48,542:INFO:_master_model_container: 4
2025-02-19 15:36:48,542:INFO:_display_container: 4
2025-02-19 15:36:48,544:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:36:48,544:INFO:calibrate_model() successfully completed......................................
2025-02-19 15:36:48,670:INFO:Initializing finalize_model()
2025-02-19 15:36:48,670:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f04b8b18e80>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 15:36:48,672:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:36:48,680:INFO:Initializing create_model()
2025-02-19 15:36:48,680:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f04b8b18e80>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:36:48,680:INFO:Checking exceptions
2025-02-19 15:36:48,682:INFO:Importing libraries
2025-02-19 15:36:48,682:INFO:Copying training dataset
2025-02-19 15:36:48,682:INFO:Defining folds
2025-02-19 15:36:48,682:INFO:Declaring metric variables
2025-02-19 15:36:48,682:INFO:Importing untrained model
2025-02-19 15:36:48,682:INFO:Declaring custom model
2025-02-19 15:36:48,684:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:36:48,685:INFO:Cross validation set to False
2025-02-19 15:36:48,685:INFO:Fitting Model
2025-02-19 15:36:51,319:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:36:51,319:INFO:create_model() successfully completed......................................
2025-02-19 15:36:51,433:INFO:_master_model_container: 4
2025-02-19 15:36:51,433:INFO:_display_container: 4
2025-02-19 15:36:51,448:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:36:51,448:INFO:finalize_model() successfully completed......................................
2025-02-19 15:36:51,586:INFO:Initializing predict_model()
2025-02-19 15:36:51,586:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f04b8b18e80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f04b070dcf0>)
2025-02-19 15:36:51,587:INFO:Checking exceptions
2025-02-19 15:36:51,587:INFO:Preloading libraries
2025-02-19 15:36:51,587:INFO:Set up data.
2025-02-19 15:36:51,610:INFO:Set up index.
2025-02-19 15:36:52,075:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:52,083:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:52,089:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:36:52,956:INFO:Initializing save_model()
2025-02-19 15:36:52,957:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), model_name=outputs/experiment_20250219_153600/models/trained_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 15:36:52,957:INFO:Adding model into prep_pipe
2025-02-19 15:36:52,957:WARNING:Only Model saved as it was a pipeline.
2025-02-19 15:36:53,313:INFO:outputs/experiment_20250219_153600/models/trained_model.pkl saved in current working directory
2025-02-19 15:36:53,321:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:36:53,321:INFO:save_model() successfully completed......................................
2025-02-19 15:43:33,865:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:43:33,865:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:43:33,865:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:43:33,865:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:43:39,294:INFO:PyCaret ClassificationExperiment
2025-02-19 15:43:39,294:INFO:Logging name: clf-default-name
2025-02-19 15:43:39,294:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 15:43:39,294:INFO:version 3.3.2
2025-02-19 15:43:39,295:INFO:Initializing setup()
2025-02-19 15:43:39,295:INFO:self.USI: 0060
2025-02-19 15:43:39,295:INFO:self._variable_keys: {'_available_plots', 'idx', 'memory', 'target_param', 'gpu_param', '_ml_usecase', 'fix_imbalance', 'is_multiclass', 'exp_name_log', 'pipeline', 'y', 'fold_groups_param', 'n_jobs_param', 'USI', 'X_test', 'gpu_n_jobs_param', 'seed', 'logging_param', 'data', 'y_train', 'fold_generator', 'html_param', 'log_plots_param', 'y_test', 'fold_shuffle_param', 'X', 'X_train', 'exp_id'}
2025-02-19 15:43:39,295:INFO:Checking environment
2025-02-19 15:43:39,295:INFO:python_version: 3.10.12
2025-02-19 15:43:39,295:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 15:43:39,295:INFO:machine: x86_64
2025-02-19 15:43:39,296:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 15:43:39,296:INFO:Memory: svmem(total=7813279744, available=1776607232, percent=77.3, used=4964364288, free=603758592, active=3356119040, inactive=2931064832, buffers=110731264, cached=2134425600, shared=779333632, slab=334688256)
2025-02-19 15:43:39,297:INFO:Physical Core: 2
2025-02-19 15:43:39,297:INFO:Logical Core: 4
2025-02-19 15:43:39,297:INFO:Checking libraries
2025-02-19 15:43:39,297:INFO:System:
2025-02-19 15:43:39,297:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 15:43:39,297:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 15:43:39,297:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 15:43:39,297:INFO:PyCaret required dependencies:
2025-02-19 15:43:39,799:INFO:                 pip: 23.3.2
2025-02-19 15:43:39,799:INFO:          setuptools: 65.5.0
2025-02-19 15:43:39,799:INFO:             pycaret: 3.3.2
2025-02-19 15:43:39,799:INFO:             IPython: 8.20.0
2025-02-19 15:43:39,799:INFO:          ipywidgets: 8.1.1
2025-02-19 15:43:39,799:INFO:                tqdm: 4.66.1
2025-02-19 15:43:39,799:INFO:               numpy: 1.24.4
2025-02-19 15:43:39,799:INFO:              pandas: 1.5.3
2025-02-19 15:43:39,799:INFO:              jinja2: 3.1.3
2025-02-19 15:43:39,799:INFO:               scipy: 1.10.1
2025-02-19 15:43:39,799:INFO:              joblib: 1.3.2
2025-02-19 15:43:39,799:INFO:             sklearn: 1.2.2
2025-02-19 15:43:39,800:INFO:                pyod: 1.1.2
2025-02-19 15:43:39,800:INFO:            imblearn: 0.12.3
2025-02-19 15:43:39,800:INFO:   category_encoders: 2.6.3
2025-02-19 15:43:39,800:INFO:            lightgbm: 4.2.0
2025-02-19 15:43:39,800:INFO:               numba: 0.58.1
2025-02-19 15:43:39,800:INFO:            requests: 2.31.0
2025-02-19 15:43:39,800:INFO:          matplotlib: 3.6.0
2025-02-19 15:43:39,800:INFO:          scikitplot: 0.3.7
2025-02-19 15:43:39,800:INFO:         yellowbrick: 1.5
2025-02-19 15:43:39,800:INFO:              plotly: 5.18.0
2025-02-19 15:43:39,800:INFO:    plotly-resampler: Not installed
2025-02-19 15:43:39,801:INFO:             kaleido: 0.2.1
2025-02-19 15:43:39,801:INFO:           schemdraw: 0.15
2025-02-19 15:43:39,801:INFO:         statsmodels: 0.14.1
2025-02-19 15:43:39,801:INFO:              sktime: 0.21.1
2025-02-19 15:43:39,801:INFO:               tbats: 1.1.3
2025-02-19 15:43:39,801:INFO:            pmdarima: 2.0.4
2025-02-19 15:43:39,801:INFO:              psutil: 5.9.7
2025-02-19 15:43:39,801:INFO:          markupsafe: 2.1.3
2025-02-19 15:43:39,801:INFO:             pickle5: Not installed
2025-02-19 15:43:39,801:INFO:         cloudpickle: 2.2.1
2025-02-19 15:43:39,801:INFO:         deprecation: 2.1.0
2025-02-19 15:43:39,801:INFO:              xxhash: 3.4.1
2025-02-19 15:43:39,802:INFO:           wurlitzer: 3.0.3
2025-02-19 15:43:39,802:INFO:PyCaret optional dependencies:
2025-02-19 15:43:40,980:INFO:                shap: 0.44.0
2025-02-19 15:43:40,980:INFO:           interpret: 0.5.0
2025-02-19 15:43:40,980:INFO:                umap: 0.5.5
2025-02-19 15:43:40,980:INFO:     ydata_profiling: 4.6.0
2025-02-19 15:43:40,980:INFO:  explainerdashboard: 0.4.5
2025-02-19 15:43:40,980:INFO:             autoviz: 0.1.804
2025-02-19 15:43:40,980:INFO:           fairlearn: 0.7.0
2025-02-19 15:43:40,981:INFO:          deepchecks: Not installed
2025-02-19 15:43:40,981:INFO:             xgboost: 1.6.2
2025-02-19 15:43:40,981:INFO:            catboost: 1.2.2
2025-02-19 15:43:40,981:INFO:              kmodes: 0.12.2
2025-02-19 15:43:40,981:INFO:             mlxtend: 0.23.1
2025-02-19 15:43:40,981:INFO:       statsforecast: 1.5.0
2025-02-19 15:43:40,981:INFO:        tune_sklearn: 0.5.0
2025-02-19 15:43:40,981:INFO:                 ray: 2.9.0
2025-02-19 15:43:40,981:INFO:            hyperopt: 0.2.7
2025-02-19 15:43:40,981:INFO:              optuna: 3.5.0
2025-02-19 15:43:40,981:INFO:               skopt: 0.9.0
2025-02-19 15:43:40,981:INFO:              mlflow: 1.30.1
2025-02-19 15:43:40,982:INFO:              gradio: 3.50.2
2025-02-19 15:43:40,982:INFO:             fastapi: 0.109.0
2025-02-19 15:43:40,982:INFO:             uvicorn: 0.25.0
2025-02-19 15:43:40,982:INFO:              m2cgen: 0.10.0
2025-02-19 15:43:40,982:INFO:           evidently: 0.2.8
2025-02-19 15:43:40,982:INFO:               fugue: 0.8.6
2025-02-19 15:43:40,982:INFO:           streamlit: Not installed
2025-02-19 15:43:40,982:INFO:             prophet: Not installed
2025-02-19 15:43:40,982:INFO:None
2025-02-19 15:43:40,982:INFO:Set up data.
2025-02-19 15:43:41,002:INFO:Set up folding strategy.
2025-02-19 15:43:41,002:INFO:Set up train/test split.
2025-02-19 15:43:41,008:INFO:Set up index.
2025-02-19 15:43:41,009:INFO:Assigning column types.
2025-02-19 15:43:41,012:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 15:43:41,058:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 15:43:41,061:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:43:41,094:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:43:41,115:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:43:41,192:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 15:43:41,193:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:43:41,224:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:43:41,227:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:43:41,227:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 15:43:41,273:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:43:41,309:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:43:41,315:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:43:41,364:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:43:41,395:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:43:41,398:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:43:41,398:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 15:43:41,472:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:43:41,475:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:43:41,549:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:43:41,552:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:43:41,554:INFO:Preparing preprocessing pipeline...
2025-02-19 15:43:41,556:INFO:Set up label encoding.
2025-02-19 15:43:41,556:INFO:Set up simple imputation.
2025-02-19 15:43:41,584:INFO:Finished creating preprocessing pipeline.
2025-02-19 15:43:41,593:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 15:43:41,593:INFO:Creating final display dataframe.
2025-02-19 15:43:41,687:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    0060
2025-02-19 15:43:41,771:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:43:41,776:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:43:41,851:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:43:41,853:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:43:41,858:INFO:setup() successfully completed in 2.56s...............
2025-02-19 15:43:41,858:INFO:Initializing create_model()
2025-02-19 15:43:41,858:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f63caddcee0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 15:43:41,858:INFO:Checking exceptions
2025-02-19 15:43:41,860:INFO:Importing libraries
2025-02-19 15:43:41,860:INFO:Copying training dataset
2025-02-19 15:43:41,864:INFO:Defining folds
2025-02-19 15:43:41,864:INFO:Declaring metric variables
2025-02-19 15:43:41,864:INFO:Importing untrained model
2025-02-19 15:43:41,865:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:43:41,865:INFO:Starting cross validation
2025-02-19 15:43:41,866:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:43:48,426:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:48,444:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:48,462:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:48,476:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:48,495:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:48,502:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:48,597:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:48,605:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:48,613:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:49,068:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:49,092:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:49,130:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:49,873:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:49,895:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:49,899:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:49,901:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:49,905:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:49,908:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,057:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,070:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,088:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,713:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,730:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,740:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,908:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,913:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,917:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,970:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,974:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,978:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:50,984:INFO:Calculating mean and std
2025-02-19 15:43:50,985:INFO:Creating metrics dataframe
2025-02-19 15:43:50,988:INFO:Finalizing model
2025-02-19 15:43:51,482:INFO:Uploading results into container
2025-02-19 15:43:51,484:INFO:Uploading model into container now
2025-02-19 15:43:51,507:INFO:_master_model_container: 1
2025-02-19 15:43:51,508:INFO:_display_container: 2
2025-02-19 15:43:51,509:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:43:51,510:INFO:create_model() successfully completed......................................
2025-02-19 15:43:51,684:INFO:Initializing tune_model()
2025-02-19 15:43:51,684:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f63caddcee0>)
2025-02-19 15:43:51,684:INFO:Checking exceptions
2025-02-19 15:43:51,691:INFO:Copying training dataset
2025-02-19 15:43:51,695:INFO:Checking base model
2025-02-19 15:43:51,695:INFO:Base model : Random Forest Classifier
2025-02-19 15:43:51,696:INFO:Declaring metric variables
2025-02-19 15:43:51,697:INFO:Defining Hyperparameters
2025-02-19 15:43:51,825:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 15:43:51,826:INFO:Tuning with n_jobs=-1
2025-02-19 15:43:51,826:INFO:Initializing RandomizedSearchCV
2025-02-19 15:43:51,834:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/model_selection/_search.py:318: UserWarning: The total space of parameters 1 is smaller than n_iter=10. Running 1 iterations. For exhaustive searches, use GridSearchCV.
  warnings.warn(

2025-02-19 15:43:53,168:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:53,210:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:53,234:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:53,254:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:54,513:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:54,558:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:54,607:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:54,628:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:55,276:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:55,346:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:55,350:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 15:43:55,351:INFO:Hyperparameter search completed
2025-02-19 15:43:55,351:INFO:SubProcess create_model() called ==================================
2025-02-19 15:43:55,351:INFO:Initializing create_model()
2025-02-19 15:43:55,351:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f63caddcee0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f63bd5aea70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 15:43:55,351:INFO:Checking exceptions
2025-02-19 15:43:55,352:INFO:Importing libraries
2025-02-19 15:43:55,352:INFO:Copying training dataset
2025-02-19 15:43:55,356:INFO:Defining folds
2025-02-19 15:43:55,357:INFO:Declaring metric variables
2025-02-19 15:43:55,357:INFO:Importing untrained model
2025-02-19 15:43:55,357:INFO:Declaring custom model
2025-02-19 15:43:55,358:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:43:55,358:INFO:Starting cross validation
2025-02-19 15:43:55,359:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:43:56,726:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,735:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,738:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,742:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,745:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,753:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,755:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,764:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,774:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,777:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,785:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:56,792:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,125:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,139:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,145:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,151:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,157:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,157:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,273:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,281:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,291:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,301:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,307:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,314:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:58,997:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:59,005:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:59,013:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:59,029:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:59,033:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:59,037:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:43:59,041:INFO:Calculating mean and std
2025-02-19 15:43:59,042:INFO:Creating metrics dataframe
2025-02-19 15:43:59,044:INFO:Finalizing model
2025-02-19 15:43:59,541:INFO:Uploading results into container
2025-02-19 15:43:59,542:INFO:Uploading model into container now
2025-02-19 15:43:59,542:INFO:_master_model_container: 2
2025-02-19 15:43:59,542:INFO:_display_container: 3
2025-02-19 15:43:59,543:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:43:59,543:INFO:create_model() successfully completed......................................
2025-02-19 15:43:59,659:INFO:SubProcess create_model() end ==================================
2025-02-19 15:43:59,660:INFO:choose_better activated
2025-02-19 15:43:59,660:INFO:SubProcess create_model() called ==================================
2025-02-19 15:43:59,661:INFO:Initializing create_model()
2025-02-19 15:43:59,661:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f63caddcee0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:43:59,662:INFO:Checking exceptions
2025-02-19 15:43:59,663:INFO:Importing libraries
2025-02-19 15:43:59,663:INFO:Copying training dataset
2025-02-19 15:43:59,671:INFO:Defining folds
2025-02-19 15:43:59,672:INFO:Declaring metric variables
2025-02-19 15:43:59,672:INFO:Importing untrained model
2025-02-19 15:43:59,672:INFO:Declaring custom model
2025-02-19 15:43:59,673:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:43:59,674:INFO:Starting cross validation
2025-02-19 15:43:59,675:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:44:00,941:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:00,953:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:00,959:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:01,067:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:01,071:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:01,073:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:01,079:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:01,089:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:01,095:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:01,128:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:01,143:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:01,153:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,235:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,243:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,249:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,456:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,462:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,469:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,483:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,489:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,492:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,499:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,505:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:02,507:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:03,112:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:03,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:03,128:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:03,244:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:03,256:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:03,267:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:03,281:INFO:Calculating mean and std
2025-02-19 15:44:03,282:INFO:Creating metrics dataframe
2025-02-19 15:44:03,287:INFO:Finalizing model
2025-02-19 15:44:03,820:INFO:Uploading results into container
2025-02-19 15:44:03,821:INFO:Uploading model into container now
2025-02-19 15:44:03,822:INFO:_master_model_container: 3
2025-02-19 15:44:03,822:INFO:_display_container: 4
2025-02-19 15:44:03,823:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:44:03,823:INFO:create_model() successfully completed......................................
2025-02-19 15:44:03,939:INFO:SubProcess create_model() end ==================================
2025-02-19 15:44:03,940:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 15:44:03,941:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 15:44:03,942:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 15:44:03,942:INFO:choose_better completed
2025-02-19 15:44:03,942:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 15:44:03,955:INFO:_master_model_container: 3
2025-02-19 15:44:03,955:INFO:_display_container: 3
2025-02-19 15:44:03,956:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:44:03,956:INFO:tune_model() successfully completed......................................
2025-02-19 15:44:04,080:INFO:Initializing calibrate_model()
2025-02-19 15:44:04,081:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f63caddcee0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 15:44:04,081:INFO:Checking exceptions
2025-02-19 15:44:04,084:INFO:Preloading libraries
2025-02-19 15:44:04,084:INFO:Preparing display monitor
2025-02-19 15:44:04,086:INFO:Getting model name
2025-02-19 15:44:04,086:INFO:Base model : Random Forest Classifier
2025-02-19 15:44:04,087:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 15:44:04,087:INFO:SubProcess create_model() called ==================================
2025-02-19 15:44:04,089:INFO:Initializing create_model()
2025-02-19 15:44:04,090:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f63caddcee0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f63cad9eb00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:44:04,090:INFO:Checking exceptions
2025-02-19 15:44:04,090:INFO:Importing libraries
2025-02-19 15:44:04,090:INFO:Copying training dataset
2025-02-19 15:44:04,098:INFO:Defining folds
2025-02-19 15:44:04,098:INFO:Declaring metric variables
2025-02-19 15:44:04,098:INFO:Importing untrained model
2025-02-19 15:44:04,098:INFO:Declaring custom model
2025-02-19 15:44:04,099:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:44:04,100:INFO:Starting cross validation
2025-02-19 15:44:04,101:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:44:09,999:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,014:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,021:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,034:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,054:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,061:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,077:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,083:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,085:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,090:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,092:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:10,097:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:15,759:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:15,768:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:15,777:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:15,871:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:15,879:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:15,887:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:16,035:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:16,067:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:16,082:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:16,088:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:16,097:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:16,104:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:19,547:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:19,554:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:19,557:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:19,558:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:19,561:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:19,565:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:19,575:INFO:Calculating mean and std
2025-02-19 15:44:19,576:INFO:Creating metrics dataframe
2025-02-19 15:44:19,578:INFO:Finalizing model
2025-02-19 15:44:22,108:INFO:Uploading results into container
2025-02-19 15:44:22,110:INFO:Uploading model into container now
2025-02-19 15:44:22,113:INFO:_master_model_container: 4
2025-02-19 15:44:22,113:INFO:_display_container: 4
2025-02-19 15:44:22,116:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:44:22,117:INFO:create_model() successfully completed......................................
2025-02-19 15:44:22,244:INFO:SubProcess create_model() end ==================================
2025-02-19 15:44:22,259:INFO:_master_model_container: 4
2025-02-19 15:44:22,259:INFO:_display_container: 4
2025-02-19 15:44:22,261:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:44:22,261:INFO:calibrate_model() successfully completed......................................
2025-02-19 15:44:22,387:INFO:Initializing finalize_model()
2025-02-19 15:44:22,387:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f63caddcee0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 15:44:22,389:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:44:22,395:INFO:Initializing create_model()
2025-02-19 15:44:22,395:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f63caddcee0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:44:22,395:INFO:Checking exceptions
2025-02-19 15:44:22,397:INFO:Importing libraries
2025-02-19 15:44:22,397:INFO:Copying training dataset
2025-02-19 15:44:22,398:INFO:Defining folds
2025-02-19 15:44:22,398:INFO:Declaring metric variables
2025-02-19 15:44:22,398:INFO:Importing untrained model
2025-02-19 15:44:22,398:INFO:Declaring custom model
2025-02-19 15:44:22,399:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:44:22,401:INFO:Cross validation set to False
2025-02-19 15:44:22,401:INFO:Fitting Model
2025-02-19 15:44:25,242:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:44:25,242:INFO:create_model() successfully completed......................................
2025-02-19 15:44:25,362:INFO:_master_model_container: 4
2025-02-19 15:44:25,362:INFO:_display_container: 4
2025-02-19 15:44:25,377:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:44:25,377:INFO:finalize_model() successfully completed......................................
2025-02-19 15:44:25,519:INFO:Initializing predict_model()
2025-02-19 15:44:25,520:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f63caddcee0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f63c9ba65f0>)
2025-02-19 15:44:25,520:INFO:Checking exceptions
2025-02-19 15:44:25,520:INFO:Preloading libraries
2025-02-19 15:44:25,520:INFO:Set up data.
2025-02-19 15:44:25,543:INFO:Set up index.
2025-02-19 15:44:26,030:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:26,039:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:26,044:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:44:26,854:INFO:Initializing save_model()
2025-02-19 15:44:26,854:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), model_name=outputs/experiment_20250219_154334/models/trained_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 15:44:26,854:INFO:Adding model into prep_pipe
2025-02-19 15:44:26,855:WARNING:Only Model saved as it was a pipeline.
2025-02-19 15:44:27,109:INFO:outputs/experiment_20250219_154334/models/trained_model.pkl saved in current working directory
2025-02-19 15:44:27,117:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:44:27,117:INFO:save_model() successfully completed......................................
2025-02-19 15:45:44,517:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:45:44,517:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:45:44,518:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:45:44,518:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:45:50,857:INFO:PyCaret ClassificationExperiment
2025-02-19 15:45:50,857:INFO:Logging name: clf-default-name
2025-02-19 15:45:50,857:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 15:45:50,857:INFO:version 3.3.2
2025-02-19 15:45:50,857:INFO:Initializing setup()
2025-02-19 15:45:50,857:INFO:self.USI: 3414
2025-02-19 15:45:50,857:INFO:self._variable_keys: {'exp_name_log', '_ml_usecase', 'X_test', 'X', 'exp_id', 'seed', 'gpu_n_jobs_param', 'target_param', 'y', '_available_plots', 'fold_shuffle_param', 'logging_param', 'data', 'html_param', 'gpu_param', 'fold_generator', 'is_multiclass', 'USI', 'y_test', 'fix_imbalance', 'idx', 'memory', 'X_train', 'n_jobs_param', 'y_train', 'pipeline', 'log_plots_param', 'fold_groups_param'}
2025-02-19 15:45:50,858:INFO:Checking environment
2025-02-19 15:45:50,858:INFO:python_version: 3.10.12
2025-02-19 15:45:50,858:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 15:45:50,858:INFO:machine: x86_64
2025-02-19 15:45:50,859:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 15:45:50,859:INFO:Memory: svmem(total=7813279744, available=1760755712, percent=77.5, used=5012578304, free=815202304, active=3309936640, inactive=3026538496, buffers=100392960, cached=1885106176, shared=747192320, slab=334434304)
2025-02-19 15:45:50,860:INFO:Physical Core: 2
2025-02-19 15:45:50,860:INFO:Logical Core: 4
2025-02-19 15:45:50,860:INFO:Checking libraries
2025-02-19 15:45:50,860:INFO:System:
2025-02-19 15:45:50,860:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 15:45:50,861:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 15:45:50,861:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 15:45:50,861:INFO:PyCaret required dependencies:
2025-02-19 15:45:51,462:INFO:                 pip: 23.3.2
2025-02-19 15:45:51,462:INFO:          setuptools: 65.5.0
2025-02-19 15:45:51,463:INFO:             pycaret: 3.3.2
2025-02-19 15:45:51,463:INFO:             IPython: 8.20.0
2025-02-19 15:45:51,463:INFO:          ipywidgets: 8.1.1
2025-02-19 15:45:51,463:INFO:                tqdm: 4.66.1
2025-02-19 15:45:51,463:INFO:               numpy: 1.24.4
2025-02-19 15:45:51,463:INFO:              pandas: 1.5.3
2025-02-19 15:45:51,463:INFO:              jinja2: 3.1.3
2025-02-19 15:45:51,463:INFO:               scipy: 1.10.1
2025-02-19 15:45:51,463:INFO:              joblib: 1.3.2
2025-02-19 15:45:51,463:INFO:             sklearn: 1.2.2
2025-02-19 15:45:51,463:INFO:                pyod: 1.1.2
2025-02-19 15:45:51,463:INFO:            imblearn: 0.12.3
2025-02-19 15:45:51,463:INFO:   category_encoders: 2.6.3
2025-02-19 15:45:51,463:INFO:            lightgbm: 4.2.0
2025-02-19 15:45:51,463:INFO:               numba: 0.58.1
2025-02-19 15:45:51,463:INFO:            requests: 2.31.0
2025-02-19 15:45:51,463:INFO:          matplotlib: 3.6.0
2025-02-19 15:45:51,463:INFO:          scikitplot: 0.3.7
2025-02-19 15:45:51,463:INFO:         yellowbrick: 1.5
2025-02-19 15:45:51,463:INFO:              plotly: 5.18.0
2025-02-19 15:45:51,463:INFO:    plotly-resampler: Not installed
2025-02-19 15:45:51,463:INFO:             kaleido: 0.2.1
2025-02-19 15:45:51,463:INFO:           schemdraw: 0.15
2025-02-19 15:45:51,463:INFO:         statsmodels: 0.14.1
2025-02-19 15:45:51,463:INFO:              sktime: 0.21.1
2025-02-19 15:45:51,463:INFO:               tbats: 1.1.3
2025-02-19 15:45:51,463:INFO:            pmdarima: 2.0.4
2025-02-19 15:45:51,464:INFO:              psutil: 5.9.7
2025-02-19 15:45:51,464:INFO:          markupsafe: 2.1.3
2025-02-19 15:45:51,464:INFO:             pickle5: Not installed
2025-02-19 15:45:51,464:INFO:         cloudpickle: 2.2.1
2025-02-19 15:45:51,464:INFO:         deprecation: 2.1.0
2025-02-19 15:45:51,464:INFO:              xxhash: 3.4.1
2025-02-19 15:45:51,464:INFO:           wurlitzer: 3.0.3
2025-02-19 15:45:51,464:INFO:PyCaret optional dependencies:
2025-02-19 15:45:53,018:INFO:                shap: 0.44.0
2025-02-19 15:45:53,018:INFO:           interpret: 0.5.0
2025-02-19 15:45:53,018:INFO:                umap: 0.5.5
2025-02-19 15:45:53,019:INFO:     ydata_profiling: 4.6.0
2025-02-19 15:45:53,019:INFO:  explainerdashboard: 0.4.5
2025-02-19 15:45:53,019:INFO:             autoviz: 0.1.804
2025-02-19 15:45:53,019:INFO:           fairlearn: 0.7.0
2025-02-19 15:45:53,019:INFO:          deepchecks: Not installed
2025-02-19 15:45:53,019:INFO:             xgboost: 1.6.2
2025-02-19 15:45:53,019:INFO:            catboost: 1.2.2
2025-02-19 15:45:53,019:INFO:              kmodes: 0.12.2
2025-02-19 15:45:53,019:INFO:             mlxtend: 0.23.1
2025-02-19 15:45:53,019:INFO:       statsforecast: 1.5.0
2025-02-19 15:45:53,019:INFO:        tune_sklearn: 0.5.0
2025-02-19 15:45:53,019:INFO:                 ray: 2.9.0
2025-02-19 15:45:53,019:INFO:            hyperopt: 0.2.7
2025-02-19 15:45:53,019:INFO:              optuna: 3.5.0
2025-02-19 15:45:53,019:INFO:               skopt: 0.9.0
2025-02-19 15:45:53,019:INFO:              mlflow: 1.30.1
2025-02-19 15:45:53,019:INFO:              gradio: 3.50.2
2025-02-19 15:45:53,019:INFO:             fastapi: 0.109.0
2025-02-19 15:45:53,019:INFO:             uvicorn: 0.25.0
2025-02-19 15:45:53,019:INFO:              m2cgen: 0.10.0
2025-02-19 15:45:53,019:INFO:           evidently: 0.2.8
2025-02-19 15:45:53,020:INFO:               fugue: 0.8.6
2025-02-19 15:45:53,020:INFO:           streamlit: Not installed
2025-02-19 15:45:53,020:INFO:             prophet: Not installed
2025-02-19 15:45:53,020:INFO:None
2025-02-19 15:45:53,020:INFO:Set up data.
2025-02-19 15:45:53,052:INFO:Set up folding strategy.
2025-02-19 15:45:53,052:INFO:Set up train/test split.
2025-02-19 15:45:53,062:INFO:Set up index.
2025-02-19 15:45:53,063:INFO:Assigning column types.
2025-02-19 15:45:53,068:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 15:45:53,135:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 15:45:53,140:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:45:53,178:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:45:53,202:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:45:53,274:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 15:45:53,275:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:45:53,305:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:45:53,309:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:45:53,309:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 15:45:53,363:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:45:53,422:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:45:53,430:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:45:53,522:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:45:53,578:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:45:53,583:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:45:53,585:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 15:45:53,690:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:45:53,693:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:45:53,777:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:45:53,780:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:45:53,784:INFO:Preparing preprocessing pipeline...
2025-02-19 15:45:53,785:INFO:Set up label encoding.
2025-02-19 15:45:53,785:INFO:Set up simple imputation.
2025-02-19 15:45:53,814:INFO:Finished creating preprocessing pipeline.
2025-02-19 15:45:53,820:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 15:45:53,820:INFO:Creating final display dataframe.
2025-02-19 15:45:53,913:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    3414
2025-02-19 15:45:54,005:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:45:54,015:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:45:54,115:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:45:54,118:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:45:54,120:INFO:setup() successfully completed in 3.26s...............
2025-02-19 15:45:54,121:INFO:Initializing create_model()
2025-02-19 15:45:54,121:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f2bd4b48ee0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 15:45:54,121:INFO:Checking exceptions
2025-02-19 15:45:54,125:INFO:Importing libraries
2025-02-19 15:45:54,125:INFO:Copying training dataset
2025-02-19 15:45:54,133:INFO:Defining folds
2025-02-19 15:45:54,133:INFO:Declaring metric variables
2025-02-19 15:45:54,133:INFO:Importing untrained model
2025-02-19 15:45:54,134:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:45:54,134:INFO:Starting cross validation
2025-02-19 15:45:54,135:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:46:00,952:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:00,964:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:00,971:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:01,004:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:01,011:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:01,021:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:01,063:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:01,072:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:01,079:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:01,516:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:01,523:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:01,529:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,486:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,493:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,507:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,508:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,515:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,521:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,538:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,545:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,551:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:02,992:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:03,001:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:03,007:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:03,407:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:03,413:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:03,419:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:03,524:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:03,532:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:03,540:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:03,555:INFO:Calculating mean and std
2025-02-19 15:46:03,557:INFO:Creating metrics dataframe
2025-02-19 15:46:03,564:INFO:Finalizing model
2025-02-19 15:46:04,050:INFO:Uploading results into container
2025-02-19 15:46:04,051:INFO:Uploading model into container now
2025-02-19 15:46:04,062:INFO:_master_model_container: 1
2025-02-19 15:46:04,062:INFO:_display_container: 2
2025-02-19 15:46:04,063:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:46:04,063:INFO:create_model() successfully completed......................................
2025-02-19 15:46:04,222:INFO:Initializing tune_model()
2025-02-19 15:46:04,222:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f2bd4b48ee0>)
2025-02-19 15:46:04,222:INFO:Checking exceptions
2025-02-19 15:46:04,229:INFO:Copying training dataset
2025-02-19 15:46:04,234:INFO:Checking base model
2025-02-19 15:46:04,234:INFO:Base model : Random Forest Classifier
2025-02-19 15:46:04,235:INFO:Declaring metric variables
2025-02-19 15:46:04,235:INFO:Defining Hyperparameters
2025-02-19 15:46:04,358:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 15:46:04,358:INFO:Tuning with n_jobs=-1
2025-02-19 15:46:04,358:INFO:Initializing RandomizedSearchCV
2025-02-19 15:46:04,365:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/model_selection/_search.py:318: UserWarning: The total space of parameters 1 is smaller than n_iter=10. Running 1 iterations. For exhaustive searches, use GridSearchCV.
  warnings.warn(

2025-02-19 15:46:05,706:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:05,760:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:05,794:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:05,831:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:07,034:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:07,184:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:07,221:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:07,247:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:07,842:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:07,940:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:07,948:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 15:46:07,949:INFO:Hyperparameter search completed
2025-02-19 15:46:07,949:INFO:SubProcess create_model() called ==================================
2025-02-19 15:46:07,950:INFO:Initializing create_model()
2025-02-19 15:46:07,950:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f2bd4b48ee0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f2bcf841ff0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 15:46:07,950:INFO:Checking exceptions
2025-02-19 15:46:07,950:INFO:Importing libraries
2025-02-19 15:46:07,950:INFO:Copying training dataset
2025-02-19 15:46:07,954:INFO:Defining folds
2025-02-19 15:46:07,954:INFO:Declaring metric variables
2025-02-19 15:46:07,955:INFO:Importing untrained model
2025-02-19 15:46:07,955:INFO:Declaring custom model
2025-02-19 15:46:07,955:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:46:07,956:INFO:Starting cross validation
2025-02-19 15:46:07,957:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:46:09,264:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,270:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,278:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,322:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,329:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,336:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,340:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,355:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,362:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,375:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,383:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:09,390:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,652:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,660:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,666:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,667:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,677:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,683:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,758:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,765:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,771:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,779:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,786:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:10,793:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:11,471:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:11,476:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:11,484:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:11,518:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:11,522:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:11,526:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:11,537:INFO:Calculating mean and std
2025-02-19 15:46:11,538:INFO:Creating metrics dataframe
2025-02-19 15:46:11,540:INFO:Finalizing model
2025-02-19 15:46:12,016:INFO:Uploading results into container
2025-02-19 15:46:12,017:INFO:Uploading model into container now
2025-02-19 15:46:12,018:INFO:_master_model_container: 2
2025-02-19 15:46:12,018:INFO:_display_container: 3
2025-02-19 15:46:12,018:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:46:12,018:INFO:create_model() successfully completed......................................
2025-02-19 15:46:12,135:INFO:SubProcess create_model() end ==================================
2025-02-19 15:46:12,135:INFO:choose_better activated
2025-02-19 15:46:12,135:INFO:SubProcess create_model() called ==================================
2025-02-19 15:46:12,136:INFO:Initializing create_model()
2025-02-19 15:46:12,136:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f2bd4b48ee0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:46:12,136:INFO:Checking exceptions
2025-02-19 15:46:12,138:INFO:Importing libraries
2025-02-19 15:46:12,138:INFO:Copying training dataset
2025-02-19 15:46:12,146:INFO:Defining folds
2025-02-19 15:46:12,146:INFO:Declaring metric variables
2025-02-19 15:46:12,146:INFO:Importing untrained model
2025-02-19 15:46:12,146:INFO:Declaring custom model
2025-02-19 15:46:12,147:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:46:12,148:INFO:Starting cross validation
2025-02-19 15:46:12,149:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:46:13,503:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,510:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,510:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,516:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,516:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,522:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,527:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,534:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,542:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,561:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,569:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:13,577:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:14,908:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:14,920:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:14,934:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:14,935:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:14,949:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:14,962:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:14,983:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:14,992:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,007:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,030:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,037:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,044:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,707:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,713:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,721:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,758:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,764:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,770:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:15,781:INFO:Calculating mean and std
2025-02-19 15:46:15,782:INFO:Creating metrics dataframe
2025-02-19 15:46:15,786:INFO:Finalizing model
2025-02-19 15:46:16,280:INFO:Uploading results into container
2025-02-19 15:46:16,281:INFO:Uploading model into container now
2025-02-19 15:46:16,282:INFO:_master_model_container: 3
2025-02-19 15:46:16,282:INFO:_display_container: 4
2025-02-19 15:46:16,282:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:46:16,282:INFO:create_model() successfully completed......................................
2025-02-19 15:46:16,395:INFO:SubProcess create_model() end ==================================
2025-02-19 15:46:16,396:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 15:46:16,397:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 15:46:16,398:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 15:46:16,398:INFO:choose_better completed
2025-02-19 15:46:16,398:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 15:46:16,411:INFO:_master_model_container: 3
2025-02-19 15:46:16,412:INFO:_display_container: 3
2025-02-19 15:46:16,412:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:46:16,412:INFO:tune_model() successfully completed......................................
2025-02-19 15:46:16,536:INFO:Initializing calibrate_model()
2025-02-19 15:46:16,536:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f2bd4b48ee0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 15:46:16,536:INFO:Checking exceptions
2025-02-19 15:46:16,540:INFO:Preloading libraries
2025-02-19 15:46:16,540:INFO:Preparing display monitor
2025-02-19 15:46:16,542:INFO:Getting model name
2025-02-19 15:46:16,542:INFO:Base model : Random Forest Classifier
2025-02-19 15:46:16,543:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 15:46:16,543:INFO:SubProcess create_model() called ==================================
2025-02-19 15:46:16,545:INFO:Initializing create_model()
2025-02-19 15:46:16,545:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f2bd4b48ee0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f2bd4b0b340>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:46:16,545:INFO:Checking exceptions
2025-02-19 15:46:16,545:INFO:Importing libraries
2025-02-19 15:46:16,545:INFO:Copying training dataset
2025-02-19 15:46:16,553:INFO:Defining folds
2025-02-19 15:46:16,553:INFO:Declaring metric variables
2025-02-19 15:46:16,553:INFO:Importing untrained model
2025-02-19 15:46:16,553:INFO:Declaring custom model
2025-02-19 15:46:16,555:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:46:16,555:INFO:Starting cross validation
2025-02-19 15:46:16,556:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:46:22,341:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,366:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,402:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,410:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,418:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,567:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,583:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,596:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,731:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,740:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:22,770:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,207:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,211:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,216:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,266:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,279:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,289:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,617:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,628:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,666:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,718:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,729:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:28,761:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:32,292:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:32,300:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:32,307:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:32,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:32,360:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:32,364:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:32,372:INFO:Calculating mean and std
2025-02-19 15:46:32,373:INFO:Creating metrics dataframe
2025-02-19 15:46:32,375:INFO:Finalizing model
2025-02-19 15:46:34,762:INFO:Uploading results into container
2025-02-19 15:46:34,765:INFO:Uploading model into container now
2025-02-19 15:46:34,766:INFO:_master_model_container: 4
2025-02-19 15:46:34,767:INFO:_display_container: 4
2025-02-19 15:46:34,773:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:46:34,773:INFO:create_model() successfully completed......................................
2025-02-19 15:46:34,904:INFO:SubProcess create_model() end ==================================
2025-02-19 15:46:34,918:INFO:_master_model_container: 4
2025-02-19 15:46:34,918:INFO:_display_container: 4
2025-02-19 15:46:34,920:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:46:34,920:INFO:calibrate_model() successfully completed......................................
2025-02-19 15:46:35,047:INFO:Initializing finalize_model()
2025-02-19 15:46:35,047:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f2bd4b48ee0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 15:46:35,049:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:46:35,056:INFO:Initializing create_model()
2025-02-19 15:46:35,056:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f2bd4b48ee0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:46:35,056:INFO:Checking exceptions
2025-02-19 15:46:35,058:INFO:Importing libraries
2025-02-19 15:46:35,058:INFO:Copying training dataset
2025-02-19 15:46:35,058:INFO:Defining folds
2025-02-19 15:46:35,058:INFO:Declaring metric variables
2025-02-19 15:46:35,058:INFO:Importing untrained model
2025-02-19 15:46:35,059:INFO:Declaring custom model
2025-02-19 15:46:35,062:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:46:35,065:INFO:Cross validation set to False
2025-02-19 15:46:35,065:INFO:Fitting Model
2025-02-19 15:46:37,712:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:46:37,712:INFO:create_model() successfully completed......................................
2025-02-19 15:46:37,834:INFO:_master_model_container: 4
2025-02-19 15:46:37,834:INFO:_display_container: 4
2025-02-19 15:46:37,849:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:46:37,849:INFO:finalize_model() successfully completed......................................
2025-02-19 15:46:37,990:INFO:Initializing predict_model()
2025-02-19 15:46:37,991:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f2bd4b48ee0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f2bc5f9e050>)
2025-02-19 15:46:37,991:INFO:Checking exceptions
2025-02-19 15:46:37,991:INFO:Preloading libraries
2025-02-19 15:46:37,991:INFO:Set up data.
2025-02-19 15:46:38,015:INFO:Set up index.
2025-02-19 15:46:38,477:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:38,484:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:38,488:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:46:39,283:INFO:Initializing save_model()
2025-02-19 15:46:39,283:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), model_name=outputs/experiment_20250219_154545/models/trained_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 15:46:39,283:INFO:Adding model into prep_pipe
2025-02-19 15:46:39,284:WARNING:Only Model saved as it was a pipeline.
2025-02-19 15:46:39,661:INFO:outputs/experiment_20250219_154545/models/trained_model.pkl saved in current working directory
2025-02-19 15:46:39,668:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:46:39,669:INFO:save_model() successfully completed......................................
2025-02-19 15:55:54,484:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:55:54,484:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:55:54,484:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:55:54,484:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 15:56:00,135:INFO:PyCaret ClassificationExperiment
2025-02-19 15:56:00,135:INFO:Logging name: clf-default-name
2025-02-19 15:56:00,135:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 15:56:00,135:INFO:version 3.3.2
2025-02-19 15:56:00,135:INFO:Initializing setup()
2025-02-19 15:56:00,136:INFO:self.USI: 2268
2025-02-19 15:56:00,136:INFO:self._variable_keys: {'html_param', 'log_plots_param', 'fold_generator', 'gpu_n_jobs_param', 'fold_groups_param', 'logging_param', 'fix_imbalance', 'y', '_available_plots', 'memory', 'USI', 'target_param', 'X_test', 'fold_shuffle_param', '_ml_usecase', 'exp_id', 'seed', 'pipeline', 'y_train', 'exp_name_log', 'is_multiclass', 'idx', 'X_train', 'gpu_param', 'X', 'n_jobs_param', 'data', 'y_test'}
2025-02-19 15:56:00,136:INFO:Checking environment
2025-02-19 15:56:00,136:INFO:python_version: 3.10.12
2025-02-19 15:56:00,136:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 15:56:00,136:INFO:machine: x86_64
2025-02-19 15:56:00,137:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 15:56:00,138:INFO:Memory: svmem(total=7813279744, available=1666027520, percent=78.7, used=5108989952, free=711630848, active=3329703936, inactive=2962534400, buffers=95989760, cached=1896669184, shared=743440384, slab=334471168)
2025-02-19 15:56:00,139:INFO:Physical Core: 2
2025-02-19 15:56:00,139:INFO:Logical Core: 4
2025-02-19 15:56:00,139:INFO:Checking libraries
2025-02-19 15:56:00,139:INFO:System:
2025-02-19 15:56:00,139:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 15:56:00,139:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 15:56:00,139:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 15:56:00,139:INFO:PyCaret required dependencies:
2025-02-19 15:56:00,769:INFO:                 pip: 23.3.2
2025-02-19 15:56:00,769:INFO:          setuptools: 65.5.0
2025-02-19 15:56:00,769:INFO:             pycaret: 3.3.2
2025-02-19 15:56:00,769:INFO:             IPython: 8.20.0
2025-02-19 15:56:00,769:INFO:          ipywidgets: 8.1.1
2025-02-19 15:56:00,769:INFO:                tqdm: 4.66.1
2025-02-19 15:56:00,769:INFO:               numpy: 1.24.4
2025-02-19 15:56:00,769:INFO:              pandas: 1.5.3
2025-02-19 15:56:00,769:INFO:              jinja2: 3.1.3
2025-02-19 15:56:00,769:INFO:               scipy: 1.10.1
2025-02-19 15:56:00,769:INFO:              joblib: 1.3.2
2025-02-19 15:56:00,769:INFO:             sklearn: 1.2.2
2025-02-19 15:56:00,770:INFO:                pyod: 1.1.2
2025-02-19 15:56:00,770:INFO:            imblearn: 0.12.3
2025-02-19 15:56:00,770:INFO:   category_encoders: 2.6.3
2025-02-19 15:56:00,770:INFO:            lightgbm: 4.2.0
2025-02-19 15:56:00,770:INFO:               numba: 0.58.1
2025-02-19 15:56:00,770:INFO:            requests: 2.31.0
2025-02-19 15:56:00,770:INFO:          matplotlib: 3.6.0
2025-02-19 15:56:00,770:INFO:          scikitplot: 0.3.7
2025-02-19 15:56:00,770:INFO:         yellowbrick: 1.5
2025-02-19 15:56:00,770:INFO:              plotly: 5.18.0
2025-02-19 15:56:00,770:INFO:    plotly-resampler: Not installed
2025-02-19 15:56:00,770:INFO:             kaleido: 0.2.1
2025-02-19 15:56:00,770:INFO:           schemdraw: 0.15
2025-02-19 15:56:00,770:INFO:         statsmodels: 0.14.1
2025-02-19 15:56:00,770:INFO:              sktime: 0.21.1
2025-02-19 15:56:00,770:INFO:               tbats: 1.1.3
2025-02-19 15:56:00,770:INFO:            pmdarima: 2.0.4
2025-02-19 15:56:00,770:INFO:              psutil: 5.9.7
2025-02-19 15:56:00,770:INFO:          markupsafe: 2.1.3
2025-02-19 15:56:00,770:INFO:             pickle5: Not installed
2025-02-19 15:56:00,770:INFO:         cloudpickle: 2.2.1
2025-02-19 15:56:00,770:INFO:         deprecation: 2.1.0
2025-02-19 15:56:00,770:INFO:              xxhash: 3.4.1
2025-02-19 15:56:00,770:INFO:           wurlitzer: 3.0.3
2025-02-19 15:56:00,770:INFO:PyCaret optional dependencies:
2025-02-19 15:56:01,856:INFO:                shap: 0.44.0
2025-02-19 15:56:01,856:INFO:           interpret: 0.5.0
2025-02-19 15:56:01,856:INFO:                umap: 0.5.5
2025-02-19 15:56:01,856:INFO:     ydata_profiling: 4.6.0
2025-02-19 15:56:01,856:INFO:  explainerdashboard: 0.4.5
2025-02-19 15:56:01,856:INFO:             autoviz: 0.1.804
2025-02-19 15:56:01,857:INFO:           fairlearn: 0.7.0
2025-02-19 15:56:01,857:INFO:          deepchecks: Not installed
2025-02-19 15:56:01,857:INFO:             xgboost: 1.6.2
2025-02-19 15:56:01,857:INFO:            catboost: 1.2.2
2025-02-19 15:56:01,857:INFO:              kmodes: 0.12.2
2025-02-19 15:56:01,857:INFO:             mlxtend: 0.23.1
2025-02-19 15:56:01,857:INFO:       statsforecast: 1.5.0
2025-02-19 15:56:01,857:INFO:        tune_sklearn: 0.5.0
2025-02-19 15:56:01,857:INFO:                 ray: 2.9.0
2025-02-19 15:56:01,857:INFO:            hyperopt: 0.2.7
2025-02-19 15:56:01,857:INFO:              optuna: 3.5.0
2025-02-19 15:56:01,857:INFO:               skopt: 0.9.0
2025-02-19 15:56:01,858:INFO:              mlflow: 1.30.1
2025-02-19 15:56:01,858:INFO:              gradio: 3.50.2
2025-02-19 15:56:01,858:INFO:             fastapi: 0.109.0
2025-02-19 15:56:01,858:INFO:             uvicorn: 0.25.0
2025-02-19 15:56:01,858:INFO:              m2cgen: 0.10.0
2025-02-19 15:56:01,858:INFO:           evidently: 0.2.8
2025-02-19 15:56:01,858:INFO:               fugue: 0.8.6
2025-02-19 15:56:01,858:INFO:           streamlit: Not installed
2025-02-19 15:56:01,858:INFO:             prophet: Not installed
2025-02-19 15:56:01,858:INFO:None
2025-02-19 15:56:01,858:INFO:Set up data.
2025-02-19 15:56:01,882:INFO:Set up folding strategy.
2025-02-19 15:56:01,882:INFO:Set up train/test split.
2025-02-19 15:56:01,888:INFO:Set up index.
2025-02-19 15:56:01,889:INFO:Assigning column types.
2025-02-19 15:56:01,893:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 15:56:01,940:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 15:56:01,943:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:56:01,982:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:56:02,005:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:56:02,071:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 15:56:02,072:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:56:02,101:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:56:02,104:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:56:02,105:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 15:56:02,152:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:56:02,180:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:56:02,184:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:56:02,233:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 15:56:02,265:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:56:02,268:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:56:02,269:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 15:56:02,350:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:56:02,353:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:56:02,435:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:56:02,438:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:56:02,440:INFO:Preparing preprocessing pipeline...
2025-02-19 15:56:02,441:INFO:Set up label encoding.
2025-02-19 15:56:02,441:INFO:Set up simple imputation.
2025-02-19 15:56:02,471:INFO:Finished creating preprocessing pipeline.
2025-02-19 15:56:02,477:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 15:56:02,477:INFO:Creating final display dataframe.
2025-02-19 15:56:02,570:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    2268
2025-02-19 15:56:02,651:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:56:02,653:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:56:02,734:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 15:56:02,737:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 15:56:02,739:INFO:setup() successfully completed in 2.6s...............
2025-02-19 15:56:02,739:INFO:Initializing create_model()
2025-02-19 15:56:02,739:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff66928ae00>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 15:56:02,739:INFO:Checking exceptions
2025-02-19 15:56:02,741:INFO:Importing libraries
2025-02-19 15:56:02,741:INFO:Copying training dataset
2025-02-19 15:56:02,746:INFO:Defining folds
2025-02-19 15:56:02,746:INFO:Declaring metric variables
2025-02-19 15:56:02,746:INFO:Importing untrained model
2025-02-19 15:56:02,747:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:56:02,747:INFO:Starting cross validation
2025-02-19 15:56:02,748:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:56:09,465:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:09,485:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:09,490:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:09,495:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:09,503:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:09,512:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:09,797:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:09,816:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:09,823:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:10,148:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:10,160:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:10,171:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,019:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,060:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,061:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,082:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,084:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,091:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,151:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,158:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,177:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,815:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,821:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:11,837:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:12,072:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:12,080:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:12,088:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:12,103:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:12,107:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:12,111:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:12,119:INFO:Calculating mean and std
2025-02-19 15:56:12,120:INFO:Creating metrics dataframe
2025-02-19 15:56:12,123:INFO:Finalizing model
2025-02-19 15:56:12,626:INFO:Uploading results into container
2025-02-19 15:56:12,626:INFO:Uploading model into container now
2025-02-19 15:56:12,634:INFO:_master_model_container: 1
2025-02-19 15:56:12,634:INFO:_display_container: 2
2025-02-19 15:56:12,635:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:56:12,635:INFO:create_model() successfully completed......................................
2025-02-19 15:56:12,813:INFO:Initializing tune_model()
2025-02-19 15:56:12,813:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff66928ae00>)
2025-02-19 15:56:12,813:INFO:Checking exceptions
2025-02-19 15:56:12,820:INFO:Copying training dataset
2025-02-19 15:56:12,825:INFO:Checking base model
2025-02-19 15:56:12,825:INFO:Base model : Random Forest Classifier
2025-02-19 15:56:12,826:INFO:Declaring metric variables
2025-02-19 15:56:12,826:INFO:Defining Hyperparameters
2025-02-19 15:56:12,957:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 15:56:12,957:INFO:Tuning with n_jobs=-1
2025-02-19 15:56:12,958:INFO:Initializing RandomizedSearchCV
2025-02-19 15:56:14,334:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:14,336:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:14,374:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:14,387:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:15,645:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:15,667:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:15,743:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:15,803:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:16,469:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:16,487:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:16,498:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 15:56:16,498:INFO:Hyperparameter search completed
2025-02-19 15:56:16,498:INFO:SubProcess create_model() called ==================================
2025-02-19 15:56:16,499:INFO:Initializing create_model()
2025-02-19 15:56:16,499:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff66928ae00>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff669bf0ee0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 15:56:16,499:INFO:Checking exceptions
2025-02-19 15:56:16,499:INFO:Importing libraries
2025-02-19 15:56:16,499:INFO:Copying training dataset
2025-02-19 15:56:16,504:INFO:Defining folds
2025-02-19 15:56:16,504:INFO:Declaring metric variables
2025-02-19 15:56:16,504:INFO:Importing untrained model
2025-02-19 15:56:16,504:INFO:Declaring custom model
2025-02-19 15:56:16,505:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:56:16,506:INFO:Starting cross validation
2025-02-19 15:56:16,507:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:56:17,807:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,822:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,828:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,906:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,914:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,919:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,929:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,932:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,936:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,939:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,943:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:17,946:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,184:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,191:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,199:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,234:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,244:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,251:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,317:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,323:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,327:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,330:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,334:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,341:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,979:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,985:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:19,997:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:20,063:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:20,067:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:20,070:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:20,078:INFO:Calculating mean and std
2025-02-19 15:56:20,079:INFO:Creating metrics dataframe
2025-02-19 15:56:20,081:INFO:Finalizing model
2025-02-19 15:56:20,523:INFO:Uploading results into container
2025-02-19 15:56:20,524:INFO:Uploading model into container now
2025-02-19 15:56:20,524:INFO:_master_model_container: 2
2025-02-19 15:56:20,525:INFO:_display_container: 3
2025-02-19 15:56:20,525:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:56:20,525:INFO:create_model() successfully completed......................................
2025-02-19 15:56:20,649:INFO:SubProcess create_model() end ==================================
2025-02-19 15:56:20,649:INFO:choose_better activated
2025-02-19 15:56:20,649:INFO:SubProcess create_model() called ==================================
2025-02-19 15:56:20,650:INFO:Initializing create_model()
2025-02-19 15:56:20,650:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff66928ae00>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:56:20,651:INFO:Checking exceptions
2025-02-19 15:56:20,653:INFO:Importing libraries
2025-02-19 15:56:20,653:INFO:Copying training dataset
2025-02-19 15:56:20,661:INFO:Defining folds
2025-02-19 15:56:20,661:INFO:Declaring metric variables
2025-02-19 15:56:20,661:INFO:Importing untrained model
2025-02-19 15:56:20,661:INFO:Declaring custom model
2025-02-19 15:56:20,663:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:56:20,663:INFO:Starting cross validation
2025-02-19 15:56:20,664:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:56:21,966:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:21,976:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:21,995:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:22,066:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:22,066:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:22,072:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:22,074:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:22,075:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:22,078:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:22,081:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:22,082:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:22,085:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,351:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,361:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,369:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,406:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,406:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,412:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,413:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,418:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,421:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,481:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,488:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:23,495:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:24,183:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:24,188:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:24,196:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:24,197:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:24,202:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:24,205:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:24,209:INFO:Calculating mean and std
2025-02-19 15:56:24,210:INFO:Creating metrics dataframe
2025-02-19 15:56:24,212:INFO:Finalizing model
2025-02-19 15:56:24,691:INFO:Uploading results into container
2025-02-19 15:56:24,691:INFO:Uploading model into container now
2025-02-19 15:56:24,692:INFO:_master_model_container: 3
2025-02-19 15:56:24,692:INFO:_display_container: 4
2025-02-19 15:56:24,693:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:56:24,693:INFO:create_model() successfully completed......................................
2025-02-19 15:56:24,822:INFO:SubProcess create_model() end ==================================
2025-02-19 15:56:24,823:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 15:56:24,825:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 15:56:24,825:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 15:56:24,825:INFO:choose_better completed
2025-02-19 15:56:24,826:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 15:56:24,840:INFO:_master_model_container: 3
2025-02-19 15:56:24,840:INFO:_display_container: 3
2025-02-19 15:56:24,841:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 15:56:24,841:INFO:tune_model() successfully completed......................................
2025-02-19 15:56:24,975:INFO:Initializing calibrate_model()
2025-02-19 15:56:24,975:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff66928ae00>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 15:56:24,975:INFO:Checking exceptions
2025-02-19 15:56:24,978:INFO:Preloading libraries
2025-02-19 15:56:24,978:INFO:Preparing display monitor
2025-02-19 15:56:24,980:INFO:Getting model name
2025-02-19 15:56:24,981:INFO:Base model : Random Forest Classifier
2025-02-19 15:56:24,981:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 15:56:24,981:INFO:SubProcess create_model() called ==================================
2025-02-19 15:56:24,984:INFO:Initializing create_model()
2025-02-19 15:56:24,984:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff66928ae00>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff65422bf40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:56:24,984:INFO:Checking exceptions
2025-02-19 15:56:24,984:INFO:Importing libraries
2025-02-19 15:56:24,984:INFO:Copying training dataset
2025-02-19 15:56:24,992:INFO:Defining folds
2025-02-19 15:56:24,992:INFO:Declaring metric variables
2025-02-19 15:56:24,992:INFO:Importing untrained model
2025-02-19 15:56:24,992:INFO:Declaring custom model
2025-02-19 15:56:24,994:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:56:24,995:INFO:Starting cross validation
2025-02-19 15:56:24,996:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 15:56:30,892:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:30,908:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:30,930:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:31,116:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:31,135:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:31,141:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:31,196:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:31,202:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:31,228:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:31,451:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:31,459:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:31,476:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:37,255:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:37,263:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:37,274:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:37,649:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:37,673:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:37,689:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:37,731:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:37,739:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:37,747:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:38,080:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:38,099:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:38,106:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:41,137:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:41,145:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:41,153:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:41,487:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:41,491:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:41,494:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 15:56:41,502:INFO:Calculating mean and std
2025-02-19 15:56:41,503:INFO:Creating metrics dataframe
2025-02-19 15:56:41,505:INFO:Finalizing model
2025-02-19 15:56:44,098:INFO:Uploading results into container
2025-02-19 15:56:44,099:INFO:Uploading model into container now
2025-02-19 15:56:44,100:INFO:_master_model_container: 4
2025-02-19 15:56:44,100:INFO:_display_container: 4
2025-02-19 15:56:44,101:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:56:44,101:INFO:create_model() successfully completed......................................
2025-02-19 15:56:44,231:INFO:SubProcess create_model() end ==================================
2025-02-19 15:56:44,247:INFO:_master_model_container: 4
2025-02-19 15:56:44,247:INFO:_display_container: 4
2025-02-19 15:56:44,249:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:56:44,249:INFO:calibrate_model() successfully completed......................................
2025-02-19 15:56:44,387:INFO:Initializing finalize_model()
2025-02-19 15:56:44,388:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff66928ae00>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 15:56:44,390:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 15:56:44,397:INFO:Initializing create_model()
2025-02-19 15:56:44,397:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff66928ae00>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 15:56:44,397:INFO:Checking exceptions
2025-02-19 15:56:44,398:INFO:Importing libraries
2025-02-19 15:56:44,398:INFO:Copying training dataset
2025-02-19 15:56:44,399:INFO:Defining folds
2025-02-19 15:56:44,399:INFO:Declaring metric variables
2025-02-19 15:56:44,399:INFO:Importing untrained model
2025-02-19 15:56:44,399:INFO:Declaring custom model
2025-02-19 15:56:44,401:INFO:Random Forest Classifier Imported successfully
2025-02-19 15:56:44,402:INFO:Cross validation set to False
2025-02-19 15:56:44,402:INFO:Fitting Model
2025-02-19 15:56:46,997:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:56:46,997:INFO:create_model() successfully completed......................................
2025-02-19 15:56:47,122:INFO:_master_model_container: 4
2025-02-19 15:56:47,123:INFO:_display_container: 4
2025-02-19 15:56:47,137:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:56:47,137:INFO:finalize_model() successfully completed......................................
2025-02-19 15:56:47,286:INFO:Initializing predict_model()
2025-02-19 15:56:47,286:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff66928ae00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7ff65414c700>)
2025-02-19 15:56:47,286:INFO:Checking exceptions
2025-02-19 15:56:47,286:INFO:Preloading libraries
2025-02-19 15:56:47,287:INFO:Set up data.
2025-02-19 15:56:47,310:INFO:Set up index.
2025-02-19 15:56:48,656:INFO:Initializing save_model()
2025-02-19 15:56:48,656:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), model_name=outputs/experiment_20250219_155555/models/trained_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 15:56:48,657:INFO:Adding model into prep_pipe
2025-02-19 15:56:48,657:WARNING:Only Model saved as it was a pipeline.
2025-02-19 15:56:48,923:INFO:outputs/experiment_20250219_155555/models/trained_model.pkl saved in current working directory
2025-02-19 15:56:48,931:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 15:56:48,931:INFO:save_model() successfully completed......................................
2025-02-19 16:04:34,513:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 16:04:34,513:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 16:04:34,513:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 16:04:34,513:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 16:04:39,975:INFO:PyCaret ClassificationExperiment
2025-02-19 16:04:39,975:INFO:Logging name: clf-default-name
2025-02-19 16:04:39,975:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 16:04:39,976:INFO:version 3.3.2
2025-02-19 16:04:39,976:INFO:Initializing setup()
2025-02-19 16:04:39,976:INFO:self.USI: 1c66
2025-02-19 16:04:39,976:INFO:self._variable_keys: {'exp_name_log', 'fold_shuffle_param', 'gpu_n_jobs_param', 'USI', 'X_train', 'y', '_ml_usecase', 'logging_param', 'data', 'target_param', 'memory', 'X_test', '_available_plots', 'y_test', 'fold_groups_param', 'is_multiclass', 'fold_generator', 'log_plots_param', 'html_param', 'exp_id', 'seed', 'gpu_param', 'idx', 'X', 'fix_imbalance', 'pipeline', 'y_train', 'n_jobs_param'}
2025-02-19 16:04:39,976:INFO:Checking environment
2025-02-19 16:04:39,976:INFO:python_version: 3.10.12
2025-02-19 16:04:39,976:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 16:04:39,976:INFO:machine: x86_64
2025-02-19 16:04:39,978:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 16:04:39,978:INFO:Memory: svmem(total=7813279744, available=1684176896, percent=78.4, used=5079408640, free=745054208, active=3363639296, inactive=2974867456, buffers=88342528, cached=1900474368, shared=757342208, slab=333766656)
2025-02-19 16:04:39,978:INFO:Physical Core: 2
2025-02-19 16:04:39,979:INFO:Logical Core: 4
2025-02-19 16:04:39,979:INFO:Checking libraries
2025-02-19 16:04:39,979:INFO:System:
2025-02-19 16:04:39,979:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 16:04:39,979:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 16:04:39,979:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 16:04:39,979:INFO:PyCaret required dependencies:
2025-02-19 16:04:40,647:INFO:                 pip: 23.3.2
2025-02-19 16:04:40,648:INFO:          setuptools: 65.5.0
2025-02-19 16:04:40,648:INFO:             pycaret: 3.3.2
2025-02-19 16:04:40,648:INFO:             IPython: 8.20.0
2025-02-19 16:04:40,648:INFO:          ipywidgets: 8.1.1
2025-02-19 16:04:40,648:INFO:                tqdm: 4.66.1
2025-02-19 16:04:40,648:INFO:               numpy: 1.24.4
2025-02-19 16:04:40,648:INFO:              pandas: 1.5.3
2025-02-19 16:04:40,648:INFO:              jinja2: 3.1.3
2025-02-19 16:04:40,648:INFO:               scipy: 1.10.1
2025-02-19 16:04:40,648:INFO:              joblib: 1.3.2
2025-02-19 16:04:40,648:INFO:             sklearn: 1.2.2
2025-02-19 16:04:40,648:INFO:                pyod: 1.1.2
2025-02-19 16:04:40,648:INFO:            imblearn: 0.12.3
2025-02-19 16:04:40,648:INFO:   category_encoders: 2.6.3
2025-02-19 16:04:40,648:INFO:            lightgbm: 4.2.0
2025-02-19 16:04:40,648:INFO:               numba: 0.58.1
2025-02-19 16:04:40,648:INFO:            requests: 2.31.0
2025-02-19 16:04:40,648:INFO:          matplotlib: 3.6.0
2025-02-19 16:04:40,648:INFO:          scikitplot: 0.3.7
2025-02-19 16:04:40,648:INFO:         yellowbrick: 1.5
2025-02-19 16:04:40,648:INFO:              plotly: 5.18.0
2025-02-19 16:04:40,648:INFO:    plotly-resampler: Not installed
2025-02-19 16:04:40,648:INFO:             kaleido: 0.2.1
2025-02-19 16:04:40,648:INFO:           schemdraw: 0.15
2025-02-19 16:04:40,648:INFO:         statsmodels: 0.14.1
2025-02-19 16:04:40,649:INFO:              sktime: 0.21.1
2025-02-19 16:04:40,649:INFO:               tbats: 1.1.3
2025-02-19 16:04:40,649:INFO:            pmdarima: 2.0.4
2025-02-19 16:04:40,649:INFO:              psutil: 5.9.7
2025-02-19 16:04:40,649:INFO:          markupsafe: 2.1.3
2025-02-19 16:04:40,649:INFO:             pickle5: Not installed
2025-02-19 16:04:40,649:INFO:         cloudpickle: 2.2.1
2025-02-19 16:04:40,649:INFO:         deprecation: 2.1.0
2025-02-19 16:04:40,649:INFO:              xxhash: 3.4.1
2025-02-19 16:04:40,649:INFO:           wurlitzer: 3.0.3
2025-02-19 16:04:40,649:INFO:PyCaret optional dependencies:
2025-02-19 16:04:41,735:INFO:                shap: 0.44.0
2025-02-19 16:04:41,735:INFO:           interpret: 0.5.0
2025-02-19 16:04:41,735:INFO:                umap: 0.5.5
2025-02-19 16:04:41,735:INFO:     ydata_profiling: 4.6.0
2025-02-19 16:04:41,735:INFO:  explainerdashboard: 0.4.5
2025-02-19 16:04:41,735:INFO:             autoviz: 0.1.804
2025-02-19 16:04:41,735:INFO:           fairlearn: 0.7.0
2025-02-19 16:04:41,735:INFO:          deepchecks: Not installed
2025-02-19 16:04:41,735:INFO:             xgboost: 1.6.2
2025-02-19 16:04:41,736:INFO:            catboost: 1.2.2
2025-02-19 16:04:41,736:INFO:              kmodes: 0.12.2
2025-02-19 16:04:41,736:INFO:             mlxtend: 0.23.1
2025-02-19 16:04:41,736:INFO:       statsforecast: 1.5.0
2025-02-19 16:04:41,736:INFO:        tune_sklearn: 0.5.0
2025-02-19 16:04:41,736:INFO:                 ray: 2.9.0
2025-02-19 16:04:41,736:INFO:            hyperopt: 0.2.7
2025-02-19 16:04:41,736:INFO:              optuna: 3.5.0
2025-02-19 16:04:41,736:INFO:               skopt: 0.9.0
2025-02-19 16:04:41,736:INFO:              mlflow: 1.30.1
2025-02-19 16:04:41,736:INFO:              gradio: 3.50.2
2025-02-19 16:04:41,736:INFO:             fastapi: 0.109.0
2025-02-19 16:04:41,736:INFO:             uvicorn: 0.25.0
2025-02-19 16:04:41,737:INFO:              m2cgen: 0.10.0
2025-02-19 16:04:41,737:INFO:           evidently: 0.2.8
2025-02-19 16:04:41,737:INFO:               fugue: 0.8.6
2025-02-19 16:04:41,737:INFO:           streamlit: Not installed
2025-02-19 16:04:41,737:INFO:             prophet: Not installed
2025-02-19 16:04:41,737:INFO:None
2025-02-19 16:04:41,737:INFO:Set up data.
2025-02-19 16:04:41,759:INFO:Set up folding strategy.
2025-02-19 16:04:41,760:INFO:Set up train/test split.
2025-02-19 16:04:41,769:INFO:Set up index.
2025-02-19 16:04:41,769:INFO:Assigning column types.
2025-02-19 16:04:41,775:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 16:04:41,822:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 16:04:41,825:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:04:41,860:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:04:41,901:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:04:41,965:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 16:04:41,966:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:04:41,993:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:04:41,996:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:04:41,997:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 16:04:42,046:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:04:42,075:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:04:42,078:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:04:42,125:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:04:42,153:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:04:42,156:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:04:42,157:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 16:04:42,231:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:04:42,234:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:04:42,309:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:04:42,312:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:04:42,314:INFO:Preparing preprocessing pipeline...
2025-02-19 16:04:42,316:INFO:Set up label encoding.
2025-02-19 16:04:42,316:INFO:Set up simple imputation.
2025-02-19 16:04:42,343:INFO:Finished creating preprocessing pipeline.
2025-02-19 16:04:42,349:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 16:04:42,349:INFO:Creating final display dataframe.
2025-02-19 16:04:42,439:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    1c66
2025-02-19 16:04:42,516:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:04:42,519:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:04:42,594:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:04:42,599:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:04:42,601:INFO:setup() successfully completed in 2.63s...............
2025-02-19 16:04:42,602:INFO:Initializing create_model()
2025-02-19 16:04:42,602:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b2bc25db0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 16:04:42,602:INFO:Checking exceptions
2025-02-19 16:04:42,603:INFO:Importing libraries
2025-02-19 16:04:42,603:INFO:Copying training dataset
2025-02-19 16:04:42,608:INFO:Defining folds
2025-02-19 16:04:42,608:INFO:Declaring metric variables
2025-02-19 16:04:42,609:INFO:Importing untrained model
2025-02-19 16:04:42,609:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:04:42,610:INFO:Starting cross validation
2025-02-19 16:04:42,616:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:04:49,247:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,263:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,277:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,719:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,728:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,735:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,908:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,909:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,915:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,917:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,922:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:49,924:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,084:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,105:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,126:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,303:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,317:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,324:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,479:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,486:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,498:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,530:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,537:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:51,543:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:52,171:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:52,179:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:52,184:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:52,224:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:52,228:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:52,234:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:52,242:INFO:Calculating mean and std
2025-02-19 16:04:52,243:INFO:Creating metrics dataframe
2025-02-19 16:04:52,246:INFO:Finalizing model
2025-02-19 16:04:52,735:INFO:Uploading results into container
2025-02-19 16:04:52,736:INFO:Uploading model into container now
2025-02-19 16:04:52,750:INFO:_master_model_container: 1
2025-02-19 16:04:52,750:INFO:_display_container: 2
2025-02-19 16:04:52,751:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:04:52,751:INFO:create_model() successfully completed......................................
2025-02-19 16:04:52,922:INFO:Initializing tune_model()
2025-02-19 16:04:52,922:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b2bc25db0>)
2025-02-19 16:04:52,922:INFO:Checking exceptions
2025-02-19 16:04:52,930:INFO:Copying training dataset
2025-02-19 16:04:52,935:INFO:Checking base model
2025-02-19 16:04:52,935:INFO:Base model : Random Forest Classifier
2025-02-19 16:04:52,936:INFO:Declaring metric variables
2025-02-19 16:04:52,936:INFO:Defining Hyperparameters
2025-02-19 16:04:53,071:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 16:04:53,071:INFO:Tuning with n_jobs=-1
2025-02-19 16:04:53,071:INFO:Initializing RandomizedSearchCV
2025-02-19 16:04:54,492:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:54,599:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:54,636:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:54,769:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:55,957:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:56,034:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:56,095:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:56,352:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:56,910:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:56,947:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:56,958:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 16:04:56,958:INFO:Hyperparameter search completed
2025-02-19 16:04:56,958:INFO:SubProcess create_model() called ==================================
2025-02-19 16:04:56,959:INFO:Initializing create_model()
2025-02-19 16:04:56,959:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b2bc25db0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f0b179af580>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 16:04:56,959:INFO:Checking exceptions
2025-02-19 16:04:56,959:INFO:Importing libraries
2025-02-19 16:04:56,960:INFO:Copying training dataset
2025-02-19 16:04:56,964:INFO:Defining folds
2025-02-19 16:04:56,964:INFO:Declaring metric variables
2025-02-19 16:04:56,964:INFO:Importing untrained model
2025-02-19 16:04:56,964:INFO:Declaring custom model
2025-02-19 16:04:56,965:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:04:56,966:INFO:Starting cross validation
2025-02-19 16:04:56,967:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:04:58,425:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,436:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,443:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,459:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,470:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,479:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,490:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,502:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,510:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,516:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,527:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:58,537:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:59,951:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:59,959:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:59,968:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:59,986:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:59,992:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:59,993:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:04:59,997:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,003:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,011:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,062:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,069:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,076:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,836:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,844:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,851:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,858:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,861:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,866:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:00,876:INFO:Calculating mean and std
2025-02-19 16:05:00,876:INFO:Creating metrics dataframe
2025-02-19 16:05:00,879:INFO:Finalizing model
2025-02-19 16:05:01,377:INFO:Uploading results into container
2025-02-19 16:05:01,378:INFO:Uploading model into container now
2025-02-19 16:05:01,378:INFO:_master_model_container: 2
2025-02-19 16:05:01,378:INFO:_display_container: 3
2025-02-19 16:05:01,379:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:05:01,379:INFO:create_model() successfully completed......................................
2025-02-19 16:05:01,504:INFO:SubProcess create_model() end ==================================
2025-02-19 16:05:01,504:INFO:choose_better activated
2025-02-19 16:05:01,505:INFO:SubProcess create_model() called ==================================
2025-02-19 16:05:01,506:INFO:Initializing create_model()
2025-02-19 16:05:01,507:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b2bc25db0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:05:01,507:INFO:Checking exceptions
2025-02-19 16:05:01,508:INFO:Importing libraries
2025-02-19 16:05:01,508:INFO:Copying training dataset
2025-02-19 16:05:01,516:INFO:Defining folds
2025-02-19 16:05:01,516:INFO:Declaring metric variables
2025-02-19 16:05:01,516:INFO:Importing untrained model
2025-02-19 16:05:01,516:INFO:Declaring custom model
2025-02-19 16:05:01,517:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:05:01,518:INFO:Starting cross validation
2025-02-19 16:05:01,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:05:03,025:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,028:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,036:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,038:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,044:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,046:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,071:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,071:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,078:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,079:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,086:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:03,086:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,559:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,573:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,580:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,581:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,588:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,588:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,595:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,596:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,603:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,632:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,640:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:04,647:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:05,436:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:05,441:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:05,445:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:05,451:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:05,455:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:05,459:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:05,464:INFO:Calculating mean and std
2025-02-19 16:05:05,465:INFO:Creating metrics dataframe
2025-02-19 16:05:05,467:INFO:Finalizing model
2025-02-19 16:05:05,983:INFO:Uploading results into container
2025-02-19 16:05:05,983:INFO:Uploading model into container now
2025-02-19 16:05:05,984:INFO:_master_model_container: 3
2025-02-19 16:05:05,984:INFO:_display_container: 4
2025-02-19 16:05:05,985:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:05:05,985:INFO:create_model() successfully completed......................................
2025-02-19 16:05:06,107:INFO:SubProcess create_model() end ==================================
2025-02-19 16:05:06,108:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 16:05:06,110:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 16:05:06,110:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 16:05:06,110:INFO:choose_better completed
2025-02-19 16:05:06,110:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 16:05:06,124:INFO:_master_model_container: 3
2025-02-19 16:05:06,124:INFO:_display_container: 3
2025-02-19 16:05:06,126:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:05:06,126:INFO:tune_model() successfully completed......................................
2025-02-19 16:05:06,271:INFO:Initializing save_model()
2025-02-19 16:05:06,271:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_160435/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 16:05:06,271:INFO:Adding model into prep_pipe
2025-02-19 16:05:06,340:INFO:outputs/experiment_20250219_160435/models/tuned_model.pkl saved in current working directory
2025-02-19 16:05:06,346:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 16:05:06,346:INFO:save_model() successfully completed......................................
2025-02-19 16:05:06,474:INFO:Initializing calibrate_model()
2025-02-19 16:05:06,474:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b2bc25db0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 16:05:06,474:INFO:Checking exceptions
2025-02-19 16:05:06,477:INFO:Preloading libraries
2025-02-19 16:05:06,478:INFO:Preparing display monitor
2025-02-19 16:05:06,480:INFO:Getting model name
2025-02-19 16:05:06,480:INFO:Base model : Random Forest Classifier
2025-02-19 16:05:06,481:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 16:05:06,481:INFO:SubProcess create_model() called ==================================
2025-02-19 16:05:06,485:INFO:Initializing create_model()
2025-02-19 16:05:06,485:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b2bc25db0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f0b28bb8df0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:05:06,485:INFO:Checking exceptions
2025-02-19 16:05:06,485:INFO:Importing libraries
2025-02-19 16:05:06,486:INFO:Copying training dataset
2025-02-19 16:05:06,493:INFO:Defining folds
2025-02-19 16:05:06,493:INFO:Declaring metric variables
2025-02-19 16:05:06,494:INFO:Importing untrained model
2025-02-19 16:05:06,494:INFO:Declaring custom model
2025-02-19 16:05:06,495:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:05:06,495:INFO:Starting cross validation
2025-02-19 16:05:06,496:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:05:12,951:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:12,963:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:12,973:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:13,043:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:13,048:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:13,055:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:13,057:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:13,065:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:13,072:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:13,323:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:13,330:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:13,336:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,111:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,124:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,132:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,314:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,321:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,342:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,343:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,371:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,382:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,953:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,964:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:19,978:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:22,978:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:22,982:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:22,986:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:23,119:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:23,130:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:23,141:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:23,151:INFO:Calculating mean and std
2025-02-19 16:05:23,152:INFO:Creating metrics dataframe
2025-02-19 16:05:23,155:INFO:Finalizing model
2025-02-19 16:05:25,811:INFO:Uploading results into container
2025-02-19 16:05:25,811:INFO:Uploading model into container now
2025-02-19 16:05:25,812:INFO:_master_model_container: 4
2025-02-19 16:05:25,812:INFO:_display_container: 4
2025-02-19 16:05:25,813:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:05:25,813:INFO:create_model() successfully completed......................................
2025-02-19 16:05:25,943:INFO:SubProcess create_model() end ==================================
2025-02-19 16:05:25,957:INFO:_master_model_container: 4
2025-02-19 16:05:25,957:INFO:_display_container: 4
2025-02-19 16:05:25,962:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:05:25,962:INFO:calibrate_model() successfully completed......................................
2025-02-19 16:05:26,098:INFO:Initializing finalize_model()
2025-02-19 16:05:26,099:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b2bc25db0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 16:05:26,101:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:05:26,108:INFO:Initializing create_model()
2025-02-19 16:05:26,108:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b2bc25db0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:05:26,108:INFO:Checking exceptions
2025-02-19 16:05:26,110:INFO:Importing libraries
2025-02-19 16:05:26,110:INFO:Copying training dataset
2025-02-19 16:05:26,110:INFO:Defining folds
2025-02-19 16:05:26,110:INFO:Declaring metric variables
2025-02-19 16:05:26,111:INFO:Importing untrained model
2025-02-19 16:05:26,111:INFO:Declaring custom model
2025-02-19 16:05:26,113:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:05:26,115:INFO:Cross validation set to False
2025-02-19 16:05:26,115:INFO:Fitting Model
2025-02-19 16:05:29,078:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 16:05:29,078:INFO:create_model() successfully completed......................................
2025-02-19 16:05:29,204:INFO:_master_model_container: 4
2025-02-19 16:05:29,204:INFO:_display_container: 4
2025-02-19 16:05:29,217:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 16:05:29,217:INFO:finalize_model() successfully completed......................................
2025-02-19 16:05:29,364:INFO:Initializing predict_model()
2025-02-19 16:05:29,364:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b2bc25db0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f0b14f7cb80>)
2025-02-19 16:05:29,364:INFO:Checking exceptions
2025-02-19 16:05:29,364:INFO:Preloading libraries
2025-02-19 16:05:29,364:INFO:Set up data.
2025-02-19 16:05:29,385:INFO:Set up index.
2025-02-19 16:05:30,840:INFO:PyCaret ClassificationExperiment
2025-02-19 16:05:30,840:INFO:Logging name: clf-default-name
2025-02-19 16:05:30,840:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 16:05:30,840:INFO:version 3.3.2
2025-02-19 16:05:30,840:INFO:Initializing setup()
2025-02-19 16:05:30,840:INFO:self.USI: cbc3
2025-02-19 16:05:30,840:INFO:self._variable_keys: {'exp_name_log', 'fold_shuffle_param', 'gpu_n_jobs_param', 'USI', 'X_train', 'y', '_ml_usecase', 'logging_param', 'data', 'target_param', 'memory', 'X_test', '_available_plots', 'y_test', 'fold_groups_param', 'is_multiclass', 'fold_generator', 'log_plots_param', 'html_param', 'exp_id', 'seed', 'gpu_param', 'idx', 'X', 'fix_imbalance', 'pipeline', 'y_train', 'n_jobs_param'}
2025-02-19 16:05:30,840:INFO:Checking environment
2025-02-19 16:05:30,841:INFO:python_version: 3.10.12
2025-02-19 16:05:30,841:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 16:05:30,841:INFO:machine: x86_64
2025-02-19 16:05:30,841:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 16:05:30,841:INFO:Memory: svmem(total=7813279744, available=985894912, percent=87.4, used=5777326080, free=145661952, active=3363106816, inactive=3720101888, buffers=71241728, cached=1819049984, shared=757956608, slab=335638528)
2025-02-19 16:05:30,842:INFO:Physical Core: 2
2025-02-19 16:05:30,842:INFO:Logical Core: 4
2025-02-19 16:05:30,842:INFO:Checking libraries
2025-02-19 16:05:30,842:INFO:System:
2025-02-19 16:05:30,842:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 16:05:30,842:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 16:05:30,842:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 16:05:30,842:INFO:PyCaret required dependencies:
2025-02-19 16:05:30,842:INFO:                 pip: 23.3.2
2025-02-19 16:05:30,842:INFO:          setuptools: 65.5.0
2025-02-19 16:05:30,842:INFO:             pycaret: 3.3.2
2025-02-19 16:05:30,843:INFO:             IPython: 8.20.0
2025-02-19 16:05:30,843:INFO:          ipywidgets: 8.1.1
2025-02-19 16:05:30,843:INFO:                tqdm: 4.66.1
2025-02-19 16:05:30,843:INFO:               numpy: 1.24.4
2025-02-19 16:05:30,843:INFO:              pandas: 1.5.3
2025-02-19 16:05:30,843:INFO:              jinja2: 3.1.3
2025-02-19 16:05:30,843:INFO:               scipy: 1.10.1
2025-02-19 16:05:30,843:INFO:              joblib: 1.3.2
2025-02-19 16:05:30,843:INFO:             sklearn: 1.2.2
2025-02-19 16:05:30,843:INFO:                pyod: 1.1.2
2025-02-19 16:05:30,843:INFO:            imblearn: 0.12.3
2025-02-19 16:05:30,843:INFO:   category_encoders: 2.6.3
2025-02-19 16:05:30,843:INFO:            lightgbm: 4.2.0
2025-02-19 16:05:30,843:INFO:               numba: 0.58.1
2025-02-19 16:05:30,843:INFO:            requests: 2.31.0
2025-02-19 16:05:30,844:INFO:          matplotlib: 3.6.0
2025-02-19 16:05:30,844:INFO:          scikitplot: 0.3.7
2025-02-19 16:05:30,844:INFO:         yellowbrick: 1.5
2025-02-19 16:05:30,844:INFO:              plotly: 5.18.0
2025-02-19 16:05:30,844:INFO:    plotly-resampler: Not installed
2025-02-19 16:05:30,844:INFO:             kaleido: 0.2.1
2025-02-19 16:05:30,844:INFO:           schemdraw: 0.15
2025-02-19 16:05:30,844:INFO:         statsmodels: 0.14.1
2025-02-19 16:05:30,844:INFO:              sktime: 0.21.1
2025-02-19 16:05:30,844:INFO:               tbats: 1.1.3
2025-02-19 16:05:30,844:INFO:            pmdarima: 2.0.4
2025-02-19 16:05:30,844:INFO:              psutil: 5.9.7
2025-02-19 16:05:30,844:INFO:          markupsafe: 2.1.3
2025-02-19 16:05:30,844:INFO:             pickle5: Not installed
2025-02-19 16:05:30,844:INFO:         cloudpickle: 2.2.1
2025-02-19 16:05:30,845:INFO:         deprecation: 2.1.0
2025-02-19 16:05:30,845:INFO:              xxhash: 3.4.1
2025-02-19 16:05:30,845:INFO:           wurlitzer: 3.0.3
2025-02-19 16:05:30,845:INFO:PyCaret optional dependencies:
2025-02-19 16:05:30,845:INFO:                shap: 0.44.0
2025-02-19 16:05:30,845:INFO:           interpret: 0.5.0
2025-02-19 16:05:30,845:INFO:                umap: 0.5.5
2025-02-19 16:05:30,845:INFO:     ydata_profiling: 4.6.0
2025-02-19 16:05:30,845:INFO:  explainerdashboard: 0.4.5
2025-02-19 16:05:30,845:INFO:             autoviz: 0.1.804
2025-02-19 16:05:30,845:INFO:           fairlearn: 0.7.0
2025-02-19 16:05:30,845:INFO:          deepchecks: Not installed
2025-02-19 16:05:30,845:INFO:             xgboost: 1.6.2
2025-02-19 16:05:30,846:INFO:            catboost: 1.2.2
2025-02-19 16:05:30,846:INFO:              kmodes: 0.12.2
2025-02-19 16:05:30,846:INFO:             mlxtend: 0.23.1
2025-02-19 16:05:30,846:INFO:       statsforecast: 1.5.0
2025-02-19 16:05:30,846:INFO:        tune_sklearn: 0.5.0
2025-02-19 16:05:30,846:INFO:                 ray: 2.9.0
2025-02-19 16:05:30,846:INFO:            hyperopt: 0.2.7
2025-02-19 16:05:30,846:INFO:              optuna: 3.5.0
2025-02-19 16:05:30,846:INFO:               skopt: 0.9.0
2025-02-19 16:05:30,846:INFO:              mlflow: 1.30.1
2025-02-19 16:05:30,846:INFO:              gradio: 3.50.2
2025-02-19 16:05:30,846:INFO:             fastapi: 0.109.0
2025-02-19 16:05:30,846:INFO:             uvicorn: 0.25.0
2025-02-19 16:05:30,846:INFO:              m2cgen: 0.10.0
2025-02-19 16:05:30,846:INFO:           evidently: 0.2.8
2025-02-19 16:05:30,847:INFO:               fugue: 0.8.6
2025-02-19 16:05:30,847:INFO:           streamlit: Not installed
2025-02-19 16:05:30,847:INFO:             prophet: Not installed
2025-02-19 16:05:30,847:INFO:None
2025-02-19 16:05:30,847:INFO:Set up data.
2025-02-19 16:05:30,878:INFO:Set up folding strategy.
2025-02-19 16:05:30,879:INFO:Set up train/test split.
2025-02-19 16:05:30,886:INFO:Set up index.
2025-02-19 16:05:30,886:INFO:Assigning column types.
2025-02-19 16:05:30,890:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 16:05:30,942:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 16:05:30,944:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:05:30,979:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:05:30,982:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:05:31,032:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 16:05:31,033:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:05:31,062:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:05:31,065:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:05:31,065:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 16:05:31,112:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:05:31,140:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:05:31,143:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:05:31,189:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:05:31,216:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:05:31,219:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:05:31,220:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 16:05:31,296:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:05:31,299:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:05:31,374:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:05:31,378:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:05:31,379:INFO:Preparing preprocessing pipeline...
2025-02-19 16:05:31,380:INFO:Set up label encoding.
2025-02-19 16:05:31,380:INFO:Set up simple imputation.
2025-02-19 16:05:31,407:INFO:Finished creating preprocessing pipeline.
2025-02-19 16:05:31,411:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 16:05:31,411:INFO:Creating final display dataframe.
2025-02-19 16:05:31,505:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    cbc3
2025-02-19 16:05:31,582:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:05:31,585:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:05:31,659:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:05:31,661:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:05:31,663:INFO:setup() successfully completed in 0.82s...............
2025-02-19 16:05:31,664:INFO:Initializing create_model()
2025-02-19 16:05:31,664:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b17ee4ac0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 16:05:31,664:INFO:Checking exceptions
2025-02-19 16:05:31,665:INFO:Importing libraries
2025-02-19 16:05:31,666:INFO:Copying training dataset
2025-02-19 16:05:31,669:INFO:Defining folds
2025-02-19 16:05:31,670:INFO:Declaring metric variables
2025-02-19 16:05:31,670:INFO:Importing untrained model
2025-02-19 16:05:31,671:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:05:31,671:INFO:Starting cross validation
2025-02-19 16:05:31,672:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:05:33,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,129:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,136:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,168:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,175:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,182:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,238:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,243:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,251:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,279:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,286:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:33,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,654:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,662:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,669:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,719:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,734:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,742:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,748:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,756:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,763:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,773:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,780:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:34,788:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:35,617:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:35,626:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:35,634:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:35,635:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:35,640:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:35,643:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:35,652:INFO:Calculating mean and std
2025-02-19 16:05:35,652:INFO:Creating metrics dataframe
2025-02-19 16:05:35,655:INFO:Finalizing model
2025-02-19 16:05:36,160:INFO:Uploading results into container
2025-02-19 16:05:36,160:INFO:Uploading model into container now
2025-02-19 16:05:36,168:INFO:_master_model_container: 1
2025-02-19 16:05:36,168:INFO:_display_container: 2
2025-02-19 16:05:36,168:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:05:36,168:INFO:create_model() successfully completed......................................
2025-02-19 16:05:36,307:INFO:Initializing tune_model()
2025-02-19 16:05:36,307:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b17ee4ac0>)
2025-02-19 16:05:36,308:INFO:Checking exceptions
2025-02-19 16:05:36,314:INFO:Copying training dataset
2025-02-19 16:05:36,319:INFO:Checking base model
2025-02-19 16:05:36,319:INFO:Base model : Random Forest Classifier
2025-02-19 16:05:36,320:INFO:Declaring metric variables
2025-02-19 16:05:36,320:INFO:Defining Hyperparameters
2025-02-19 16:05:36,455:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 16:05:36,456:INFO:Tuning with n_jobs=-1
2025-02-19 16:05:36,456:INFO:Initializing RandomizedSearchCV
2025-02-19 16:05:38,018:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:38,018:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:38,046:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:38,123:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:39,549:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:39,554:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:39,587:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:39,604:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:40,359:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:40,395:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:40,404:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 16:05:40,404:INFO:Hyperparameter search completed
2025-02-19 16:05:40,404:INFO:SubProcess create_model() called ==================================
2025-02-19 16:05:40,405:INFO:Initializing create_model()
2025-02-19 16:05:40,405:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b17ee4ac0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f0b17ee4b50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 16:05:40,405:INFO:Checking exceptions
2025-02-19 16:05:40,405:INFO:Importing libraries
2025-02-19 16:05:40,405:INFO:Copying training dataset
2025-02-19 16:05:40,409:INFO:Defining folds
2025-02-19 16:05:40,409:INFO:Declaring metric variables
2025-02-19 16:05:40,409:INFO:Importing untrained model
2025-02-19 16:05:40,410:INFO:Declaring custom model
2025-02-19 16:05:40,410:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:05:40,411:INFO:Starting cross validation
2025-02-19 16:05:40,412:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:05:41,916:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:41,931:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:41,941:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:42,022:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:42,026:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:42,032:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:42,034:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:42,041:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:42,049:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:42,056:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:42,064:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:42,072:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,467:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,478:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,496:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,496:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,498:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,506:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,512:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,521:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,528:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,624:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,631:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:43,638:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:44,367:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:44,376:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:44,384:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:44,400:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:44,404:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:44,408:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:44,418:INFO:Calculating mean and std
2025-02-19 16:05:44,419:INFO:Creating metrics dataframe
2025-02-19 16:05:44,421:INFO:Finalizing model
2025-02-19 16:05:44,944:INFO:Uploading results into container
2025-02-19 16:05:44,945:INFO:Uploading model into container now
2025-02-19 16:05:44,946:INFO:_master_model_container: 2
2025-02-19 16:05:44,946:INFO:_display_container: 3
2025-02-19 16:05:44,946:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:05:44,946:INFO:create_model() successfully completed......................................
2025-02-19 16:05:45,071:INFO:SubProcess create_model() end ==================================
2025-02-19 16:05:45,072:INFO:choose_better activated
2025-02-19 16:05:45,072:INFO:SubProcess create_model() called ==================================
2025-02-19 16:05:45,074:INFO:Initializing create_model()
2025-02-19 16:05:45,074:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b17ee4ac0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:05:45,075:INFO:Checking exceptions
2025-02-19 16:05:45,077:INFO:Importing libraries
2025-02-19 16:05:45,077:INFO:Copying training dataset
2025-02-19 16:05:45,084:INFO:Defining folds
2025-02-19 16:05:45,084:INFO:Declaring metric variables
2025-02-19 16:05:45,084:INFO:Importing untrained model
2025-02-19 16:05:45,085:INFO:Declaring custom model
2025-02-19 16:05:45,086:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:05:45,086:INFO:Starting cross validation
2025-02-19 16:05:45,087:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:05:46,611:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,618:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,626:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,659:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,667:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,676:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,695:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,702:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,709:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,721:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,728:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:46,736:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,189:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,195:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,196:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,201:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,203:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,203:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,209:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,210:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,218:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,244:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,251:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,258:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,989:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:48,994:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:49,001:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:49,046:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:49,050:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:49,054:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:49,065:INFO:Calculating mean and std
2025-02-19 16:05:49,066:INFO:Creating metrics dataframe
2025-02-19 16:05:49,068:INFO:Finalizing model
2025-02-19 16:05:49,541:INFO:Uploading results into container
2025-02-19 16:05:49,541:INFO:Uploading model into container now
2025-02-19 16:05:49,542:INFO:_master_model_container: 3
2025-02-19 16:05:49,542:INFO:_display_container: 4
2025-02-19 16:05:49,542:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:05:49,542:INFO:create_model() successfully completed......................................
2025-02-19 16:05:49,668:INFO:SubProcess create_model() end ==================================
2025-02-19 16:05:49,669:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 16:05:49,671:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 16:05:49,672:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 16:05:49,672:INFO:choose_better completed
2025-02-19 16:05:49,673:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 16:05:49,685:INFO:_master_model_container: 3
2025-02-19 16:05:49,685:INFO:_display_container: 3
2025-02-19 16:05:49,686:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:05:49,686:INFO:tune_model() successfully completed......................................
2025-02-19 16:05:49,839:INFO:Initializing save_model()
2025-02-19 16:05:49,839:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_160435/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 16:05:49,839:INFO:Adding model into prep_pipe
2025-02-19 16:05:49,928:INFO:outputs/experiment_20250219_160435/models/tuned_model.pkl saved in current working directory
2025-02-19 16:05:49,937:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 16:05:49,937:INFO:save_model() successfully completed......................................
2025-02-19 16:05:50,069:INFO:Initializing calibrate_model()
2025-02-19 16:05:50,069:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b17ee4ac0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 16:05:50,069:INFO:Checking exceptions
2025-02-19 16:05:50,072:INFO:Preloading libraries
2025-02-19 16:05:50,073:INFO:Preparing display monitor
2025-02-19 16:05:50,075:INFO:Getting model name
2025-02-19 16:05:50,075:INFO:Base model : Random Forest Classifier
2025-02-19 16:05:50,075:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 16:05:50,076:INFO:SubProcess create_model() called ==================================
2025-02-19 16:05:50,078:INFO:Initializing create_model()
2025-02-19 16:05:50,078:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b17ee4ac0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f0b284c9d20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:05:50,078:INFO:Checking exceptions
2025-02-19 16:05:50,078:INFO:Importing libraries
2025-02-19 16:05:50,079:INFO:Copying training dataset
2025-02-19 16:05:50,087:INFO:Defining folds
2025-02-19 16:05:50,087:INFO:Declaring metric variables
2025-02-19 16:05:50,087:INFO:Importing untrained model
2025-02-19 16:05:50,087:INFO:Declaring custom model
2025-02-19 16:05:50,089:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:05:50,089:INFO:Starting cross validation
2025-02-19 16:05:50,090:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:05:56,324:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,337:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,346:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,451:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,458:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,466:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,490:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,498:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,506:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,980:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:56,998:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:05:57,014:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:02,387:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:02,411:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:02,430:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:02,626:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:02,633:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:02,641:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:03,140:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:03,149:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:03,156:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:03,429:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:03,436:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:03,443:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:06,387:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:06,395:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:06,403:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:06,542:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:06,546:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:06,549:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:06:06,553:INFO:Calculating mean and std
2025-02-19 16:06:06,554:INFO:Creating metrics dataframe
2025-02-19 16:06:06,556:INFO:Finalizing model
2025-02-19 16:06:09,150:INFO:Uploading results into container
2025-02-19 16:06:09,150:INFO:Uploading model into container now
2025-02-19 16:06:09,151:INFO:_master_model_container: 4
2025-02-19 16:06:09,151:INFO:_display_container: 4
2025-02-19 16:06:09,152:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:06:09,152:INFO:create_model() successfully completed......................................
2025-02-19 16:06:09,279:INFO:SubProcess create_model() end ==================================
2025-02-19 16:06:09,295:INFO:_master_model_container: 4
2025-02-19 16:06:09,296:INFO:_display_container: 4
2025-02-19 16:06:09,298:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:06:09,299:INFO:calibrate_model() successfully completed......................................
2025-02-19 16:06:09,434:INFO:Initializing finalize_model()
2025-02-19 16:06:09,434:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b17ee4ac0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 16:06:09,436:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:06:09,443:INFO:Initializing create_model()
2025-02-19 16:06:09,443:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b17ee4ac0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:06:09,443:INFO:Checking exceptions
2025-02-19 16:06:09,444:INFO:Importing libraries
2025-02-19 16:06:09,445:INFO:Copying training dataset
2025-02-19 16:06:09,445:INFO:Defining folds
2025-02-19 16:06:09,445:INFO:Declaring metric variables
2025-02-19 16:06:09,445:INFO:Importing untrained model
2025-02-19 16:06:09,445:INFO:Declaring custom model
2025-02-19 16:06:09,447:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:06:09,448:INFO:Cross validation set to False
2025-02-19 16:06:09,448:INFO:Fitting Model
2025-02-19 16:06:12,334:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 16:06:12,334:INFO:create_model() successfully completed......................................
2025-02-19 16:06:12,461:INFO:_master_model_container: 4
2025-02-19 16:06:12,461:INFO:_display_container: 4
2025-02-19 16:06:12,477:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 16:06:12,477:INFO:finalize_model() successfully completed......................................
2025-02-19 16:06:12,628:INFO:Initializing predict_model()
2025-02-19 16:06:12,629:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f0b17ee4ac0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f0b1518b640>)
2025-02-19 16:06:12,629:INFO:Checking exceptions
2025-02-19 16:06:12,629:INFO:Preloading libraries
2025-02-19 16:06:12,629:INFO:Set up data.
2025-02-19 16:06:12,651:INFO:Set up index.
2025-02-19 16:11:12,942:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 16:11:12,942:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 16:11:12,942:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 16:11:12,943:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 16:11:18,269:INFO:PyCaret ClassificationExperiment
2025-02-19 16:11:18,269:INFO:Logging name: clf-default-name
2025-02-19 16:11:18,269:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 16:11:18,269:INFO:version 3.3.2
2025-02-19 16:11:18,269:INFO:Initializing setup()
2025-02-19 16:11:18,269:INFO:self.USI: c023
2025-02-19 16:11:18,269:INFO:self._variable_keys: {'exp_id', 'log_plots_param', 'target_param', 'fold_groups_param', 'y', 'USI', 'gpu_n_jobs_param', '_available_plots', 'idx', 'exp_name_log', 'X', 'data', 'fold_generator', 'gpu_param', 'X_test', 'pipeline', 'fold_shuffle_param', 'is_multiclass', 'html_param', 'logging_param', 'seed', 'memory', 'fix_imbalance', 'y_train', 'X_train', 'n_jobs_param', '_ml_usecase', 'y_test'}
2025-02-19 16:11:18,270:INFO:Checking environment
2025-02-19 16:11:18,270:INFO:python_version: 3.10.12
2025-02-19 16:11:18,270:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 16:11:18,270:INFO:machine: x86_64
2025-02-19 16:11:18,271:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 16:11:18,271:INFO:Memory: svmem(total=7813279744, available=1056436224, percent=86.5, used=5747896320, free=195350528, active=3359342592, inactive=3591843840, buffers=77340672, cached=1792692224, shared=716734464, slab=335609856)
2025-02-19 16:11:18,272:INFO:Physical Core: 2
2025-02-19 16:11:18,272:INFO:Logical Core: 4
2025-02-19 16:11:18,272:INFO:Checking libraries
2025-02-19 16:11:18,272:INFO:System:
2025-02-19 16:11:18,272:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 16:11:18,272:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 16:11:18,272:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 16:11:18,273:INFO:PyCaret required dependencies:
2025-02-19 16:11:18,885:INFO:                 pip: 23.3.2
2025-02-19 16:11:18,885:INFO:          setuptools: 65.5.0
2025-02-19 16:11:18,885:INFO:             pycaret: 3.3.2
2025-02-19 16:11:18,885:INFO:             IPython: 8.20.0
2025-02-19 16:11:18,885:INFO:          ipywidgets: 8.1.1
2025-02-19 16:11:18,885:INFO:                tqdm: 4.66.1
2025-02-19 16:11:18,885:INFO:               numpy: 1.24.4
2025-02-19 16:11:18,885:INFO:              pandas: 1.5.3
2025-02-19 16:11:18,885:INFO:              jinja2: 3.1.3
2025-02-19 16:11:18,885:INFO:               scipy: 1.10.1
2025-02-19 16:11:18,885:INFO:              joblib: 1.3.2
2025-02-19 16:11:18,886:INFO:             sklearn: 1.2.2
2025-02-19 16:11:18,886:INFO:                pyod: 1.1.2
2025-02-19 16:11:18,886:INFO:            imblearn: 0.12.3
2025-02-19 16:11:18,886:INFO:   category_encoders: 2.6.3
2025-02-19 16:11:18,886:INFO:            lightgbm: 4.2.0
2025-02-19 16:11:18,886:INFO:               numba: 0.58.1
2025-02-19 16:11:18,886:INFO:            requests: 2.31.0
2025-02-19 16:11:18,886:INFO:          matplotlib: 3.6.0
2025-02-19 16:11:18,886:INFO:          scikitplot: 0.3.7
2025-02-19 16:11:18,886:INFO:         yellowbrick: 1.5
2025-02-19 16:11:18,886:INFO:              plotly: 5.18.0
2025-02-19 16:11:18,886:INFO:    plotly-resampler: Not installed
2025-02-19 16:11:18,886:INFO:             kaleido: 0.2.1
2025-02-19 16:11:18,886:INFO:           schemdraw: 0.15
2025-02-19 16:11:18,886:INFO:         statsmodels: 0.14.1
2025-02-19 16:11:18,886:INFO:              sktime: 0.21.1
2025-02-19 16:11:18,886:INFO:               tbats: 1.1.3
2025-02-19 16:11:18,886:INFO:            pmdarima: 2.0.4
2025-02-19 16:11:18,886:INFO:              psutil: 5.9.7
2025-02-19 16:11:18,886:INFO:          markupsafe: 2.1.3
2025-02-19 16:11:18,886:INFO:             pickle5: Not installed
2025-02-19 16:11:18,886:INFO:         cloudpickle: 2.2.1
2025-02-19 16:11:18,886:INFO:         deprecation: 2.1.0
2025-02-19 16:11:18,886:INFO:              xxhash: 3.4.1
2025-02-19 16:11:18,886:INFO:           wurlitzer: 3.0.3
2025-02-19 16:11:18,886:INFO:PyCaret optional dependencies:
2025-02-19 16:11:19,812:INFO:                shap: 0.44.0
2025-02-19 16:11:19,812:INFO:           interpret: 0.5.0
2025-02-19 16:11:19,812:INFO:                umap: 0.5.5
2025-02-19 16:11:19,812:INFO:     ydata_profiling: 4.6.0
2025-02-19 16:11:19,812:INFO:  explainerdashboard: 0.4.5
2025-02-19 16:11:19,812:INFO:             autoviz: 0.1.804
2025-02-19 16:11:19,812:INFO:           fairlearn: 0.7.0
2025-02-19 16:11:19,812:INFO:          deepchecks: Not installed
2025-02-19 16:11:19,812:INFO:             xgboost: 1.6.2
2025-02-19 16:11:19,812:INFO:            catboost: 1.2.2
2025-02-19 16:11:19,812:INFO:              kmodes: 0.12.2
2025-02-19 16:11:19,812:INFO:             mlxtend: 0.23.1
2025-02-19 16:11:19,812:INFO:       statsforecast: 1.5.0
2025-02-19 16:11:19,813:INFO:        tune_sklearn: 0.5.0
2025-02-19 16:11:19,813:INFO:                 ray: 2.9.0
2025-02-19 16:11:19,813:INFO:            hyperopt: 0.2.7
2025-02-19 16:11:19,813:INFO:              optuna: 3.5.0
2025-02-19 16:11:19,813:INFO:               skopt: 0.9.0
2025-02-19 16:11:19,813:INFO:              mlflow: 1.30.1
2025-02-19 16:11:19,813:INFO:              gradio: 3.50.2
2025-02-19 16:11:19,813:INFO:             fastapi: 0.109.0
2025-02-19 16:11:19,813:INFO:             uvicorn: 0.25.0
2025-02-19 16:11:19,813:INFO:              m2cgen: 0.10.0
2025-02-19 16:11:19,813:INFO:           evidently: 0.2.8
2025-02-19 16:11:19,813:INFO:               fugue: 0.8.6
2025-02-19 16:11:19,813:INFO:           streamlit: Not installed
2025-02-19 16:11:19,813:INFO:             prophet: Not installed
2025-02-19 16:11:19,813:INFO:None
2025-02-19 16:11:19,813:INFO:Set up data.
2025-02-19 16:11:19,962:INFO:Set up folding strategy.
2025-02-19 16:11:19,963:INFO:Set up train/test split.
2025-02-19 16:11:19,971:INFO:Set up index.
2025-02-19 16:11:19,971:INFO:Assigning column types.
2025-02-19 16:11:19,976:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 16:11:20,029:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 16:11:20,032:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:11:20,064:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:11:20,085:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:11:20,149:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 16:11:20,150:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:11:20,182:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:11:20,184:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:11:20,185:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 16:11:20,232:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:11:20,261:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:11:20,264:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:11:20,313:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:11:20,343:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:11:20,346:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:11:20,347:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 16:11:20,425:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:11:20,428:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:11:20,505:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:11:20,508:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:11:20,512:INFO:Preparing preprocessing pipeline...
2025-02-19 16:11:20,513:INFO:Set up label encoding.
2025-02-19 16:11:20,513:INFO:Set up simple imputation.
2025-02-19 16:11:20,540:INFO:Finished creating preprocessing pipeline.
2025-02-19 16:11:20,546:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 16:11:20,546:INFO:Creating final display dataframe.
2025-02-19 16:11:20,636:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    c023
2025-02-19 16:11:20,719:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:11:20,722:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:11:20,807:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:11:20,813:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:11:20,814:INFO:setup() successfully completed in 2.55s...............
2025-02-19 16:11:20,815:INFO:Initializing create_model()
2025-02-19 16:11:20,815:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe498f4a140>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 16:11:20,815:INFO:Checking exceptions
2025-02-19 16:11:20,817:INFO:Importing libraries
2025-02-19 16:11:20,817:INFO:Copying training dataset
2025-02-19 16:11:20,821:INFO:Defining folds
2025-02-19 16:11:20,821:INFO:Declaring metric variables
2025-02-19 16:11:20,821:INFO:Importing untrained model
2025-02-19 16:11:20,822:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:11:20,822:INFO:Starting cross validation
2025-02-19 16:11:20,823:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:11:28,046:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,074:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,100:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,290:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,302:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,319:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,464:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,506:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,514:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,629:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,637:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:28,645:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,022:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,030:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,037:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,037:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,048:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,059:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,178:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,184:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,191:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,248:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,259:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,272:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,935:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,940:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,945:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,952:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,956:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,960:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:30,972:INFO:Calculating mean and std
2025-02-19 16:11:30,974:INFO:Creating metrics dataframe
2025-02-19 16:11:30,978:INFO:Finalizing model
2025-02-19 16:11:31,478:INFO:Uploading results into container
2025-02-19 16:11:31,479:INFO:Uploading model into container now
2025-02-19 16:11:31,487:INFO:_master_model_container: 1
2025-02-19 16:11:31,487:INFO:_display_container: 2
2025-02-19 16:11:31,487:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:11:31,488:INFO:create_model() successfully completed......................................
2025-02-19 16:11:31,661:INFO:Initializing tune_model()
2025-02-19 16:11:31,661:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe498f4a140>)
2025-02-19 16:11:31,662:INFO:Checking exceptions
2025-02-19 16:11:31,668:INFO:Copying training dataset
2025-02-19 16:11:31,673:INFO:Checking base model
2025-02-19 16:11:31,673:INFO:Base model : Random Forest Classifier
2025-02-19 16:11:31,674:INFO:Declaring metric variables
2025-02-19 16:11:31,674:INFO:Defining Hyperparameters
2025-02-19 16:11:31,814:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 16:11:31,814:INFO:Tuning with n_jobs=-1
2025-02-19 16:11:31,814:INFO:Initializing RandomizedSearchCV
2025-02-19 16:11:33,381:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:33,466:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:33,498:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:33,564:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:34,880:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:35,079:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:35,137:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:35,139:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:35,673:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:35,898:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:35,908:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 16:11:35,908:INFO:Hyperparameter search completed
2025-02-19 16:11:35,908:INFO:SubProcess create_model() called ==================================
2025-02-19 16:11:35,909:INFO:Initializing create_model()
2025-02-19 16:11:35,909:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe498f4a140>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fe4860743a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 16:11:35,909:INFO:Checking exceptions
2025-02-19 16:11:35,909:INFO:Importing libraries
2025-02-19 16:11:35,909:INFO:Copying training dataset
2025-02-19 16:11:35,915:INFO:Defining folds
2025-02-19 16:11:35,916:INFO:Declaring metric variables
2025-02-19 16:11:35,916:INFO:Importing untrained model
2025-02-19 16:11:35,916:INFO:Declaring custom model
2025-02-19 16:11:35,917:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:11:35,917:INFO:Starting cross validation
2025-02-19 16:11:35,918:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:11:37,392:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,400:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,408:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,419:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,430:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,438:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,441:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,448:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,456:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,456:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,463:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:37,463:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,112:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,121:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,128:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,135:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,147:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,280:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,328:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,368:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,387:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:39,397:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:40,024:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:40,030:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:40,033:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:40,035:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:40,037:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:40,041:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:40,054:INFO:Calculating mean and std
2025-02-19 16:11:40,055:INFO:Creating metrics dataframe
2025-02-19 16:11:40,058:INFO:Finalizing model
2025-02-19 16:11:40,574:INFO:Uploading results into container
2025-02-19 16:11:40,575:INFO:Uploading model into container now
2025-02-19 16:11:40,575:INFO:_master_model_container: 2
2025-02-19 16:11:40,576:INFO:_display_container: 3
2025-02-19 16:11:40,577:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:11:40,577:INFO:create_model() successfully completed......................................
2025-02-19 16:11:40,735:INFO:SubProcess create_model() end ==================================
2025-02-19 16:11:40,735:INFO:choose_better activated
2025-02-19 16:11:40,736:INFO:SubProcess create_model() called ==================================
2025-02-19 16:11:40,737:INFO:Initializing create_model()
2025-02-19 16:11:40,737:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe498f4a140>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:11:40,738:INFO:Checking exceptions
2025-02-19 16:11:40,741:INFO:Importing libraries
2025-02-19 16:11:40,741:INFO:Copying training dataset
2025-02-19 16:11:40,752:INFO:Defining folds
2025-02-19 16:11:40,752:INFO:Declaring metric variables
2025-02-19 16:11:40,753:INFO:Importing untrained model
2025-02-19 16:11:40,753:INFO:Declaring custom model
2025-02-19 16:11:40,755:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:11:40,755:INFO:Starting cross validation
2025-02-19 16:11:40,757:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:11:42,290:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,292:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,299:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,299:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,306:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,306:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,337:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,344:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,358:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,366:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,374:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:42,383:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,834:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,842:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,850:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,854:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,862:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,870:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,881:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,889:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,905:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,907:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,913:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:43,920:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:44,604:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:44,611:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:44,617:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:44,677:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:44,682:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:44,685:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:44,691:INFO:Calculating mean and std
2025-02-19 16:11:44,692:INFO:Creating metrics dataframe
2025-02-19 16:11:44,694:INFO:Finalizing model
2025-02-19 16:11:45,161:INFO:Uploading results into container
2025-02-19 16:11:45,162:INFO:Uploading model into container now
2025-02-19 16:11:45,162:INFO:_master_model_container: 3
2025-02-19 16:11:45,162:INFO:_display_container: 4
2025-02-19 16:11:45,163:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:11:45,163:INFO:create_model() successfully completed......................................
2025-02-19 16:11:45,290:INFO:SubProcess create_model() end ==================================
2025-02-19 16:11:45,291:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 16:11:45,292:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 16:11:45,293:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 16:11:45,293:INFO:choose_better completed
2025-02-19 16:11:45,293:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 16:11:45,305:INFO:_master_model_container: 3
2025-02-19 16:11:45,305:INFO:_display_container: 3
2025-02-19 16:11:45,307:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:11:45,307:INFO:tune_model() successfully completed......................................
2025-02-19 16:11:45,452:INFO:Initializing save_model()
2025-02-19 16:11:45,452:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_161114/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 16:11:45,452:INFO:Adding model into prep_pipe
2025-02-19 16:11:45,519:INFO:outputs/experiment_20250219_161114/models/tuned_model.pkl saved in current working directory
2025-02-19 16:11:45,526:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 16:11:45,526:INFO:save_model() successfully completed......................................
2025-02-19 16:11:45,652:INFO:Initializing calibrate_model()
2025-02-19 16:11:45,652:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe498f4a140>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 16:11:45,652:INFO:Checking exceptions
2025-02-19 16:11:45,655:INFO:Preloading libraries
2025-02-19 16:11:45,655:INFO:Preparing display monitor
2025-02-19 16:11:45,657:INFO:Getting model name
2025-02-19 16:11:45,657:INFO:Base model : Random Forest Classifier
2025-02-19 16:11:45,658:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 16:11:45,658:INFO:SubProcess create_model() called ==================================
2025-02-19 16:11:45,660:INFO:Initializing create_model()
2025-02-19 16:11:45,660:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe498f4a140>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fe498b009d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:11:45,660:INFO:Checking exceptions
2025-02-19 16:11:45,660:INFO:Importing libraries
2025-02-19 16:11:45,660:INFO:Copying training dataset
2025-02-19 16:11:45,667:INFO:Defining folds
2025-02-19 16:11:45,667:INFO:Declaring metric variables
2025-02-19 16:11:45,668:INFO:Importing untrained model
2025-02-19 16:11:45,668:INFO:Declaring custom model
2025-02-19 16:11:45,669:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:11:45,670:INFO:Starting cross validation
2025-02-19 16:11:45,671:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:11:52,104:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,123:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,152:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,316:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,329:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,338:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,525:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,533:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,540:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,577:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,607:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:52,627:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:58,536:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:58,554:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:58,555:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:58,561:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:58,569:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:58,577:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:58,923:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:58,939:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:58,969:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:59,137:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:59,150:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:11:59,163:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:02,381:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:02,388:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:02,393:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:02,400:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:02,404:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:02,407:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:02,416:INFO:Calculating mean and std
2025-02-19 16:12:02,417:INFO:Creating metrics dataframe
2025-02-19 16:12:02,420:INFO:Finalizing model
2025-02-19 16:12:04,916:INFO:Uploading results into container
2025-02-19 16:12:04,917:INFO:Uploading model into container now
2025-02-19 16:12:04,918:INFO:_master_model_container: 4
2025-02-19 16:12:04,918:INFO:_display_container: 4
2025-02-19 16:12:04,920:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:12:04,920:INFO:create_model() successfully completed......................................
2025-02-19 16:12:05,055:INFO:SubProcess create_model() end ==================================
2025-02-19 16:12:05,074:INFO:_master_model_container: 4
2025-02-19 16:12:05,074:INFO:_display_container: 4
2025-02-19 16:12:05,076:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:12:05,076:INFO:calibrate_model() successfully completed......................................
2025-02-19 16:12:05,209:INFO:Initializing finalize_model()
2025-02-19 16:12:05,209:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe498f4a140>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 16:12:05,211:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:12:05,218:INFO:Initializing create_model()
2025-02-19 16:12:05,218:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe498f4a140>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:12:05,218:INFO:Checking exceptions
2025-02-19 16:12:05,219:INFO:Importing libraries
2025-02-19 16:12:05,219:INFO:Copying training dataset
2025-02-19 16:12:05,220:INFO:Defining folds
2025-02-19 16:12:05,220:INFO:Declaring metric variables
2025-02-19 16:12:05,220:INFO:Importing untrained model
2025-02-19 16:12:05,220:INFO:Declaring custom model
2025-02-19 16:12:05,221:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:12:05,223:INFO:Cross validation set to False
2025-02-19 16:12:05,223:INFO:Fitting Model
2025-02-19 16:12:08,097:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 16:12:08,098:INFO:create_model() successfully completed......................................
2025-02-19 16:12:08,225:INFO:_master_model_container: 4
2025-02-19 16:12:08,225:INFO:_display_container: 4
2025-02-19 16:12:08,240:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 16:12:08,240:INFO:finalize_model() successfully completed......................................
2025-02-19 16:12:08,386:INFO:Initializing predict_model()
2025-02-19 16:12:08,386:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe498f4a140>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7fe485dfc1f0>)
2025-02-19 16:12:08,386:INFO:Checking exceptions
2025-02-19 16:12:08,386:INFO:Preloading libraries
2025-02-19 16:12:08,387:INFO:Set up data.
2025-02-19 16:12:08,412:INFO:Set up index.
2025-02-19 16:12:09,319:INFO:PyCaret ClassificationExperiment
2025-02-19 16:12:09,319:INFO:Logging name: clf-default-name
2025-02-19 16:12:09,319:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 16:12:09,319:INFO:version 3.3.2
2025-02-19 16:12:09,319:INFO:Initializing setup()
2025-02-19 16:12:09,319:INFO:self.USI: 615c
2025-02-19 16:12:09,319:INFO:self._variable_keys: {'exp_id', 'log_plots_param', 'target_param', 'fold_groups_param', 'y', 'USI', 'gpu_n_jobs_param', '_available_plots', 'idx', 'exp_name_log', 'X', 'data', 'fold_generator', 'gpu_param', 'X_test', 'pipeline', 'fold_shuffle_param', 'is_multiclass', 'html_param', 'logging_param', 'seed', 'memory', 'fix_imbalance', 'y_train', 'X_train', 'n_jobs_param', '_ml_usecase', 'y_test'}
2025-02-19 16:12:09,319:INFO:Checking environment
2025-02-19 16:12:09,319:INFO:python_version: 3.10.12
2025-02-19 16:12:09,320:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 16:12:09,320:INFO:machine: x86_64
2025-02-19 16:12:09,320:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 16:12:09,320:INFO:Memory: svmem(total=7813279744, available=713535488, percent=90.9, used=6204874752, free=128212992, active=3155271680, inactive=3957874688, buffers=34009088, cached=1446182912, shared=603955200, slab=335441920)
2025-02-19 16:12:09,321:INFO:Physical Core: 2
2025-02-19 16:12:09,321:INFO:Logical Core: 4
2025-02-19 16:12:09,321:INFO:Checking libraries
2025-02-19 16:12:09,321:INFO:System:
2025-02-19 16:12:09,321:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 16:12:09,321:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 16:12:09,321:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 16:12:09,321:INFO:PyCaret required dependencies:
2025-02-19 16:12:09,321:INFO:                 pip: 23.3.2
2025-02-19 16:12:09,321:INFO:          setuptools: 65.5.0
2025-02-19 16:12:09,321:INFO:             pycaret: 3.3.2
2025-02-19 16:12:09,322:INFO:             IPython: 8.20.0
2025-02-19 16:12:09,322:INFO:          ipywidgets: 8.1.1
2025-02-19 16:12:09,322:INFO:                tqdm: 4.66.1
2025-02-19 16:12:09,322:INFO:               numpy: 1.24.4
2025-02-19 16:12:09,322:INFO:              pandas: 1.5.3
2025-02-19 16:12:09,322:INFO:              jinja2: 3.1.3
2025-02-19 16:12:09,322:INFO:               scipy: 1.10.1
2025-02-19 16:12:09,322:INFO:              joblib: 1.3.2
2025-02-19 16:12:09,322:INFO:             sklearn: 1.2.2
2025-02-19 16:12:09,322:INFO:                pyod: 1.1.2
2025-02-19 16:12:09,322:INFO:            imblearn: 0.12.3
2025-02-19 16:12:09,322:INFO:   category_encoders: 2.6.3
2025-02-19 16:12:09,322:INFO:            lightgbm: 4.2.0
2025-02-19 16:12:09,322:INFO:               numba: 0.58.1
2025-02-19 16:12:09,322:INFO:            requests: 2.31.0
2025-02-19 16:12:09,323:INFO:          matplotlib: 3.6.0
2025-02-19 16:12:09,323:INFO:          scikitplot: 0.3.7
2025-02-19 16:12:09,323:INFO:         yellowbrick: 1.5
2025-02-19 16:12:09,323:INFO:              plotly: 5.18.0
2025-02-19 16:12:09,323:INFO:    plotly-resampler: Not installed
2025-02-19 16:12:09,323:INFO:             kaleido: 0.2.1
2025-02-19 16:12:09,323:INFO:           schemdraw: 0.15
2025-02-19 16:12:09,323:INFO:         statsmodels: 0.14.1
2025-02-19 16:12:09,323:INFO:              sktime: 0.21.1
2025-02-19 16:12:09,323:INFO:               tbats: 1.1.3
2025-02-19 16:12:09,323:INFO:            pmdarima: 2.0.4
2025-02-19 16:12:09,323:INFO:              psutil: 5.9.7
2025-02-19 16:12:09,323:INFO:          markupsafe: 2.1.3
2025-02-19 16:12:09,323:INFO:             pickle5: Not installed
2025-02-19 16:12:09,323:INFO:         cloudpickle: 2.2.1
2025-02-19 16:12:09,324:INFO:         deprecation: 2.1.0
2025-02-19 16:12:09,324:INFO:              xxhash: 3.4.1
2025-02-19 16:12:09,324:INFO:           wurlitzer: 3.0.3
2025-02-19 16:12:09,324:INFO:PyCaret optional dependencies:
2025-02-19 16:12:09,324:INFO:                shap: 0.44.0
2025-02-19 16:12:09,324:INFO:           interpret: 0.5.0
2025-02-19 16:12:09,324:INFO:                umap: 0.5.5
2025-02-19 16:12:09,324:INFO:     ydata_profiling: 4.6.0
2025-02-19 16:12:09,324:INFO:  explainerdashboard: 0.4.5
2025-02-19 16:12:09,324:INFO:             autoviz: 0.1.804
2025-02-19 16:12:09,324:INFO:           fairlearn: 0.7.0
2025-02-19 16:12:09,324:INFO:          deepchecks: Not installed
2025-02-19 16:12:09,324:INFO:             xgboost: 1.6.2
2025-02-19 16:12:09,324:INFO:            catboost: 1.2.2
2025-02-19 16:12:09,325:INFO:              kmodes: 0.12.2
2025-02-19 16:12:09,325:INFO:             mlxtend: 0.23.1
2025-02-19 16:12:09,325:INFO:       statsforecast: 1.5.0
2025-02-19 16:12:09,325:INFO:        tune_sklearn: 0.5.0
2025-02-19 16:12:09,325:INFO:                 ray: 2.9.0
2025-02-19 16:12:09,325:INFO:            hyperopt: 0.2.7
2025-02-19 16:12:09,325:INFO:              optuna: 3.5.0
2025-02-19 16:12:09,325:INFO:               skopt: 0.9.0
2025-02-19 16:12:09,325:INFO:              mlflow: 1.30.1
2025-02-19 16:12:09,325:INFO:              gradio: 3.50.2
2025-02-19 16:12:09,325:INFO:             fastapi: 0.109.0
2025-02-19 16:12:09,325:INFO:             uvicorn: 0.25.0
2025-02-19 16:12:09,325:INFO:              m2cgen: 0.10.0
2025-02-19 16:12:09,325:INFO:           evidently: 0.2.8
2025-02-19 16:12:09,325:INFO:               fugue: 0.8.6
2025-02-19 16:12:09,325:INFO:           streamlit: Not installed
2025-02-19 16:12:09,325:INFO:             prophet: Not installed
2025-02-19 16:12:09,325:INFO:None
2025-02-19 16:12:09,325:INFO:Set up data.
2025-02-19 16:12:09,348:INFO:Set up folding strategy.
2025-02-19 16:12:09,348:INFO:Set up train/test split.
2025-02-19 16:12:09,355:INFO:Set up index.
2025-02-19 16:12:09,355:INFO:Assigning column types.
2025-02-19 16:12:09,359:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 16:12:09,406:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 16:12:09,406:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:12:09,438:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:12:09,441:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:12:09,487:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 16:12:09,488:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:12:09,517:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:12:09,520:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:12:09,521:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 16:12:09,570:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:12:09,598:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:12:09,601:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:12:09,651:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 16:12:09,681:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:12:09,684:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:12:09,684:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 16:12:09,768:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:12:09,773:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:12:09,852:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:12:09,854:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:12:09,856:INFO:Preparing preprocessing pipeline...
2025-02-19 16:12:09,857:INFO:Set up label encoding.
2025-02-19 16:12:09,857:INFO:Set up simple imputation.
2025-02-19 16:12:09,885:INFO:Finished creating preprocessing pipeline.
2025-02-19 16:12:09,890:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 16:12:09,890:INFO:Creating final display dataframe.
2025-02-19 16:12:09,985:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    615c
2025-02-19 16:12:10,060:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:12:10,064:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:12:10,139:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 16:12:10,142:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 16:12:10,144:INFO:setup() successfully completed in 0.83s...............
2025-02-19 16:12:10,144:INFO:Initializing create_model()
2025-02-19 16:12:10,144:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe485d90f70>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 16:12:10,144:INFO:Checking exceptions
2025-02-19 16:12:10,145:INFO:Importing libraries
2025-02-19 16:12:10,146:INFO:Copying training dataset
2025-02-19 16:12:10,151:INFO:Defining folds
2025-02-19 16:12:10,151:INFO:Declaring metric variables
2025-02-19 16:12:10,152:INFO:Importing untrained model
2025-02-19 16:12:10,153:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:12:10,153:INFO:Starting cross validation
2025-02-19 16:12:10,154:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:12:11,743:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,743:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,751:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,758:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,759:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,775:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,777:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,779:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,785:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,795:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,797:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:11,803:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,228:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,238:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,245:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,286:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,302:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,302:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,310:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,320:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,327:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:13,334:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:14,107:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:14,115:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:14,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:14,124:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:14,128:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:14,132:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:14,137:INFO:Calculating mean and std
2025-02-19 16:12:14,138:INFO:Creating metrics dataframe
2025-02-19 16:12:14,140:INFO:Finalizing model
2025-02-19 16:12:14,603:INFO:Uploading results into container
2025-02-19 16:12:14,604:INFO:Uploading model into container now
2025-02-19 16:12:14,614:INFO:_master_model_container: 1
2025-02-19 16:12:14,614:INFO:_display_container: 2
2025-02-19 16:12:14,614:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:12:14,614:INFO:create_model() successfully completed......................................
2025-02-19 16:12:14,755:INFO:Initializing tune_model()
2025-02-19 16:12:14,756:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe485d90f70>)
2025-02-19 16:12:14,756:INFO:Checking exceptions
2025-02-19 16:12:14,765:INFO:Copying training dataset
2025-02-19 16:12:14,770:INFO:Checking base model
2025-02-19 16:12:14,770:INFO:Base model : Random Forest Classifier
2025-02-19 16:12:14,771:INFO:Declaring metric variables
2025-02-19 16:12:14,772:INFO:Defining Hyperparameters
2025-02-19 16:12:14,904:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 16:12:14,904:INFO:Tuning with n_jobs=-1
2025-02-19 16:12:14,904:INFO:Initializing RandomizedSearchCV
2025-02-19 16:12:16,389:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:16,396:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:16,416:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:16,418:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:17,886:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:17,903:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:17,910:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:17,953:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:18,702:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:18,733:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:18,746:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 16:12:18,746:INFO:Hyperparameter search completed
2025-02-19 16:12:18,747:INFO:SubProcess create_model() called ==================================
2025-02-19 16:12:18,747:INFO:Initializing create_model()
2025-02-19 16:12:18,747:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe485d90f70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fe485e283a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 16:12:18,747:INFO:Checking exceptions
2025-02-19 16:12:18,747:INFO:Importing libraries
2025-02-19 16:12:18,748:INFO:Copying training dataset
2025-02-19 16:12:18,755:INFO:Defining folds
2025-02-19 16:12:18,755:INFO:Declaring metric variables
2025-02-19 16:12:18,755:INFO:Importing untrained model
2025-02-19 16:12:18,755:INFO:Declaring custom model
2025-02-19 16:12:18,756:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:12:18,756:INFO:Starting cross validation
2025-02-19 16:12:18,757:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:12:20,214:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,223:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,230:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,257:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,261:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,266:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,271:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,275:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,289:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,307:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,315:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:20,322:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,597:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,612:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,620:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,715:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,723:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,756:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,823:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,831:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,836:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,844:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,859:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:21,862:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:22,519:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:22,524:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:22,531:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:22,574:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:22,578:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:22,582:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:22,589:INFO:Calculating mean and std
2025-02-19 16:12:22,590:INFO:Creating metrics dataframe
2025-02-19 16:12:22,593:INFO:Finalizing model
2025-02-19 16:12:23,118:INFO:Uploading results into container
2025-02-19 16:12:23,119:INFO:Uploading model into container now
2025-02-19 16:12:23,120:INFO:_master_model_container: 2
2025-02-19 16:12:23,120:INFO:_display_container: 3
2025-02-19 16:12:23,121:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:12:23,121:INFO:create_model() successfully completed......................................
2025-02-19 16:12:23,248:INFO:SubProcess create_model() end ==================================
2025-02-19 16:12:23,248:INFO:choose_better activated
2025-02-19 16:12:23,248:INFO:SubProcess create_model() called ==================================
2025-02-19 16:12:23,250:INFO:Initializing create_model()
2025-02-19 16:12:23,250:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe485d90f70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:12:23,250:INFO:Checking exceptions
2025-02-19 16:12:23,252:INFO:Importing libraries
2025-02-19 16:12:23,252:INFO:Copying training dataset
2025-02-19 16:12:23,258:INFO:Defining folds
2025-02-19 16:12:23,259:INFO:Declaring metric variables
2025-02-19 16:12:23,259:INFO:Importing untrained model
2025-02-19 16:12:23,259:INFO:Declaring custom model
2025-02-19 16:12:23,260:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:12:23,261:INFO:Starting cross validation
2025-02-19 16:12:23,262:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:12:24,715:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,735:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,724:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,749:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,756:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,766:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,834:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,836:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,842:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,843:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,851:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:24,862:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,260:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,267:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,273:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,326:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,339:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,348:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,362:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,365:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,370:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,374:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,377:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:26,383:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:27,155:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:27,163:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:27,171:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:27,180:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:27,184:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:27,189:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:27,196:INFO:Calculating mean and std
2025-02-19 16:12:27,196:INFO:Creating metrics dataframe
2025-02-19 16:12:27,199:INFO:Finalizing model
2025-02-19 16:12:27,676:INFO:Uploading results into container
2025-02-19 16:12:27,677:INFO:Uploading model into container now
2025-02-19 16:12:27,678:INFO:_master_model_container: 3
2025-02-19 16:12:27,678:INFO:_display_container: 4
2025-02-19 16:12:27,678:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:12:27,678:INFO:create_model() successfully completed......................................
2025-02-19 16:12:27,807:INFO:SubProcess create_model() end ==================================
2025-02-19 16:12:27,809:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 16:12:27,810:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 16:12:27,811:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 16:12:27,811:INFO:choose_better completed
2025-02-19 16:12:27,811:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 16:12:27,822:INFO:_master_model_container: 3
2025-02-19 16:12:27,822:INFO:_display_container: 3
2025-02-19 16:12:27,823:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 16:12:27,823:INFO:tune_model() successfully completed......................................
2025-02-19 16:12:27,968:INFO:Initializing save_model()
2025-02-19 16:12:27,968:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_161114/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 16:12:27,968:INFO:Adding model into prep_pipe
2025-02-19 16:12:28,044:INFO:outputs/experiment_20250219_161114/models/tuned_model.pkl saved in current working directory
2025-02-19 16:12:28,051:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 16:12:28,051:INFO:save_model() successfully completed......................................
2025-02-19 16:12:28,180:INFO:Initializing calibrate_model()
2025-02-19 16:12:28,180:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe485d90f70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 16:12:28,181:INFO:Checking exceptions
2025-02-19 16:12:28,184:INFO:Preloading libraries
2025-02-19 16:12:28,184:INFO:Preparing display monitor
2025-02-19 16:12:28,186:INFO:Getting model name
2025-02-19 16:12:28,187:INFO:Base model : Random Forest Classifier
2025-02-19 16:12:28,187:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 16:12:28,187:INFO:SubProcess create_model() called ==================================
2025-02-19 16:12:28,191:INFO:Initializing create_model()
2025-02-19 16:12:28,192:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe485d90f70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fe498b00220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:12:28,192:INFO:Checking exceptions
2025-02-19 16:12:28,192:INFO:Importing libraries
2025-02-19 16:12:28,192:INFO:Copying training dataset
2025-02-19 16:12:28,200:INFO:Defining folds
2025-02-19 16:12:28,200:INFO:Declaring metric variables
2025-02-19 16:12:28,201:INFO:Importing untrained model
2025-02-19 16:12:28,201:INFO:Declaring custom model
2025-02-19 16:12:28,202:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:12:28,203:INFO:Starting cross validation
2025-02-19 16:12:28,204:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 16:12:34,639:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:34,652:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:34,659:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:34,911:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:34,918:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:34,925:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:34,974:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:34,981:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:34,988:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:35,235:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:35,272:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:35,289:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,025:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,034:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,044:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,232:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,239:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,246:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,349:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,362:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,377:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,384:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:41,393:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:45,328:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:45,334:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:45,338:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:45,432:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:45,444:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:45,455:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 16:12:45,471:INFO:Calculating mean and std
2025-02-19 16:12:45,474:INFO:Creating metrics dataframe
2025-02-19 16:12:45,479:INFO:Finalizing model
2025-02-19 16:12:47,918:INFO:Uploading results into container
2025-02-19 16:12:47,919:INFO:Uploading model into container now
2025-02-19 16:12:47,920:INFO:_master_model_container: 4
2025-02-19 16:12:47,920:INFO:_display_container: 4
2025-02-19 16:12:47,921:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:12:47,921:INFO:create_model() successfully completed......................................
2025-02-19 16:12:48,049:INFO:SubProcess create_model() end ==================================
2025-02-19 16:12:48,064:INFO:_master_model_container: 4
2025-02-19 16:12:48,064:INFO:_display_container: 4
2025-02-19 16:12:48,066:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:12:48,067:INFO:calibrate_model() successfully completed......................................
2025-02-19 16:12:48,203:INFO:Initializing finalize_model()
2025-02-19 16:12:48,204:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe485d90f70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 16:12:48,206:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 16:12:48,212:INFO:Initializing create_model()
2025-02-19 16:12:48,212:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe485d90f70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 16:12:48,212:INFO:Checking exceptions
2025-02-19 16:12:48,214:INFO:Importing libraries
2025-02-19 16:12:48,214:INFO:Copying training dataset
2025-02-19 16:12:48,214:INFO:Defining folds
2025-02-19 16:12:48,214:INFO:Declaring metric variables
2025-02-19 16:12:48,215:INFO:Importing untrained model
2025-02-19 16:12:48,215:INFO:Declaring custom model
2025-02-19 16:12:48,216:INFO:Random Forest Classifier Imported successfully
2025-02-19 16:12:48,218:INFO:Cross validation set to False
2025-02-19 16:12:48,218:INFO:Fitting Model
2025-02-19 16:12:51,223:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 16:12:51,223:INFO:create_model() successfully completed......................................
2025-02-19 16:12:51,360:INFO:_master_model_container: 4
2025-02-19 16:12:51,361:INFO:_display_container: 4
2025-02-19 16:12:51,376:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 16:12:51,376:INFO:finalize_model() successfully completed......................................
2025-02-19 16:12:51,523:INFO:Initializing predict_model()
2025-02-19 16:12:51,523:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fe485d90f70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7fe485cbb2e0>)
2025-02-19 16:12:51,523:INFO:Checking exceptions
2025-02-19 16:12:51,523:INFO:Preloading libraries
2025-02-19 16:12:51,524:INFO:Set up data.
2025-02-19 16:12:51,546:INFO:Set up index.
2025-02-19 17:04:34,891:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:04:34,891:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:04:34,891:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:04:34,891:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:04:40,511:INFO:PyCaret ClassificationExperiment
2025-02-19 17:04:40,511:INFO:Logging name: clf-default-name
2025-02-19 17:04:40,511:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 17:04:40,511:INFO:version 3.3.2
2025-02-19 17:04:40,511:INFO:Initializing setup()
2025-02-19 17:04:40,512:INFO:self.USI: dc94
2025-02-19 17:04:40,512:INFO:self._variable_keys: {'X', 'target_param', 'y', 'fold_shuffle_param', 'logging_param', 'idx', 'is_multiclass', 'seed', 'memory', 'gpu_param', 'pipeline', '_ml_usecase', 'y_test', 'fold_groups_param', '_available_plots', 'log_plots_param', 'html_param', 'data', 'fix_imbalance', 'X_test', 'n_jobs_param', 'USI', 'fold_generator', 'y_train', 'exp_name_log', 'exp_id', 'X_train', 'gpu_n_jobs_param'}
2025-02-19 17:04:40,512:INFO:Checking environment
2025-02-19 17:04:40,512:INFO:python_version: 3.10.12
2025-02-19 17:04:40,512:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 17:04:40,512:INFO:machine: x86_64
2025-02-19 17:04:40,514:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:04:40,514:INFO:Memory: svmem(total=7813279744, available=2213216256, percent=71.7, used=4675518464, free=1262190592, active=3199524864, inactive=2457092096, buffers=54648832, cached=1820921856, shared=598458368, slab=329953280)
2025-02-19 17:04:40,515:INFO:Physical Core: 2
2025-02-19 17:04:40,515:INFO:Logical Core: 4
2025-02-19 17:04:40,515:INFO:Checking libraries
2025-02-19 17:04:40,515:INFO:System:
2025-02-19 17:04:40,516:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 17:04:40,516:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 17:04:40,516:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:04:40,516:INFO:PyCaret required dependencies:
2025-02-19 17:04:41,120:INFO:                 pip: 23.3.2
2025-02-19 17:04:41,120:INFO:          setuptools: 65.5.0
2025-02-19 17:04:41,120:INFO:             pycaret: 3.3.2
2025-02-19 17:04:41,120:INFO:             IPython: 8.20.0
2025-02-19 17:04:41,120:INFO:          ipywidgets: 8.1.1
2025-02-19 17:04:41,121:INFO:                tqdm: 4.66.1
2025-02-19 17:04:41,121:INFO:               numpy: 1.24.4
2025-02-19 17:04:41,121:INFO:              pandas: 1.5.3
2025-02-19 17:04:41,121:INFO:              jinja2: 3.1.3
2025-02-19 17:04:41,121:INFO:               scipy: 1.10.1
2025-02-19 17:04:41,121:INFO:              joblib: 1.3.2
2025-02-19 17:04:41,121:INFO:             sklearn: 1.2.2
2025-02-19 17:04:41,121:INFO:                pyod: 1.1.2
2025-02-19 17:04:41,121:INFO:            imblearn: 0.12.3
2025-02-19 17:04:41,121:INFO:   category_encoders: 2.6.3
2025-02-19 17:04:41,121:INFO:            lightgbm: 4.2.0
2025-02-19 17:04:41,121:INFO:               numba: 0.58.1
2025-02-19 17:04:41,121:INFO:            requests: 2.31.0
2025-02-19 17:04:41,121:INFO:          matplotlib: 3.6.0
2025-02-19 17:04:41,121:INFO:          scikitplot: 0.3.7
2025-02-19 17:04:41,121:INFO:         yellowbrick: 1.5
2025-02-19 17:04:41,121:INFO:              plotly: 5.18.0
2025-02-19 17:04:41,121:INFO:    plotly-resampler: Not installed
2025-02-19 17:04:41,121:INFO:             kaleido: 0.2.1
2025-02-19 17:04:41,121:INFO:           schemdraw: 0.15
2025-02-19 17:04:41,121:INFO:         statsmodels: 0.14.1
2025-02-19 17:04:41,121:INFO:              sktime: 0.21.1
2025-02-19 17:04:41,121:INFO:               tbats: 1.1.3
2025-02-19 17:04:41,121:INFO:            pmdarima: 2.0.4
2025-02-19 17:04:41,122:INFO:              psutil: 5.9.7
2025-02-19 17:04:41,122:INFO:          markupsafe: 2.1.3
2025-02-19 17:04:41,122:INFO:             pickle5: Not installed
2025-02-19 17:04:41,122:INFO:         cloudpickle: 2.2.1
2025-02-19 17:04:41,122:INFO:         deprecation: 2.1.0
2025-02-19 17:04:41,122:INFO:              xxhash: 3.4.1
2025-02-19 17:04:41,122:INFO:           wurlitzer: 3.0.3
2025-02-19 17:04:41,122:INFO:PyCaret optional dependencies:
2025-02-19 17:04:42,096:INFO:                shap: 0.44.0
2025-02-19 17:04:42,096:INFO:           interpret: 0.5.0
2025-02-19 17:04:42,096:INFO:                umap: 0.5.5
2025-02-19 17:04:42,096:INFO:     ydata_profiling: 4.6.0
2025-02-19 17:04:42,096:INFO:  explainerdashboard: 0.4.5
2025-02-19 17:04:42,096:INFO:             autoviz: 0.1.804
2025-02-19 17:04:42,096:INFO:           fairlearn: 0.7.0
2025-02-19 17:04:42,096:INFO:          deepchecks: Not installed
2025-02-19 17:04:42,096:INFO:             xgboost: 1.6.2
2025-02-19 17:04:42,097:INFO:            catboost: 1.2.2
2025-02-19 17:04:42,097:INFO:              kmodes: 0.12.2
2025-02-19 17:04:42,097:INFO:             mlxtend: 0.23.1
2025-02-19 17:04:42,097:INFO:       statsforecast: 1.5.0
2025-02-19 17:04:42,097:INFO:        tune_sklearn: 0.5.0
2025-02-19 17:04:42,097:INFO:                 ray: 2.9.0
2025-02-19 17:04:42,097:INFO:            hyperopt: 0.2.7
2025-02-19 17:04:42,097:INFO:              optuna: 3.5.0
2025-02-19 17:04:42,097:INFO:               skopt: 0.9.0
2025-02-19 17:04:42,097:INFO:              mlflow: 1.30.1
2025-02-19 17:04:42,097:INFO:              gradio: 3.50.2
2025-02-19 17:04:42,097:INFO:             fastapi: 0.109.0
2025-02-19 17:04:42,098:INFO:             uvicorn: 0.25.0
2025-02-19 17:04:42,098:INFO:              m2cgen: 0.10.0
2025-02-19 17:04:42,098:INFO:           evidently: 0.2.8
2025-02-19 17:04:42,098:INFO:               fugue: 0.8.6
2025-02-19 17:04:42,098:INFO:           streamlit: Not installed
2025-02-19 17:04:42,098:INFO:             prophet: Not installed
2025-02-19 17:04:42,098:INFO:None
2025-02-19 17:04:42,098:INFO:Set up data.
2025-02-19 17:04:42,245:INFO:Set up folding strategy.
2025-02-19 17:04:42,246:INFO:Set up train/test split.
2025-02-19 17:04:42,256:INFO:Set up index.
2025-02-19 17:04:42,256:INFO:Assigning column types.
2025-02-19 17:04:42,262:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 17:04:42,316:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:04:42,321:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:04:42,357:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:04:42,387:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:04:42,458:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:04:42,459:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:04:42,487:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:04:42,490:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:04:42,490:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 17:04:42,536:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:04:42,564:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:04:42,567:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:04:42,614:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:04:42,643:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:04:42,646:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:04:42,646:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 17:04:42,719:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:04:42,722:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:04:42,797:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:04:42,800:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:04:42,802:INFO:Preparing preprocessing pipeline...
2025-02-19 17:04:42,803:INFO:Set up label encoding.
2025-02-19 17:04:42,803:INFO:Set up simple imputation.
2025-02-19 17:04:42,831:INFO:Finished creating preprocessing pipeline.
2025-02-19 17:04:42,837:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 17:04:42,837:INFO:Creating final display dataframe.
2025-02-19 17:04:42,934:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    dc94
2025-02-19 17:04:43,009:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:04:43,011:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:04:43,087:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:04:43,090:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:04:43,092:INFO:setup() successfully completed in 2.58s...............
2025-02-19 17:04:43,092:INFO:Initializing create_model()
2025-02-19 17:04:43,092:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53dcbc8a30>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 17:04:43,093:INFO:Checking exceptions
2025-02-19 17:04:43,094:INFO:Importing libraries
2025-02-19 17:04:43,094:INFO:Copying training dataset
2025-02-19 17:04:43,099:INFO:Defining folds
2025-02-19 17:04:43,099:INFO:Declaring metric variables
2025-02-19 17:04:43,100:INFO:Importing untrained model
2025-02-19 17:04:43,100:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:04:43,100:INFO:Starting cross validation
2025-02-19 17:04:43,101:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:04:49,691:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:49,721:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:49,742:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:49,933:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:49,948:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:49,979:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:50,135:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:50,161:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:50,172:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:50,190:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:50,207:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:50,215:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,301:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,307:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,369:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,375:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,388:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,790:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,805:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,812:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,908:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,917:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:51,932:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:52,529:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:52,538:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:52,546:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:52,571:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:52,575:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:52,579:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:52,583:INFO:Calculating mean and std
2025-02-19 17:04:52,585:INFO:Creating metrics dataframe
2025-02-19 17:04:52,588:INFO:Finalizing model
2025-02-19 17:04:53,095:INFO:Uploading results into container
2025-02-19 17:04:53,096:INFO:Uploading model into container now
2025-02-19 17:04:53,105:INFO:_master_model_container: 1
2025-02-19 17:04:53,105:INFO:_display_container: 2
2025-02-19 17:04:53,105:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:04:53,105:INFO:create_model() successfully completed......................................
2025-02-19 17:04:53,272:INFO:Initializing tune_model()
2025-02-19 17:04:53,272:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53dcbc8a30>)
2025-02-19 17:04:53,272:INFO:Checking exceptions
2025-02-19 17:04:53,282:INFO:Copying training dataset
2025-02-19 17:04:53,289:INFO:Checking base model
2025-02-19 17:04:53,289:INFO:Base model : Random Forest Classifier
2025-02-19 17:04:53,290:INFO:Declaring metric variables
2025-02-19 17:04:53,290:INFO:Defining Hyperparameters
2025-02-19 17:04:53,424:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 17:04:53,424:INFO:Tuning with n_jobs=-1
2025-02-19 17:04:53,424:INFO:Initializing RandomizedSearchCV
2025-02-19 17:04:54,835:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:54,844:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:54,871:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:54,984:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:56,342:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:56,380:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:56,486:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:56,605:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:57,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:57,439:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:57,448:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 17:04:57,448:INFO:Hyperparameter search completed
2025-02-19 17:04:57,448:INFO:SubProcess create_model() called ==================================
2025-02-19 17:04:57,449:INFO:Initializing create_model()
2025-02-19 17:04:57,449:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53dcbc8a30>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f53c1e19690>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 17:04:57,449:INFO:Checking exceptions
2025-02-19 17:04:57,450:INFO:Importing libraries
2025-02-19 17:04:57,450:INFO:Copying training dataset
2025-02-19 17:04:57,455:INFO:Defining folds
2025-02-19 17:04:57,455:INFO:Declaring metric variables
2025-02-19 17:04:57,455:INFO:Importing untrained model
2025-02-19 17:04:57,455:INFO:Declaring custom model
2025-02-19 17:04:57,456:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:04:57,456:INFO:Starting cross validation
2025-02-19 17:04:57,457:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:04:58,895:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,899:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,903:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,911:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,912:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,923:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,936:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,945:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,952:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,971:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,981:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:04:58,988:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,374:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,382:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,389:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,436:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,443:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,452:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,459:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,472:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,485:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,497:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,504:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:00,511:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:01,161:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:01,169:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:01,175:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:01,284:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:01,287:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:01,291:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:01,301:INFO:Calculating mean and std
2025-02-19 17:05:01,302:INFO:Creating metrics dataframe
2025-02-19 17:05:01,304:INFO:Finalizing model
2025-02-19 17:05:01,844:INFO:Uploading results into container
2025-02-19 17:05:01,845:INFO:Uploading model into container now
2025-02-19 17:05:01,845:INFO:_master_model_container: 2
2025-02-19 17:05:01,845:INFO:_display_container: 3
2025-02-19 17:05:01,846:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:05:01,846:INFO:create_model() successfully completed......................................
2025-02-19 17:05:01,971:INFO:SubProcess create_model() end ==================================
2025-02-19 17:05:01,971:INFO:choose_better activated
2025-02-19 17:05:01,971:INFO:SubProcess create_model() called ==================================
2025-02-19 17:05:01,973:INFO:Initializing create_model()
2025-02-19 17:05:01,973:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53dcbc8a30>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:05:01,973:INFO:Checking exceptions
2025-02-19 17:05:01,975:INFO:Importing libraries
2025-02-19 17:05:01,975:INFO:Copying training dataset
2025-02-19 17:05:01,982:INFO:Defining folds
2025-02-19 17:05:01,983:INFO:Declaring metric variables
2025-02-19 17:05:01,983:INFO:Importing untrained model
2025-02-19 17:05:01,983:INFO:Declaring custom model
2025-02-19 17:05:01,984:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:05:01,984:INFO:Starting cross validation
2025-02-19 17:05:01,986:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:05:03,453:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,461:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,470:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,473:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,478:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,480:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,487:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,494:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,501:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,503:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,510:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:03,518:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:04,925:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:04,933:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:04,941:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:04,977:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:04,986:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:04,993:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,020:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,029:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,036:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,043:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,050:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,058:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,765:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,772:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,777:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,842:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,846:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,849:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:05,861:INFO:Calculating mean and std
2025-02-19 17:05:05,862:INFO:Creating metrics dataframe
2025-02-19 17:05:05,864:INFO:Finalizing model
2025-02-19 17:05:06,422:INFO:Uploading results into container
2025-02-19 17:05:06,423:INFO:Uploading model into container now
2025-02-19 17:05:06,424:INFO:_master_model_container: 3
2025-02-19 17:05:06,424:INFO:_display_container: 4
2025-02-19 17:05:06,424:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:05:06,424:INFO:create_model() successfully completed......................................
2025-02-19 17:05:06,548:INFO:SubProcess create_model() end ==================================
2025-02-19 17:05:06,549:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:05:06,550:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:05:06,551:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 17:05:06,551:INFO:choose_better completed
2025-02-19 17:05:06,551:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 17:05:06,563:INFO:_master_model_container: 3
2025-02-19 17:05:06,564:INFO:_display_container: 3
2025-02-19 17:05:06,564:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:05:06,564:INFO:tune_model() successfully completed......................................
2025-02-19 17:05:06,710:INFO:Initializing save_model()
2025-02-19 17:05:06,710:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_170436/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 17:05:06,710:INFO:Adding model into prep_pipe
2025-02-19 17:05:06,775:INFO:outputs/experiment_20250219_170436/models/tuned_model.pkl saved in current working directory
2025-02-19 17:05:06,782:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 17:05:06,782:INFO:save_model() successfully completed......................................
2025-02-19 17:05:06,908:INFO:Initializing calibrate_model()
2025-02-19 17:05:06,909:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53dcbc8a30>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 17:05:06,909:INFO:Checking exceptions
2025-02-19 17:05:06,912:INFO:Preloading libraries
2025-02-19 17:05:06,912:INFO:Preparing display monitor
2025-02-19 17:05:06,914:INFO:Getting model name
2025-02-19 17:05:06,915:INFO:Base model : Random Forest Classifier
2025-02-19 17:05:06,915:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 17:05:06,915:INFO:SubProcess create_model() called ==================================
2025-02-19 17:05:06,918:INFO:Initializing create_model()
2025-02-19 17:05:06,918:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53dcbc8a30>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f53d4ec8e80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:05:06,918:INFO:Checking exceptions
2025-02-19 17:05:06,918:INFO:Importing libraries
2025-02-19 17:05:06,918:INFO:Copying training dataset
2025-02-19 17:05:06,926:INFO:Defining folds
2025-02-19 17:05:06,926:INFO:Declaring metric variables
2025-02-19 17:05:06,926:INFO:Importing untrained model
2025-02-19 17:05:06,926:INFO:Declaring custom model
2025-02-19 17:05:06,928:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:05:06,929:INFO:Starting cross validation
2025-02-19 17:05:06,930:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:05:13,315:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,322:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,330:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,369:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,385:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,393:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,431:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,438:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,444:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,459:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,467:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:13,475:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,513:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,521:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,531:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,552:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,563:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,570:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,713:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,722:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,729:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,968:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,975:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:19,982:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:23,314:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:23,321:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:23,329:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:23,386:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:23,389:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:23,397:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:23,405:INFO:Calculating mean and std
2025-02-19 17:05:23,405:INFO:Creating metrics dataframe
2025-02-19 17:05:23,407:INFO:Finalizing model
2025-02-19 17:05:25,909:INFO:Uploading results into container
2025-02-19 17:05:25,911:INFO:Uploading model into container now
2025-02-19 17:05:25,913:INFO:_master_model_container: 4
2025-02-19 17:05:25,913:INFO:_display_container: 4
2025-02-19 17:05:25,917:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:05:25,917:INFO:create_model() successfully completed......................................
2025-02-19 17:05:26,056:INFO:SubProcess create_model() end ==================================
2025-02-19 17:05:26,070:INFO:_master_model_container: 4
2025-02-19 17:05:26,070:INFO:_display_container: 4
2025-02-19 17:05:26,072:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:05:26,072:INFO:calibrate_model() successfully completed......................................
2025-02-19 17:05:26,207:INFO:Initializing finalize_model()
2025-02-19 17:05:26,207:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53dcbc8a30>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 17:05:26,209:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:05:26,216:INFO:Initializing create_model()
2025-02-19 17:05:26,216:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53dcbc8a30>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:05:26,216:INFO:Checking exceptions
2025-02-19 17:05:26,218:INFO:Importing libraries
2025-02-19 17:05:26,218:INFO:Copying training dataset
2025-02-19 17:05:26,218:INFO:Defining folds
2025-02-19 17:05:26,218:INFO:Declaring metric variables
2025-02-19 17:05:26,218:INFO:Importing untrained model
2025-02-19 17:05:26,218:INFO:Declaring custom model
2025-02-19 17:05:26,220:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:05:26,221:INFO:Cross validation set to False
2025-02-19 17:05:26,221:INFO:Fitting Model
2025-02-19 17:05:29,048:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:05:29,048:INFO:create_model() successfully completed......................................
2025-02-19 17:05:29,183:INFO:_master_model_container: 4
2025-02-19 17:05:29,183:INFO:_display_container: 4
2025-02-19 17:05:29,197:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:05:29,198:INFO:finalize_model() successfully completed......................................
2025-02-19 17:05:29,344:INFO:Initializing predict_model()
2025-02-19 17:05:29,344:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53dcbc8a30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f53c20d3130>)
2025-02-19 17:05:29,345:INFO:Checking exceptions
2025-02-19 17:05:29,345:INFO:Preloading libraries
2025-02-19 17:05:29,346:INFO:Set up data.
2025-02-19 17:05:29,372:INFO:Set up index.
2025-02-19 17:05:30,406:INFO:PyCaret ClassificationExperiment
2025-02-19 17:05:30,407:INFO:Logging name: clf-default-name
2025-02-19 17:05:30,407:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 17:05:30,407:INFO:version 3.3.2
2025-02-19 17:05:30,407:INFO:Initializing setup()
2025-02-19 17:05:30,407:INFO:self.USI: f814
2025-02-19 17:05:30,407:INFO:self._variable_keys: {'X', 'target_param', 'y', 'fold_shuffle_param', 'logging_param', 'idx', 'is_multiclass', 'seed', 'memory', 'gpu_param', 'pipeline', '_ml_usecase', 'y_test', 'fold_groups_param', '_available_plots', 'log_plots_param', 'html_param', 'data', 'fix_imbalance', 'X_test', 'n_jobs_param', 'USI', 'fold_generator', 'y_train', 'exp_name_log', 'exp_id', 'X_train', 'gpu_n_jobs_param'}
2025-02-19 17:05:30,407:INFO:Checking environment
2025-02-19 17:05:30,407:INFO:python_version: 3.10.12
2025-02-19 17:05:30,407:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 17:05:30,407:INFO:machine: x86_64
2025-02-19 17:05:30,407:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:05:30,408:INFO:Memory: svmem(total=7813279744, available=1448165376, percent=81.5, used=5449912320, free=483659776, active=3212095488, inactive=3217956864, buffers=55930880, cached=1823776768, shared=589127680, slab=332263424)
2025-02-19 17:05:30,408:INFO:Physical Core: 2
2025-02-19 17:05:30,408:INFO:Logical Core: 4
2025-02-19 17:05:30,409:INFO:Checking libraries
2025-02-19 17:05:30,409:INFO:System:
2025-02-19 17:05:30,409:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 17:05:30,409:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 17:05:30,409:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:05:30,409:INFO:PyCaret required dependencies:
2025-02-19 17:05:30,409:INFO:                 pip: 23.3.2
2025-02-19 17:05:30,409:INFO:          setuptools: 65.5.0
2025-02-19 17:05:30,409:INFO:             pycaret: 3.3.2
2025-02-19 17:05:30,409:INFO:             IPython: 8.20.0
2025-02-19 17:05:30,409:INFO:          ipywidgets: 8.1.1
2025-02-19 17:05:30,410:INFO:                tqdm: 4.66.1
2025-02-19 17:05:30,410:INFO:               numpy: 1.24.4
2025-02-19 17:05:30,410:INFO:              pandas: 1.5.3
2025-02-19 17:05:30,410:INFO:              jinja2: 3.1.3
2025-02-19 17:05:30,410:INFO:               scipy: 1.10.1
2025-02-19 17:05:30,410:INFO:              joblib: 1.3.2
2025-02-19 17:05:30,410:INFO:             sklearn: 1.2.2
2025-02-19 17:05:30,410:INFO:                pyod: 1.1.2
2025-02-19 17:05:30,410:INFO:            imblearn: 0.12.3
2025-02-19 17:05:30,410:INFO:   category_encoders: 2.6.3
2025-02-19 17:05:30,410:INFO:            lightgbm: 4.2.0
2025-02-19 17:05:30,410:INFO:               numba: 0.58.1
2025-02-19 17:05:30,410:INFO:            requests: 2.31.0
2025-02-19 17:05:30,411:INFO:          matplotlib: 3.6.0
2025-02-19 17:05:30,411:INFO:          scikitplot: 0.3.7
2025-02-19 17:05:30,411:INFO:         yellowbrick: 1.5
2025-02-19 17:05:30,411:INFO:              plotly: 5.18.0
2025-02-19 17:05:30,411:INFO:    plotly-resampler: Not installed
2025-02-19 17:05:30,411:INFO:             kaleido: 0.2.1
2025-02-19 17:05:30,411:INFO:           schemdraw: 0.15
2025-02-19 17:05:30,411:INFO:         statsmodels: 0.14.1
2025-02-19 17:05:30,411:INFO:              sktime: 0.21.1
2025-02-19 17:05:30,411:INFO:               tbats: 1.1.3
2025-02-19 17:05:30,411:INFO:            pmdarima: 2.0.4
2025-02-19 17:05:30,411:INFO:              psutil: 5.9.7
2025-02-19 17:05:30,411:INFO:          markupsafe: 2.1.3
2025-02-19 17:05:30,412:INFO:             pickle5: Not installed
2025-02-19 17:05:30,412:INFO:         cloudpickle: 2.2.1
2025-02-19 17:05:30,412:INFO:         deprecation: 2.1.0
2025-02-19 17:05:30,412:INFO:              xxhash: 3.4.1
2025-02-19 17:05:30,412:INFO:           wurlitzer: 3.0.3
2025-02-19 17:05:30,412:INFO:PyCaret optional dependencies:
2025-02-19 17:05:30,412:INFO:                shap: 0.44.0
2025-02-19 17:05:30,412:INFO:           interpret: 0.5.0
2025-02-19 17:05:30,412:INFO:                umap: 0.5.5
2025-02-19 17:05:30,412:INFO:     ydata_profiling: 4.6.0
2025-02-19 17:05:30,412:INFO:  explainerdashboard: 0.4.5
2025-02-19 17:05:30,412:INFO:             autoviz: 0.1.804
2025-02-19 17:05:30,413:INFO:           fairlearn: 0.7.0
2025-02-19 17:05:30,413:INFO:          deepchecks: Not installed
2025-02-19 17:05:30,413:INFO:             xgboost: 1.6.2
2025-02-19 17:05:30,413:INFO:            catboost: 1.2.2
2025-02-19 17:05:30,413:INFO:              kmodes: 0.12.2
2025-02-19 17:05:30,413:INFO:             mlxtend: 0.23.1
2025-02-19 17:05:30,413:INFO:       statsforecast: 1.5.0
2025-02-19 17:05:30,413:INFO:        tune_sklearn: 0.5.0
2025-02-19 17:05:30,413:INFO:                 ray: 2.9.0
2025-02-19 17:05:30,413:INFO:            hyperopt: 0.2.7
2025-02-19 17:05:30,413:INFO:              optuna: 3.5.0
2025-02-19 17:05:30,413:INFO:               skopt: 0.9.0
2025-02-19 17:05:30,413:INFO:              mlflow: 1.30.1
2025-02-19 17:05:30,414:INFO:              gradio: 3.50.2
2025-02-19 17:05:30,414:INFO:             fastapi: 0.109.0
2025-02-19 17:05:30,414:INFO:             uvicorn: 0.25.0
2025-02-19 17:05:30,414:INFO:              m2cgen: 0.10.0
2025-02-19 17:05:30,414:INFO:           evidently: 0.2.8
2025-02-19 17:05:30,414:INFO:               fugue: 0.8.6
2025-02-19 17:05:30,414:INFO:           streamlit: Not installed
2025-02-19 17:05:30,414:INFO:             prophet: Not installed
2025-02-19 17:05:30,414:INFO:None
2025-02-19 17:05:30,414:INFO:Set up data.
2025-02-19 17:05:30,436:INFO:Set up folding strategy.
2025-02-19 17:05:30,436:INFO:Set up train/test split.
2025-02-19 17:05:30,443:INFO:Set up index.
2025-02-19 17:05:30,443:INFO:Assigning column types.
2025-02-19 17:05:30,447:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 17:05:30,494:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:05:30,495:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:05:30,528:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:05:30,531:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:05:30,581:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:05:30,582:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:05:30,611:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:05:30,613:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:05:30,614:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 17:05:30,663:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:05:30,691:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:05:30,694:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:05:30,741:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:05:30,770:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:05:30,772:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:05:30,773:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 17:05:30,850:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:05:30,853:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:05:30,934:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:05:30,937:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:05:30,939:INFO:Preparing preprocessing pipeline...
2025-02-19 17:05:30,940:INFO:Set up label encoding.
2025-02-19 17:05:30,940:INFO:Set up simple imputation.
2025-02-19 17:05:30,968:INFO:Finished creating preprocessing pipeline.
2025-02-19 17:05:30,973:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 17:05:30,973:INFO:Creating final display dataframe.
2025-02-19 17:05:31,072:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    f814
2025-02-19 17:05:31,152:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:05:31,157:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:05:31,233:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:05:31,236:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:05:31,238:INFO:setup() successfully completed in 0.83s...............
2025-02-19 17:05:31,238:INFO:Initializing create_model()
2025-02-19 17:05:31,239:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53c1cbdcc0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 17:05:31,239:INFO:Checking exceptions
2025-02-19 17:05:31,240:INFO:Importing libraries
2025-02-19 17:05:31,240:INFO:Copying training dataset
2025-02-19 17:05:31,244:INFO:Defining folds
2025-02-19 17:05:31,244:INFO:Declaring metric variables
2025-02-19 17:05:31,244:INFO:Importing untrained model
2025-02-19 17:05:31,245:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:05:31,245:INFO:Starting cross validation
2025-02-19 17:05:31,246:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:05:32,641:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,648:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,654:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,738:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,745:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,752:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,769:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,776:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,784:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,817:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,824:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:32,831:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,010:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,018:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,025:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,105:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,112:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,120:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,514:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,522:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,525:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,541:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,541:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,562:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,969:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,976:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:34,982:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:35,034:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:35,037:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:35,041:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:35,054:INFO:Calculating mean and std
2025-02-19 17:05:35,055:INFO:Creating metrics dataframe
2025-02-19 17:05:35,057:INFO:Finalizing model
2025-02-19 17:05:35,592:INFO:Uploading results into container
2025-02-19 17:05:35,594:INFO:Uploading model into container now
2025-02-19 17:05:35,614:INFO:_master_model_container: 1
2025-02-19 17:05:35,614:INFO:_display_container: 2
2025-02-19 17:05:35,615:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:05:35,615:INFO:create_model() successfully completed......................................
2025-02-19 17:05:35,755:INFO:Initializing tune_model()
2025-02-19 17:05:35,755:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53c1cbdcc0>)
2025-02-19 17:05:35,755:INFO:Checking exceptions
2025-02-19 17:05:35,762:INFO:Copying training dataset
2025-02-19 17:05:35,767:INFO:Checking base model
2025-02-19 17:05:35,767:INFO:Base model : Random Forest Classifier
2025-02-19 17:05:35,768:INFO:Declaring metric variables
2025-02-19 17:05:35,768:INFO:Defining Hyperparameters
2025-02-19 17:05:35,899:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 17:05:35,900:INFO:Tuning with n_jobs=-1
2025-02-19 17:05:35,900:INFO:Initializing RandomizedSearchCV
2025-02-19 17:05:37,381:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:37,410:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:37,418:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:37,473:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:38,838:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:38,848:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:38,849:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:38,978:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:39,761:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:39,771:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:39,776:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 17:05:39,776:INFO:Hyperparameter search completed
2025-02-19 17:05:39,776:INFO:SubProcess create_model() called ==================================
2025-02-19 17:05:39,777:INFO:Initializing create_model()
2025-02-19 17:05:39,777:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53c1cbdcc0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f53c248a140>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 17:05:39,777:INFO:Checking exceptions
2025-02-19 17:05:39,777:INFO:Importing libraries
2025-02-19 17:05:39,777:INFO:Copying training dataset
2025-02-19 17:05:39,781:INFO:Defining folds
2025-02-19 17:05:39,782:INFO:Declaring metric variables
2025-02-19 17:05:39,782:INFO:Importing untrained model
2025-02-19 17:05:39,782:INFO:Declaring custom model
2025-02-19 17:05:39,783:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:05:39,783:INFO:Starting cross validation
2025-02-19 17:05:39,784:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:05:41,229:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,240:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,246:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,259:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,260:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,268:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,272:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,277:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,286:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,311:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,319:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:41,326:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,702:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,714:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,725:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,728:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,748:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,755:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,802:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,813:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,825:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,836:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,844:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:42,851:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:43,588:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:43,596:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:43,603:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:43,607:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:43,614:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:43,617:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:43,623:INFO:Calculating mean and std
2025-02-19 17:05:43,624:INFO:Creating metrics dataframe
2025-02-19 17:05:43,626:INFO:Finalizing model
2025-02-19 17:05:44,106:INFO:Uploading results into container
2025-02-19 17:05:44,106:INFO:Uploading model into container now
2025-02-19 17:05:44,107:INFO:_master_model_container: 2
2025-02-19 17:05:44,107:INFO:_display_container: 3
2025-02-19 17:05:44,107:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:05:44,107:INFO:create_model() successfully completed......................................
2025-02-19 17:05:44,231:INFO:SubProcess create_model() end ==================================
2025-02-19 17:05:44,231:INFO:choose_better activated
2025-02-19 17:05:44,232:INFO:SubProcess create_model() called ==================================
2025-02-19 17:05:44,233:INFO:Initializing create_model()
2025-02-19 17:05:44,233:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53c1cbdcc0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:05:44,233:INFO:Checking exceptions
2025-02-19 17:05:44,235:INFO:Importing libraries
2025-02-19 17:05:44,235:INFO:Copying training dataset
2025-02-19 17:05:44,243:INFO:Defining folds
2025-02-19 17:05:44,243:INFO:Declaring metric variables
2025-02-19 17:05:44,244:INFO:Importing untrained model
2025-02-19 17:05:44,244:INFO:Declaring custom model
2025-02-19 17:05:44,245:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:05:44,245:INFO:Starting cross validation
2025-02-19 17:05:44,247:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:05:45,821:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,832:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,839:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,853:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,861:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,869:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,879:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,883:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,887:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,891:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,894:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:45,899:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,299:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,304:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,310:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,310:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,318:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,326:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,348:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,363:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,385:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,392:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:47,400:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:48,167:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:48,174:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:48,180:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:48,181:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:48,186:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:48,190:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:48,194:INFO:Calculating mean and std
2025-02-19 17:05:48,194:INFO:Creating metrics dataframe
2025-02-19 17:05:48,196:INFO:Finalizing model
2025-02-19 17:05:48,664:INFO:Uploading results into container
2025-02-19 17:05:48,665:INFO:Uploading model into container now
2025-02-19 17:05:48,666:INFO:_master_model_container: 3
2025-02-19 17:05:48,666:INFO:_display_container: 4
2025-02-19 17:05:48,667:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:05:48,667:INFO:create_model() successfully completed......................................
2025-02-19 17:05:48,794:INFO:SubProcess create_model() end ==================================
2025-02-19 17:05:48,795:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:05:48,797:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:05:48,797:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 17:05:48,798:INFO:choose_better completed
2025-02-19 17:05:48,798:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 17:05:48,812:INFO:_master_model_container: 3
2025-02-19 17:05:48,812:INFO:_display_container: 3
2025-02-19 17:05:48,813:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:05:48,813:INFO:tune_model() successfully completed......................................
2025-02-19 17:05:48,954:INFO:Initializing save_model()
2025-02-19 17:05:48,954:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_170436/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 17:05:48,954:INFO:Adding model into prep_pipe
2025-02-19 17:05:49,024:INFO:outputs/experiment_20250219_170436/models/tuned_model.pkl saved in current working directory
2025-02-19 17:05:49,031:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 17:05:49,031:INFO:save_model() successfully completed......................................
2025-02-19 17:05:49,159:INFO:Initializing calibrate_model()
2025-02-19 17:05:49,159:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53c1cbdcc0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 17:05:49,159:INFO:Checking exceptions
2025-02-19 17:05:49,162:INFO:Preloading libraries
2025-02-19 17:05:49,162:INFO:Preparing display monitor
2025-02-19 17:05:49,164:INFO:Getting model name
2025-02-19 17:05:49,164:INFO:Base model : Random Forest Classifier
2025-02-19 17:05:49,165:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 17:05:49,165:INFO:SubProcess create_model() called ==================================
2025-02-19 17:05:49,168:INFO:Initializing create_model()
2025-02-19 17:05:49,168:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53c1cbdcc0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f53c22b0880>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:05:49,168:INFO:Checking exceptions
2025-02-19 17:05:49,168:INFO:Importing libraries
2025-02-19 17:05:49,168:INFO:Copying training dataset
2025-02-19 17:05:49,176:INFO:Defining folds
2025-02-19 17:05:49,176:INFO:Declaring metric variables
2025-02-19 17:05:49,176:INFO:Importing untrained model
2025-02-19 17:05:49,176:INFO:Declaring custom model
2025-02-19 17:05:49,177:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:05:49,178:INFO:Starting cross validation
2025-02-19 17:05:49,179:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:05:55,587:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,595:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,601:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,624:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,633:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,642:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,650:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,658:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,666:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,723:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,731:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:05:55,738:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:01,814:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:01,823:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:01,830:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:02,311:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:02,322:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:02,329:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:02,335:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:02,342:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:02,349:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:02,580:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:02,590:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:02,597:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:05,640:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:05,644:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:05,648:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:06,009:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:06,015:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:06,020:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:06:06,033:INFO:Calculating mean and std
2025-02-19 17:06:06,034:INFO:Creating metrics dataframe
2025-02-19 17:06:06,036:INFO:Finalizing model
2025-02-19 17:06:08,459:INFO:Uploading results into container
2025-02-19 17:06:08,460:INFO:Uploading model into container now
2025-02-19 17:06:08,461:INFO:_master_model_container: 4
2025-02-19 17:06:08,461:INFO:_display_container: 4
2025-02-19 17:06:08,462:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:06:08,462:INFO:create_model() successfully completed......................................
2025-02-19 17:06:08,593:INFO:SubProcess create_model() end ==================================
2025-02-19 17:06:08,605:INFO:_master_model_container: 4
2025-02-19 17:06:08,605:INFO:_display_container: 4
2025-02-19 17:06:08,608:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:06:08,608:INFO:calibrate_model() successfully completed......................................
2025-02-19 17:06:08,771:INFO:Initializing finalize_model()
2025-02-19 17:06:08,771:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53c1cbdcc0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 17:06:08,773:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:06:08,782:INFO:Initializing create_model()
2025-02-19 17:06:08,782:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53c1cbdcc0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:06:08,782:INFO:Checking exceptions
2025-02-19 17:06:08,785:INFO:Importing libraries
2025-02-19 17:06:08,785:INFO:Copying training dataset
2025-02-19 17:06:08,785:INFO:Defining folds
2025-02-19 17:06:08,786:INFO:Declaring metric variables
2025-02-19 17:06:08,786:INFO:Importing untrained model
2025-02-19 17:06:08,786:INFO:Declaring custom model
2025-02-19 17:06:08,790:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:06:08,792:INFO:Cross validation set to False
2025-02-19 17:06:08,792:INFO:Fitting Model
2025-02-19 17:06:12,748:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:06:12,748:INFO:create_model() successfully completed......................................
2025-02-19 17:06:12,878:INFO:_master_model_container: 4
2025-02-19 17:06:12,878:INFO:_display_container: 4
2025-02-19 17:06:12,893:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:06:12,893:INFO:finalize_model() successfully completed......................................
2025-02-19 17:06:13,043:INFO:Initializing predict_model()
2025-02-19 17:06:13,043:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f53c1cbdcc0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f53c1fd3250>)
2025-02-19 17:06:13,043:INFO:Checking exceptions
2025-02-19 17:06:13,043:INFO:Preloading libraries
2025-02-19 17:06:13,044:INFO:Set up data.
2025-02-19 17:06:13,065:INFO:Set up index.
2025-02-19 17:09:45,660:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:09:45,660:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:09:45,661:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:09:45,661:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:09:50,968:INFO:PyCaret ClassificationExperiment
2025-02-19 17:09:50,968:INFO:Logging name: clf-default-name
2025-02-19 17:09:50,968:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 17:09:50,969:INFO:version 3.3.2
2025-02-19 17:09:50,969:INFO:Initializing setup()
2025-02-19 17:09:50,969:INFO:self.USI: 499e
2025-02-19 17:09:50,969:INFO:self._variable_keys: {'logging_param', 'memory', 'target_param', 'n_jobs_param', 'USI', 'y', 'y_test', 'X_test', 'X', 'y_train', '_ml_usecase', 'fold_generator', 'log_plots_param', 'gpu_param', 'fix_imbalance', '_available_plots', 'pipeline', 'html_param', 'exp_name_log', 'fold_groups_param', 'data', 'is_multiclass', 'idx', 'exp_id', 'gpu_n_jobs_param', 'fold_shuffle_param', 'seed', 'X_train'}
2025-02-19 17:09:50,969:INFO:Checking environment
2025-02-19 17:09:50,969:INFO:python_version: 3.10.12
2025-02-19 17:09:50,969:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 17:09:50,969:INFO:machine: x86_64
2025-02-19 17:09:50,971:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:09:50,971:INFO:Memory: svmem(total=7813279744, available=2156023808, percent=72.4, used=4776779776, free=1176006656, active=3289169920, inactive=2467356672, buffers=61353984, cached=1799139328, shared=554311680, slab=329875456)
2025-02-19 17:09:50,972:INFO:Physical Core: 2
2025-02-19 17:09:50,972:INFO:Logical Core: 4
2025-02-19 17:09:50,972:INFO:Checking libraries
2025-02-19 17:09:50,972:INFO:System:
2025-02-19 17:09:50,972:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 17:09:50,972:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 17:09:50,972:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:09:50,973:INFO:PyCaret required dependencies:
2025-02-19 17:09:51,593:INFO:                 pip: 23.3.2
2025-02-19 17:09:51,593:INFO:          setuptools: 65.5.0
2025-02-19 17:09:51,593:INFO:             pycaret: 3.3.2
2025-02-19 17:09:51,593:INFO:             IPython: 8.20.0
2025-02-19 17:09:51,593:INFO:          ipywidgets: 8.1.1
2025-02-19 17:09:51,593:INFO:                tqdm: 4.66.1
2025-02-19 17:09:51,593:INFO:               numpy: 1.24.4
2025-02-19 17:09:51,593:INFO:              pandas: 1.5.3
2025-02-19 17:09:51,593:INFO:              jinja2: 3.1.3
2025-02-19 17:09:51,593:INFO:               scipy: 1.10.1
2025-02-19 17:09:51,593:INFO:              joblib: 1.3.2
2025-02-19 17:09:51,593:INFO:             sklearn: 1.2.2
2025-02-19 17:09:51,593:INFO:                pyod: 1.1.2
2025-02-19 17:09:51,594:INFO:            imblearn: 0.12.3
2025-02-19 17:09:51,594:INFO:   category_encoders: 2.6.3
2025-02-19 17:09:51,594:INFO:            lightgbm: 4.2.0
2025-02-19 17:09:51,594:INFO:               numba: 0.58.1
2025-02-19 17:09:51,594:INFO:            requests: 2.31.0
2025-02-19 17:09:51,594:INFO:          matplotlib: 3.6.0
2025-02-19 17:09:51,594:INFO:          scikitplot: 0.3.7
2025-02-19 17:09:51,594:INFO:         yellowbrick: 1.5
2025-02-19 17:09:51,594:INFO:              plotly: 5.18.0
2025-02-19 17:09:51,594:INFO:    plotly-resampler: Not installed
2025-02-19 17:09:51,594:INFO:             kaleido: 0.2.1
2025-02-19 17:09:51,594:INFO:           schemdraw: 0.15
2025-02-19 17:09:51,594:INFO:         statsmodels: 0.14.1
2025-02-19 17:09:51,594:INFO:              sktime: 0.21.1
2025-02-19 17:09:51,594:INFO:               tbats: 1.1.3
2025-02-19 17:09:51,594:INFO:            pmdarima: 2.0.4
2025-02-19 17:09:51,594:INFO:              psutil: 5.9.7
2025-02-19 17:09:51,594:INFO:          markupsafe: 2.1.3
2025-02-19 17:09:51,594:INFO:             pickle5: Not installed
2025-02-19 17:09:51,594:INFO:         cloudpickle: 2.2.1
2025-02-19 17:09:51,594:INFO:         deprecation: 2.1.0
2025-02-19 17:09:51,594:INFO:              xxhash: 3.4.1
2025-02-19 17:09:51,594:INFO:           wurlitzer: 3.0.3
2025-02-19 17:09:51,594:INFO:PyCaret optional dependencies:
2025-02-19 17:09:52,554:INFO:                shap: 0.44.0
2025-02-19 17:09:52,554:INFO:           interpret: 0.5.0
2025-02-19 17:09:52,554:INFO:                umap: 0.5.5
2025-02-19 17:09:52,554:INFO:     ydata_profiling: 4.6.0
2025-02-19 17:09:52,554:INFO:  explainerdashboard: 0.4.5
2025-02-19 17:09:52,554:INFO:             autoviz: 0.1.804
2025-02-19 17:09:52,554:INFO:           fairlearn: 0.7.0
2025-02-19 17:09:52,554:INFO:          deepchecks: Not installed
2025-02-19 17:09:52,554:INFO:             xgboost: 1.6.2
2025-02-19 17:09:52,554:INFO:            catboost: 1.2.2
2025-02-19 17:09:52,554:INFO:              kmodes: 0.12.2
2025-02-19 17:09:52,554:INFO:             mlxtend: 0.23.1
2025-02-19 17:09:52,554:INFO:       statsforecast: 1.5.0
2025-02-19 17:09:52,554:INFO:        tune_sklearn: 0.5.0
2025-02-19 17:09:52,555:INFO:                 ray: 2.9.0
2025-02-19 17:09:52,555:INFO:            hyperopt: 0.2.7
2025-02-19 17:09:52,555:INFO:              optuna: 3.5.0
2025-02-19 17:09:52,555:INFO:               skopt: 0.9.0
2025-02-19 17:09:52,555:INFO:              mlflow: 1.30.1
2025-02-19 17:09:52,555:INFO:              gradio: 3.50.2
2025-02-19 17:09:52,555:INFO:             fastapi: 0.109.0
2025-02-19 17:09:52,555:INFO:             uvicorn: 0.25.0
2025-02-19 17:09:52,555:INFO:              m2cgen: 0.10.0
2025-02-19 17:09:52,555:INFO:           evidently: 0.2.8
2025-02-19 17:09:52,555:INFO:               fugue: 0.8.6
2025-02-19 17:09:52,555:INFO:           streamlit: Not installed
2025-02-19 17:09:52,555:INFO:             prophet: Not installed
2025-02-19 17:09:52,555:INFO:None
2025-02-19 17:09:52,555:INFO:Set up data.
2025-02-19 17:09:52,707:INFO:Set up folding strategy.
2025-02-19 17:09:52,707:INFO:Set up train/test split.
2025-02-19 17:09:52,719:INFO:Set up index.
2025-02-19 17:09:52,719:INFO:Assigning column types.
2025-02-19 17:09:52,726:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 17:09:52,801:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:09:52,804:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:09:52,837:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:09:52,859:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:09:52,921:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:09:52,922:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:09:52,951:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:09:52,954:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:09:52,955:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 17:09:53,001:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:09:53,031:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:09:53,034:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:09:53,080:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:09:53,109:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:09:53,111:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:09:53,112:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 17:09:53,189:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:09:53,191:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:09:53,269:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:09:53,272:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:09:53,274:INFO:Preparing preprocessing pipeline...
2025-02-19 17:09:53,275:INFO:Set up label encoding.
2025-02-19 17:09:53,275:INFO:Set up simple imputation.
2025-02-19 17:09:53,303:INFO:Finished creating preprocessing pipeline.
2025-02-19 17:09:53,309:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 17:09:53,309:INFO:Creating final display dataframe.
2025-02-19 17:09:53,447:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    499e
2025-02-19 17:09:53,526:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:09:53,529:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:09:53,602:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:09:53,605:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:09:53,609:INFO:setup() successfully completed in 2.64s...............
2025-02-19 17:09:53,610:INFO:Initializing create_model()
2025-02-19 17:09:53,610:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efda3ca0b80>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 17:09:53,610:INFO:Checking exceptions
2025-02-19 17:09:53,611:INFO:Importing libraries
2025-02-19 17:09:53,612:INFO:Copying training dataset
2025-02-19 17:09:53,615:INFO:Defining folds
2025-02-19 17:09:53,616:INFO:Declaring metric variables
2025-02-19 17:09:53,616:INFO:Importing untrained model
2025-02-19 17:09:53,616:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:09:53,617:INFO:Starting cross validation
2025-02-19 17:09:53,617:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:10:00,693:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:00,704:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:00,731:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:00,761:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:00,770:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:00,782:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:01,118:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:01,118:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:01,131:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:01,134:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:01,141:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:01,148:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,091:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,128:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,423:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,486:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,528:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,741:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,746:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,748:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,755:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,756:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:02,763:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:03,332:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:03,341:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:03,348:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:03,408:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:03,412:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:03,416:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:03,425:INFO:Calculating mean and std
2025-02-19 17:10:03,426:INFO:Creating metrics dataframe
2025-02-19 17:10:03,429:INFO:Finalizing model
2025-02-19 17:10:03,907:INFO:Uploading results into container
2025-02-19 17:10:03,908:INFO:Uploading model into container now
2025-02-19 17:10:03,915:INFO:_master_model_container: 1
2025-02-19 17:10:03,915:INFO:_display_container: 2
2025-02-19 17:10:03,916:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:10:03,916:INFO:create_model() successfully completed......................................
2025-02-19 17:10:04,084:INFO:Initializing tune_model()
2025-02-19 17:10:04,084:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efda3ca0b80>)
2025-02-19 17:10:04,084:INFO:Checking exceptions
2025-02-19 17:10:04,092:INFO:Copying training dataset
2025-02-19 17:10:04,096:INFO:Checking base model
2025-02-19 17:10:04,097:INFO:Base model : Random Forest Classifier
2025-02-19 17:10:04,097:INFO:Declaring metric variables
2025-02-19 17:10:04,098:INFO:Defining Hyperparameters
2025-02-19 17:10:04,233:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 17:10:04,233:INFO:Tuning with n_jobs=-1
2025-02-19 17:10:04,234:INFO:Initializing RandomizedSearchCV
2025-02-19 17:10:05,733:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:05,769:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:05,790:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:05,790:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:07,229:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:07,254:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:07,266:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:07,292:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:08,069:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:08,081:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:08,093:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 17:10:08,093:INFO:Hyperparameter search completed
2025-02-19 17:10:08,093:INFO:SubProcess create_model() called ==================================
2025-02-19 17:10:08,094:INFO:Initializing create_model()
2025-02-19 17:10:08,094:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efda3ca0b80>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7efd8cd3a0e0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 17:10:08,094:INFO:Checking exceptions
2025-02-19 17:10:08,094:INFO:Importing libraries
2025-02-19 17:10:08,094:INFO:Copying training dataset
2025-02-19 17:10:08,098:INFO:Defining folds
2025-02-19 17:10:08,098:INFO:Declaring metric variables
2025-02-19 17:10:08,099:INFO:Importing untrained model
2025-02-19 17:10:08,099:INFO:Declaring custom model
2025-02-19 17:10:08,099:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:10:08,100:INFO:Starting cross validation
2025-02-19 17:10:08,101:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:10:09,576:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,585:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,589:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,593:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,596:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,603:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,611:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,618:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,632:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,660:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,667:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:09,674:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,075:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,082:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,088:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,098:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,110:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,118:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,125:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,133:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,140:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,160:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,167:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,174:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,983:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,991:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:11,996:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:12,046:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:12,050:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:12,053:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:12,062:INFO:Calculating mean and std
2025-02-19 17:10:12,063:INFO:Creating metrics dataframe
2025-02-19 17:10:12,065:INFO:Finalizing model
2025-02-19 17:10:12,612:INFO:Uploading results into container
2025-02-19 17:10:12,612:INFO:Uploading model into container now
2025-02-19 17:10:12,613:INFO:_master_model_container: 2
2025-02-19 17:10:12,613:INFO:_display_container: 3
2025-02-19 17:10:12,613:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:10:12,613:INFO:create_model() successfully completed......................................
2025-02-19 17:10:12,739:INFO:SubProcess create_model() end ==================================
2025-02-19 17:10:12,740:INFO:choose_better activated
2025-02-19 17:10:12,740:INFO:SubProcess create_model() called ==================================
2025-02-19 17:10:12,741:INFO:Initializing create_model()
2025-02-19 17:10:12,741:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efda3ca0b80>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:10:12,741:INFO:Checking exceptions
2025-02-19 17:10:12,743:INFO:Importing libraries
2025-02-19 17:10:12,743:INFO:Copying training dataset
2025-02-19 17:10:12,750:INFO:Defining folds
2025-02-19 17:10:12,750:INFO:Declaring metric variables
2025-02-19 17:10:12,751:INFO:Importing untrained model
2025-02-19 17:10:12,751:INFO:Declaring custom model
2025-02-19 17:10:12,752:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:10:12,752:INFO:Starting cross validation
2025-02-19 17:10:12,753:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:10:14,209:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,218:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,225:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,252:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,258:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,261:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,265:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,270:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,272:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,298:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,305:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:14,313:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,672:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,679:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,685:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,758:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,765:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,773:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,814:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,827:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,834:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,847:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,853:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:15,860:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:16,564:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:16,568:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:16,575:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:16,605:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:16,609:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:16,612:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:16,625:INFO:Calculating mean and std
2025-02-19 17:10:16,625:INFO:Creating metrics dataframe
2025-02-19 17:10:16,627:INFO:Finalizing model
2025-02-19 17:10:17,113:INFO:Uploading results into container
2025-02-19 17:10:17,114:INFO:Uploading model into container now
2025-02-19 17:10:17,115:INFO:_master_model_container: 3
2025-02-19 17:10:17,115:INFO:_display_container: 4
2025-02-19 17:10:17,115:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:10:17,115:INFO:create_model() successfully completed......................................
2025-02-19 17:10:17,238:INFO:SubProcess create_model() end ==================================
2025-02-19 17:10:17,239:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:10:17,240:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:10:17,241:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 17:10:17,241:INFO:choose_better completed
2025-02-19 17:10:17,241:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 17:10:17,254:INFO:_master_model_container: 3
2025-02-19 17:10:17,254:INFO:_display_container: 3
2025-02-19 17:10:17,255:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:10:17,255:INFO:tune_model() successfully completed......................................
2025-02-19 17:10:17,400:INFO:Initializing save_model()
2025-02-19 17:10:17,400:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_170946/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 17:10:17,400:INFO:Adding model into prep_pipe
2025-02-19 17:10:17,471:INFO:outputs/experiment_20250219_170946/models/tuned_model.pkl saved in current working directory
2025-02-19 17:10:17,477:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 17:10:17,478:INFO:save_model() successfully completed......................................
2025-02-19 17:10:17,606:INFO:Initializing calibrate_model()
2025-02-19 17:10:17,606:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efda3ca0b80>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 17:10:17,606:INFO:Checking exceptions
2025-02-19 17:10:17,609:INFO:Preloading libraries
2025-02-19 17:10:17,609:INFO:Preparing display monitor
2025-02-19 17:10:17,611:INFO:Getting model name
2025-02-19 17:10:17,612:INFO:Base model : Random Forest Classifier
2025-02-19 17:10:17,612:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 17:10:17,612:INFO:SubProcess create_model() called ==================================
2025-02-19 17:10:17,614:INFO:Initializing create_model()
2025-02-19 17:10:17,614:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efda3ca0b80>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7efd93193880>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:10:17,615:INFO:Checking exceptions
2025-02-19 17:10:17,615:INFO:Importing libraries
2025-02-19 17:10:17,615:INFO:Copying training dataset
2025-02-19 17:10:17,622:INFO:Defining folds
2025-02-19 17:10:17,622:INFO:Declaring metric variables
2025-02-19 17:10:17,622:INFO:Importing untrained model
2025-02-19 17:10:17,622:INFO:Declaring custom model
2025-02-19 17:10:17,624:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:10:17,624:INFO:Starting cross validation
2025-02-19 17:10:17,626:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:10:24,053:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,061:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,068:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,123:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,135:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,139:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,145:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,147:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,154:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,320:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,332:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:24,350:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,153:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,158:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,165:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,283:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,297:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,313:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,347:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,355:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,398:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,891:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,898:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:30,904:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:33,992:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:34,000:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:34,008:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:34,109:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:34,113:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:34,116:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:34,126:INFO:Calculating mean and std
2025-02-19 17:10:34,127:INFO:Creating metrics dataframe
2025-02-19 17:10:34,129:INFO:Finalizing model
2025-02-19 17:10:36,718:INFO:Uploading results into container
2025-02-19 17:10:36,719:INFO:Uploading model into container now
2025-02-19 17:10:36,720:INFO:_master_model_container: 4
2025-02-19 17:10:36,720:INFO:_display_container: 4
2025-02-19 17:10:36,722:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:10:36,722:INFO:create_model() successfully completed......................................
2025-02-19 17:10:36,850:INFO:SubProcess create_model() end ==================================
2025-02-19 17:10:36,866:INFO:_master_model_container: 4
2025-02-19 17:10:36,866:INFO:_display_container: 4
2025-02-19 17:10:36,868:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:10:36,868:INFO:calibrate_model() successfully completed......................................
2025-02-19 17:10:37,010:INFO:Initializing finalize_model()
2025-02-19 17:10:37,011:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efda3ca0b80>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 17:10:37,013:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:10:37,019:INFO:Initializing create_model()
2025-02-19 17:10:37,019:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efda3ca0b80>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:10:37,019:INFO:Checking exceptions
2025-02-19 17:10:37,022:INFO:Importing libraries
2025-02-19 17:10:37,022:INFO:Copying training dataset
2025-02-19 17:10:37,022:INFO:Defining folds
2025-02-19 17:10:37,023:INFO:Declaring metric variables
2025-02-19 17:10:37,023:INFO:Importing untrained model
2025-02-19 17:10:37,023:INFO:Declaring custom model
2025-02-19 17:10:37,025:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:10:37,026:INFO:Cross validation set to False
2025-02-19 17:10:37,026:INFO:Fitting Model
2025-02-19 17:10:39,775:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:10:39,775:INFO:create_model() successfully completed......................................
2025-02-19 17:10:39,899:INFO:_master_model_container: 4
2025-02-19 17:10:39,899:INFO:_display_container: 4
2025-02-19 17:10:39,914:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:10:39,914:INFO:finalize_model() successfully completed......................................
2025-02-19 17:10:40,069:INFO:Initializing predict_model()
2025-02-19 17:10:40,069:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efda3ca0b80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7efd8d1f0310>)
2025-02-19 17:10:40,069:INFO:Checking exceptions
2025-02-19 17:10:40,070:INFO:Preloading libraries
2025-02-19 17:10:40,070:INFO:Set up data.
2025-02-19 17:10:40,103:INFO:Set up index.
2025-02-19 17:10:41,119:INFO:PyCaret ClassificationExperiment
2025-02-19 17:10:41,120:INFO:Logging name: clf-default-name
2025-02-19 17:10:41,120:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 17:10:41,120:INFO:version 3.3.2
2025-02-19 17:10:41,120:INFO:Initializing setup()
2025-02-19 17:10:41,120:INFO:self.USI: 5802
2025-02-19 17:10:41,120:INFO:self._variable_keys: {'logging_param', 'memory', 'target_param', 'n_jobs_param', 'USI', 'y', 'y_test', 'X_test', 'X', 'y_train', '_ml_usecase', 'fold_generator', 'log_plots_param', 'gpu_param', 'fix_imbalance', '_available_plots', 'pipeline', 'html_param', 'exp_name_log', 'fold_groups_param', 'data', 'is_multiclass', 'idx', 'exp_id', 'gpu_n_jobs_param', 'fold_shuffle_param', 'seed', 'X_train'}
2025-02-19 17:10:41,120:INFO:Checking environment
2025-02-19 17:10:41,120:INFO:python_version: 3.10.12
2025-02-19 17:10:41,120:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 17:10:41,120:INFO:machine: x86_64
2025-02-19 17:10:41,120:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:10:41,120:INFO:Memory: svmem(total=7813279744, available=1410850816, percent=81.9, used=5530861568, free=427294720, active=3297370112, inactive=3256168448, buffers=61788160, cached=1793335296, shared=545443840, slab=332103680)
2025-02-19 17:10:41,121:INFO:Physical Core: 2
2025-02-19 17:10:41,121:INFO:Logical Core: 4
2025-02-19 17:10:41,121:INFO:Checking libraries
2025-02-19 17:10:41,121:INFO:System:
2025-02-19 17:10:41,121:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 17:10:41,121:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 17:10:41,121:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:10:41,121:INFO:PyCaret required dependencies:
2025-02-19 17:10:41,121:INFO:                 pip: 23.3.2
2025-02-19 17:10:41,121:INFO:          setuptools: 65.5.0
2025-02-19 17:10:41,121:INFO:             pycaret: 3.3.2
2025-02-19 17:10:41,121:INFO:             IPython: 8.20.0
2025-02-19 17:10:41,121:INFO:          ipywidgets: 8.1.1
2025-02-19 17:10:41,121:INFO:                tqdm: 4.66.1
2025-02-19 17:10:41,121:INFO:               numpy: 1.24.4
2025-02-19 17:10:41,121:INFO:              pandas: 1.5.3
2025-02-19 17:10:41,121:INFO:              jinja2: 3.1.3
2025-02-19 17:10:41,121:INFO:               scipy: 1.10.1
2025-02-19 17:10:41,121:INFO:              joblib: 1.3.2
2025-02-19 17:10:41,122:INFO:             sklearn: 1.2.2
2025-02-19 17:10:41,122:INFO:                pyod: 1.1.2
2025-02-19 17:10:41,122:INFO:            imblearn: 0.12.3
2025-02-19 17:10:41,122:INFO:   category_encoders: 2.6.3
2025-02-19 17:10:41,122:INFO:            lightgbm: 4.2.0
2025-02-19 17:10:41,122:INFO:               numba: 0.58.1
2025-02-19 17:10:41,122:INFO:            requests: 2.31.0
2025-02-19 17:10:41,122:INFO:          matplotlib: 3.6.0
2025-02-19 17:10:41,122:INFO:          scikitplot: 0.3.7
2025-02-19 17:10:41,122:INFO:         yellowbrick: 1.5
2025-02-19 17:10:41,122:INFO:              plotly: 5.18.0
2025-02-19 17:10:41,122:INFO:    plotly-resampler: Not installed
2025-02-19 17:10:41,122:INFO:             kaleido: 0.2.1
2025-02-19 17:10:41,122:INFO:           schemdraw: 0.15
2025-02-19 17:10:41,122:INFO:         statsmodels: 0.14.1
2025-02-19 17:10:41,122:INFO:              sktime: 0.21.1
2025-02-19 17:10:41,122:INFO:               tbats: 1.1.3
2025-02-19 17:10:41,122:INFO:            pmdarima: 2.0.4
2025-02-19 17:10:41,122:INFO:              psutil: 5.9.7
2025-02-19 17:10:41,122:INFO:          markupsafe: 2.1.3
2025-02-19 17:10:41,122:INFO:             pickle5: Not installed
2025-02-19 17:10:41,122:INFO:         cloudpickle: 2.2.1
2025-02-19 17:10:41,122:INFO:         deprecation: 2.1.0
2025-02-19 17:10:41,123:INFO:              xxhash: 3.4.1
2025-02-19 17:10:41,123:INFO:           wurlitzer: 3.0.3
2025-02-19 17:10:41,123:INFO:PyCaret optional dependencies:
2025-02-19 17:10:41,123:INFO:                shap: 0.44.0
2025-02-19 17:10:41,123:INFO:           interpret: 0.5.0
2025-02-19 17:10:41,123:INFO:                umap: 0.5.5
2025-02-19 17:10:41,123:INFO:     ydata_profiling: 4.6.0
2025-02-19 17:10:41,123:INFO:  explainerdashboard: 0.4.5
2025-02-19 17:10:41,123:INFO:             autoviz: 0.1.804
2025-02-19 17:10:41,123:INFO:           fairlearn: 0.7.0
2025-02-19 17:10:41,123:INFO:          deepchecks: Not installed
2025-02-19 17:10:41,123:INFO:             xgboost: 1.6.2
2025-02-19 17:10:41,123:INFO:            catboost: 1.2.2
2025-02-19 17:10:41,123:INFO:              kmodes: 0.12.2
2025-02-19 17:10:41,123:INFO:             mlxtend: 0.23.1
2025-02-19 17:10:41,123:INFO:       statsforecast: 1.5.0
2025-02-19 17:10:41,123:INFO:        tune_sklearn: 0.5.0
2025-02-19 17:10:41,123:INFO:                 ray: 2.9.0
2025-02-19 17:10:41,123:INFO:            hyperopt: 0.2.7
2025-02-19 17:10:41,123:INFO:              optuna: 3.5.0
2025-02-19 17:10:41,123:INFO:               skopt: 0.9.0
2025-02-19 17:10:41,123:INFO:              mlflow: 1.30.1
2025-02-19 17:10:41,123:INFO:              gradio: 3.50.2
2025-02-19 17:10:41,123:INFO:             fastapi: 0.109.0
2025-02-19 17:10:41,123:INFO:             uvicorn: 0.25.0
2025-02-19 17:10:41,123:INFO:              m2cgen: 0.10.0
2025-02-19 17:10:41,124:INFO:           evidently: 0.2.8
2025-02-19 17:10:41,124:INFO:               fugue: 0.8.6
2025-02-19 17:10:41,124:INFO:           streamlit: Not installed
2025-02-19 17:10:41,124:INFO:             prophet: Not installed
2025-02-19 17:10:41,124:INFO:None
2025-02-19 17:10:41,124:INFO:Set up data.
2025-02-19 17:10:41,145:INFO:Set up folding strategy.
2025-02-19 17:10:41,145:INFO:Set up train/test split.
2025-02-19 17:10:41,152:INFO:Set up index.
2025-02-19 17:10:41,152:INFO:Assigning column types.
2025-02-19 17:10:41,156:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 17:10:41,207:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:10:41,209:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:10:41,242:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:10:41,246:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:10:41,294:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:10:41,294:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:10:41,323:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:10:41,326:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:10:41,326:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 17:10:41,383:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:10:41,412:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:10:41,415:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:10:41,462:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:10:41,490:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:10:41,493:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:10:41,494:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 17:10:41,570:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:10:41,573:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:10:41,650:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:10:41,653:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:10:41,654:INFO:Preparing preprocessing pipeline...
2025-02-19 17:10:41,655:INFO:Set up label encoding.
2025-02-19 17:10:41,655:INFO:Set up simple imputation.
2025-02-19 17:10:41,683:INFO:Finished creating preprocessing pipeline.
2025-02-19 17:10:41,689:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 17:10:41,689:INFO:Creating final display dataframe.
2025-02-19 17:10:41,783:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    5802
2025-02-19 17:10:41,858:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:10:41,861:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:10:41,943:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:10:41,946:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:10:41,948:INFO:setup() successfully completed in 0.83s...............
2025-02-19 17:10:41,949:INFO:Initializing create_model()
2025-02-19 17:10:41,949:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efd8cfd7c70>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 17:10:41,949:INFO:Checking exceptions
2025-02-19 17:10:41,950:INFO:Importing libraries
2025-02-19 17:10:41,950:INFO:Copying training dataset
2025-02-19 17:10:41,954:INFO:Defining folds
2025-02-19 17:10:41,955:INFO:Declaring metric variables
2025-02-19 17:10:41,955:INFO:Importing untrained model
2025-02-19 17:10:41,955:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:10:41,956:INFO:Starting cross validation
2025-02-19 17:10:41,957:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:10:43,535:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,551:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,562:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,566:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,569:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,572:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,576:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,581:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,592:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,612:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,619:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:43,627:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,031:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,035:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,041:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,046:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,048:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,056:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,063:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,070:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,078:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,108:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,115:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,872:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,880:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,888:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,946:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,950:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,954:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:45,959:INFO:Calculating mean and std
2025-02-19 17:10:45,960:INFO:Creating metrics dataframe
2025-02-19 17:10:45,963:INFO:Finalizing model
2025-02-19 17:10:46,463:INFO:Uploading results into container
2025-02-19 17:10:46,464:INFO:Uploading model into container now
2025-02-19 17:10:46,471:INFO:_master_model_container: 1
2025-02-19 17:10:46,471:INFO:_display_container: 2
2025-02-19 17:10:46,471:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:10:46,471:INFO:create_model() successfully completed......................................
2025-02-19 17:10:46,609:INFO:Initializing tune_model()
2025-02-19 17:10:46,609:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efd8cfd7c70>)
2025-02-19 17:10:46,610:INFO:Checking exceptions
2025-02-19 17:10:46,617:INFO:Copying training dataset
2025-02-19 17:10:46,621:INFO:Checking base model
2025-02-19 17:10:46,621:INFO:Base model : Random Forest Classifier
2025-02-19 17:10:46,622:INFO:Declaring metric variables
2025-02-19 17:10:46,622:INFO:Defining Hyperparameters
2025-02-19 17:10:46,758:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 17:10:46,758:INFO:Tuning with n_jobs=-1
2025-02-19 17:10:46,758:INFO:Initializing RandomizedSearchCV
2025-02-19 17:10:48,217:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:48,242:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:48,266:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:48,277:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:49,700:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:49,741:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:49,753:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:49,770:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:50,548:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:50,559:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:50,563:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 17:10:50,563:INFO:Hyperparameter search completed
2025-02-19 17:10:50,563:INFO:SubProcess create_model() called ==================================
2025-02-19 17:10:50,564:INFO:Initializing create_model()
2025-02-19 17:10:50,564:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efd8cfd7c70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7efd8d100940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 17:10:50,564:INFO:Checking exceptions
2025-02-19 17:10:50,564:INFO:Importing libraries
2025-02-19 17:10:50,565:INFO:Copying training dataset
2025-02-19 17:10:50,570:INFO:Defining folds
2025-02-19 17:10:50,570:INFO:Declaring metric variables
2025-02-19 17:10:50,570:INFO:Importing untrained model
2025-02-19 17:10:50,570:INFO:Declaring custom model
2025-02-19 17:10:50,571:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:10:50,572:INFO:Starting cross validation
2025-02-19 17:10:50,573:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:10:51,946:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:51,953:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:51,961:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:52,035:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:52,055:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:52,084:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:52,181:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:52,186:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:52,188:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:52,193:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:52,195:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:52,200:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,570:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,579:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,592:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,645:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,653:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,660:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,683:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,694:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,703:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,709:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,715:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:53,723:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:54,469:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:54,478:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:54,485:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:54,522:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:54,533:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:54,542:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:54,557:INFO:Calculating mean and std
2025-02-19 17:10:54,558:INFO:Creating metrics dataframe
2025-02-19 17:10:54,561:INFO:Finalizing model
2025-02-19 17:10:55,070:INFO:Uploading results into container
2025-02-19 17:10:55,071:INFO:Uploading model into container now
2025-02-19 17:10:55,071:INFO:_master_model_container: 2
2025-02-19 17:10:55,072:INFO:_display_container: 3
2025-02-19 17:10:55,072:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:10:55,072:INFO:create_model() successfully completed......................................
2025-02-19 17:10:55,197:INFO:SubProcess create_model() end ==================================
2025-02-19 17:10:55,197:INFO:choose_better activated
2025-02-19 17:10:55,197:INFO:SubProcess create_model() called ==================================
2025-02-19 17:10:55,199:INFO:Initializing create_model()
2025-02-19 17:10:55,199:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efd8cfd7c70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:10:55,199:INFO:Checking exceptions
2025-02-19 17:10:55,201:INFO:Importing libraries
2025-02-19 17:10:55,201:INFO:Copying training dataset
2025-02-19 17:10:55,208:INFO:Defining folds
2025-02-19 17:10:55,208:INFO:Declaring metric variables
2025-02-19 17:10:55,209:INFO:Importing untrained model
2025-02-19 17:10:55,209:INFO:Declaring custom model
2025-02-19 17:10:55,210:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:10:55,210:INFO:Starting cross validation
2025-02-19 17:10:55,212:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:10:56,732:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,733:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,739:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,744:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,745:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,753:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,753:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,761:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,763:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,767:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,768:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:56,770:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,233:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,251:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,258:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,366:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,376:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,454:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,462:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,470:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,474:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,481:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:58,523:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:59,241:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:59,245:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:59,252:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:59,299:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:59,303:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:59,307:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:10:59,317:INFO:Calculating mean and std
2025-02-19 17:10:59,318:INFO:Creating metrics dataframe
2025-02-19 17:10:59,320:INFO:Finalizing model
2025-02-19 17:10:59,850:INFO:Uploading results into container
2025-02-19 17:10:59,851:INFO:Uploading model into container now
2025-02-19 17:10:59,852:INFO:_master_model_container: 3
2025-02-19 17:10:59,852:INFO:_display_container: 4
2025-02-19 17:10:59,853:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:10:59,853:INFO:create_model() successfully completed......................................
2025-02-19 17:10:59,976:INFO:SubProcess create_model() end ==================================
2025-02-19 17:10:59,977:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:10:59,978:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:10:59,979:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 17:10:59,979:INFO:choose_better completed
2025-02-19 17:10:59,979:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 17:10:59,992:INFO:_master_model_container: 3
2025-02-19 17:10:59,992:INFO:_display_container: 3
2025-02-19 17:10:59,993:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:10:59,993:INFO:tune_model() successfully completed......................................
2025-02-19 17:11:00,140:INFO:Initializing save_model()
2025-02-19 17:11:00,140:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_170946/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 17:11:00,140:INFO:Adding model into prep_pipe
2025-02-19 17:11:00,225:INFO:outputs/experiment_20250219_170946/models/tuned_model.pkl saved in current working directory
2025-02-19 17:11:00,233:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 17:11:00,233:INFO:save_model() successfully completed......................................
2025-02-19 17:11:00,361:INFO:Initializing calibrate_model()
2025-02-19 17:11:00,361:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efd8cfd7c70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 17:11:00,362:INFO:Checking exceptions
2025-02-19 17:11:00,364:INFO:Preloading libraries
2025-02-19 17:11:00,364:INFO:Preparing display monitor
2025-02-19 17:11:00,366:INFO:Getting model name
2025-02-19 17:11:00,366:INFO:Base model : Random Forest Classifier
2025-02-19 17:11:00,367:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 17:11:00,367:INFO:SubProcess create_model() called ==================================
2025-02-19 17:11:00,369:INFO:Initializing create_model()
2025-02-19 17:11:00,369:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efd8cfd7c70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7efda01ce140>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:11:00,369:INFO:Checking exceptions
2025-02-19 17:11:00,369:INFO:Importing libraries
2025-02-19 17:11:00,369:INFO:Copying training dataset
2025-02-19 17:11:00,377:INFO:Defining folds
2025-02-19 17:11:00,377:INFO:Declaring metric variables
2025-02-19 17:11:00,377:INFO:Importing untrained model
2025-02-19 17:11:00,377:INFO:Declaring custom model
2025-02-19 17:11:00,379:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:11:00,380:INFO:Starting cross validation
2025-02-19 17:11:00,382:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:11:06,685:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:06,697:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:06,705:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:06,840:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:06,849:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:06,872:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:06,940:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:06,951:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:06,958:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:07,079:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:07,097:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:07,108:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,466:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,478:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,492:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,495:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,500:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,508:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,826:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,832:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,840:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,851:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,860:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:13,869:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:17,279:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:17,286:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:17,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:17,347:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:17,351:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:17,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:11:17,360:INFO:Calculating mean and std
2025-02-19 17:11:17,361:INFO:Creating metrics dataframe
2025-02-19 17:11:17,363:INFO:Finalizing model
2025-02-19 17:11:19,864:INFO:Uploading results into container
2025-02-19 17:11:19,865:INFO:Uploading model into container now
2025-02-19 17:11:19,865:INFO:_master_model_container: 4
2025-02-19 17:11:19,865:INFO:_display_container: 4
2025-02-19 17:11:19,867:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:11:19,867:INFO:create_model() successfully completed......................................
2025-02-19 17:11:19,997:INFO:SubProcess create_model() end ==================================
2025-02-19 17:11:20,011:INFO:_master_model_container: 4
2025-02-19 17:11:20,011:INFO:_display_container: 4
2025-02-19 17:11:20,013:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:11:20,013:INFO:calibrate_model() successfully completed......................................
2025-02-19 17:11:20,151:INFO:Initializing finalize_model()
2025-02-19 17:11:20,151:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efd8cfd7c70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 17:11:20,153:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:11:20,160:INFO:Initializing create_model()
2025-02-19 17:11:20,160:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efd8cfd7c70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:11:20,160:INFO:Checking exceptions
2025-02-19 17:11:20,161:INFO:Importing libraries
2025-02-19 17:11:20,162:INFO:Copying training dataset
2025-02-19 17:11:20,162:INFO:Defining folds
2025-02-19 17:11:20,162:INFO:Declaring metric variables
2025-02-19 17:11:20,162:INFO:Importing untrained model
2025-02-19 17:11:20,162:INFO:Declaring custom model
2025-02-19 17:11:20,164:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:11:20,165:INFO:Cross validation set to False
2025-02-19 17:11:20,165:INFO:Fitting Model
2025-02-19 17:11:23,067:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:11:23,067:INFO:create_model() successfully completed......................................
2025-02-19 17:11:23,190:INFO:_master_model_container: 4
2025-02-19 17:11:23,190:INFO:_display_container: 4
2025-02-19 17:11:23,205:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:11:23,205:INFO:finalize_model() successfully completed......................................
2025-02-19 17:11:23,353:INFO:Initializing predict_model()
2025-02-19 17:11:23,353:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7efd8cfd7c70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7efd8cf132e0>)
2025-02-19 17:11:23,353:INFO:Checking exceptions
2025-02-19 17:11:23,353:INFO:Preloading libraries
2025-02-19 17:11:23,354:INFO:Set up data.
2025-02-19 17:11:23,376:INFO:Set up index.
2025-02-19 17:30:02,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:30:02,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:30:02,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:30:02,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 17:30:08,291:INFO:PyCaret ClassificationExperiment
2025-02-19 17:30:08,291:INFO:Logging name: clf-default-name
2025-02-19 17:30:08,291:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 17:30:08,291:INFO:version 3.3.2
2025-02-19 17:30:08,291:INFO:Initializing setup()
2025-02-19 17:30:08,291:INFO:self.USI: fed2
2025-02-19 17:30:08,291:INFO:self._variable_keys: {'y_test', 'exp_id', 'is_multiclass', 'log_plots_param', 'gpu_n_jobs_param', '_ml_usecase', '_available_plots', 'X', 'fold_groups_param', 'fix_imbalance', 'fold_generator', 'exp_name_log', 'y_train', 'target_param', 'fold_shuffle_param', 'pipeline', 'y', 'seed', 'memory', 'n_jobs_param', 'USI', 'gpu_param', 'data', 'X_test', 'logging_param', 'X_train', 'html_param', 'idx'}
2025-02-19 17:30:08,291:INFO:Checking environment
2025-02-19 17:30:08,291:INFO:python_version: 3.10.12
2025-02-19 17:30:08,291:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 17:30:08,291:INFO:machine: x86_64
2025-02-19 17:30:08,293:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:30:08,293:INFO:Memory: svmem(total=7813279744, available=2137812992, percent=72.6, used=4754071552, free=1067245568, active=3285061632, inactive=2499571712, buffers=72044544, cached=1919918080, shared=630951936, slab=329940992)
2025-02-19 17:30:08,294:INFO:Physical Core: 2
2025-02-19 17:30:08,294:INFO:Logical Core: 4
2025-02-19 17:30:08,294:INFO:Checking libraries
2025-02-19 17:30:08,294:INFO:System:
2025-02-19 17:30:08,294:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 17:30:08,294:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 17:30:08,294:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:30:08,294:INFO:PyCaret required dependencies:
2025-02-19 17:30:08,909:INFO:                 pip: 23.3.2
2025-02-19 17:30:08,909:INFO:          setuptools: 65.5.0
2025-02-19 17:30:08,909:INFO:             pycaret: 3.3.2
2025-02-19 17:30:08,909:INFO:             IPython: 8.20.0
2025-02-19 17:30:08,909:INFO:          ipywidgets: 8.1.1
2025-02-19 17:30:08,909:INFO:                tqdm: 4.66.1
2025-02-19 17:30:08,909:INFO:               numpy: 1.24.4
2025-02-19 17:30:08,909:INFO:              pandas: 1.5.3
2025-02-19 17:30:08,909:INFO:              jinja2: 3.1.3
2025-02-19 17:30:08,909:INFO:               scipy: 1.10.1
2025-02-19 17:30:08,909:INFO:              joblib: 1.3.2
2025-02-19 17:30:08,909:INFO:             sklearn: 1.2.2
2025-02-19 17:30:08,909:INFO:                pyod: 1.1.2
2025-02-19 17:30:08,909:INFO:            imblearn: 0.12.3
2025-02-19 17:30:08,909:INFO:   category_encoders: 2.6.3
2025-02-19 17:30:08,909:INFO:            lightgbm: 4.2.0
2025-02-19 17:30:08,909:INFO:               numba: 0.58.1
2025-02-19 17:30:08,910:INFO:            requests: 2.31.0
2025-02-19 17:30:08,910:INFO:          matplotlib: 3.6.0
2025-02-19 17:30:08,910:INFO:          scikitplot: 0.3.7
2025-02-19 17:30:08,910:INFO:         yellowbrick: 1.5
2025-02-19 17:30:08,910:INFO:              plotly: 5.18.0
2025-02-19 17:30:08,910:INFO:    plotly-resampler: Not installed
2025-02-19 17:30:08,910:INFO:             kaleido: 0.2.1
2025-02-19 17:30:08,910:INFO:           schemdraw: 0.15
2025-02-19 17:30:08,910:INFO:         statsmodels: 0.14.1
2025-02-19 17:30:08,910:INFO:              sktime: 0.21.1
2025-02-19 17:30:08,910:INFO:               tbats: 1.1.3
2025-02-19 17:30:08,910:INFO:            pmdarima: 2.0.4
2025-02-19 17:30:08,910:INFO:              psutil: 5.9.7
2025-02-19 17:30:08,910:INFO:          markupsafe: 2.1.3
2025-02-19 17:30:08,910:INFO:             pickle5: Not installed
2025-02-19 17:30:08,910:INFO:         cloudpickle: 2.2.1
2025-02-19 17:30:08,910:INFO:         deprecation: 2.1.0
2025-02-19 17:30:08,910:INFO:              xxhash: 3.4.1
2025-02-19 17:30:08,910:INFO:           wurlitzer: 3.0.3
2025-02-19 17:30:08,910:INFO:PyCaret optional dependencies:
2025-02-19 17:30:09,809:INFO:                shap: 0.44.0
2025-02-19 17:30:09,809:INFO:           interpret: 0.5.0
2025-02-19 17:30:09,809:INFO:                umap: 0.5.5
2025-02-19 17:30:09,809:INFO:     ydata_profiling: 4.6.0
2025-02-19 17:30:09,809:INFO:  explainerdashboard: 0.4.5
2025-02-19 17:30:09,809:INFO:             autoviz: 0.1.804
2025-02-19 17:30:09,809:INFO:           fairlearn: 0.7.0
2025-02-19 17:30:09,809:INFO:          deepchecks: Not installed
2025-02-19 17:30:09,809:INFO:             xgboost: 1.6.2
2025-02-19 17:30:09,809:INFO:            catboost: 1.2.2
2025-02-19 17:30:09,809:INFO:              kmodes: 0.12.2
2025-02-19 17:30:09,810:INFO:             mlxtend: 0.23.1
2025-02-19 17:30:09,810:INFO:       statsforecast: 1.5.0
2025-02-19 17:30:09,810:INFO:        tune_sklearn: 0.5.0
2025-02-19 17:30:09,810:INFO:                 ray: 2.9.0
2025-02-19 17:30:09,810:INFO:            hyperopt: 0.2.7
2025-02-19 17:30:09,810:INFO:              optuna: 3.5.0
2025-02-19 17:30:09,810:INFO:               skopt: 0.9.0
2025-02-19 17:30:09,810:INFO:              mlflow: 1.30.1
2025-02-19 17:30:09,810:INFO:              gradio: 3.50.2
2025-02-19 17:30:09,810:INFO:             fastapi: 0.109.0
2025-02-19 17:30:09,810:INFO:             uvicorn: 0.25.0
2025-02-19 17:30:09,810:INFO:              m2cgen: 0.10.0
2025-02-19 17:30:09,811:INFO:           evidently: 0.2.8
2025-02-19 17:30:09,811:INFO:               fugue: 0.8.6
2025-02-19 17:30:09,811:INFO:           streamlit: Not installed
2025-02-19 17:30:09,811:INFO:             prophet: Not installed
2025-02-19 17:30:09,811:INFO:None
2025-02-19 17:30:09,811:INFO:Set up data.
2025-02-19 17:30:09,960:INFO:Set up folding strategy.
2025-02-19 17:30:09,960:INFO:Set up train/test split.
2025-02-19 17:30:09,969:INFO:Set up index.
2025-02-19 17:30:09,969:INFO:Assigning column types.
2025-02-19 17:30:09,974:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 17:30:10,028:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:30:10,031:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:30:10,065:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:10,086:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:10,149:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:30:10,150:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:30:10,178:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:10,181:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:10,182:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 17:30:10,228:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:30:10,268:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:10,270:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:10,316:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:30:10,356:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:10,358:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:10,359:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 17:30:10,442:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:10,445:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:10,521:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:10,524:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:10,525:INFO:Preparing preprocessing pipeline...
2025-02-19 17:30:10,527:INFO:Set up label encoding.
2025-02-19 17:30:10,527:INFO:Set up simple imputation.
2025-02-19 17:30:10,555:INFO:Finished creating preprocessing pipeline.
2025-02-19 17:30:10,560:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 17:30:10,560:INFO:Creating final display dataframe.
2025-02-19 17:30:10,655:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    fed2
2025-02-19 17:30:10,737:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:10,741:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:10,817:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:10,820:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:10,824:INFO:setup() successfully completed in 2.53s...............
2025-02-19 17:30:10,825:INFO:Initializing create_model()
2025-02-19 17:30:10,825:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6e0884c70>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 17:30:10,825:INFO:Checking exceptions
2025-02-19 17:30:10,826:INFO:Importing libraries
2025-02-19 17:30:10,826:INFO:Copying training dataset
2025-02-19 17:30:10,833:INFO:Defining folds
2025-02-19 17:30:10,833:INFO:Declaring metric variables
2025-02-19 17:30:10,833:INFO:Importing untrained model
2025-02-19 17:30:10,834:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:30:10,834:INFO:Starting cross validation
2025-02-19 17:30:10,837:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:30:17,920:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:17,935:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:17,936:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:17,942:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:17,943:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:17,944:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:17,948:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:17,951:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:17,955:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:18,008:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:18,019:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:18,029:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,578:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,586:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,588:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,595:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,602:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,605:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,628:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,636:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,643:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,658:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,665:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:19,672:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:20,493:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:20,501:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:20,503:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:20,505:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:20,507:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:20,510:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:20,523:INFO:Calculating mean and std
2025-02-19 17:30:20,524:INFO:Creating metrics dataframe
2025-02-19 17:30:20,527:INFO:Finalizing model
2025-02-19 17:30:21,038:INFO:Uploading results into container
2025-02-19 17:30:21,039:INFO:Uploading model into container now
2025-02-19 17:30:21,047:INFO:_master_model_container: 1
2025-02-19 17:30:21,047:INFO:_display_container: 2
2025-02-19 17:30:21,048:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:30:21,048:INFO:create_model() successfully completed......................................
2025-02-19 17:30:21,216:INFO:Initializing tune_model()
2025-02-19 17:30:21,216:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6e0884c70>)
2025-02-19 17:30:21,216:INFO:Checking exceptions
2025-02-19 17:30:21,224:INFO:Copying training dataset
2025-02-19 17:30:21,228:INFO:Checking base model
2025-02-19 17:30:21,229:INFO:Base model : Random Forest Classifier
2025-02-19 17:30:21,229:INFO:Declaring metric variables
2025-02-19 17:30:21,230:INFO:Defining Hyperparameters
2025-02-19 17:30:21,364:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 17:30:21,365:INFO:Tuning with n_jobs=-1
2025-02-19 17:30:21,365:INFO:Initializing RandomizedSearchCV
2025-02-19 17:30:22,871:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:22,905:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:22,908:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:22,938:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:24,386:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:24,388:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:24,404:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:24,460:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:25,191:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:25,220:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:25,224:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 17:30:25,225:INFO:Hyperparameter search completed
2025-02-19 17:30:25,225:INFO:SubProcess create_model() called ==================================
2025-02-19 17:30:25,225:INFO:Initializing create_model()
2025-02-19 17:30:25,225:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6e0884c70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fb6d87f6920>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 17:30:25,226:INFO:Checking exceptions
2025-02-19 17:30:25,226:INFO:Importing libraries
2025-02-19 17:30:25,226:INFO:Copying training dataset
2025-02-19 17:30:25,230:INFO:Defining folds
2025-02-19 17:30:25,230:INFO:Declaring metric variables
2025-02-19 17:30:25,230:INFO:Importing untrained model
2025-02-19 17:30:25,230:INFO:Declaring custom model
2025-02-19 17:30:25,231:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:30:25,231:INFO:Starting cross validation
2025-02-19 17:30:25,232:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:30:26,688:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,718:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,731:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,864:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,864:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,872:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,872:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,880:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,880:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,889:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,896:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:26,903:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,205:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,221:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,228:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,346:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,363:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,394:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,407:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,436:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,451:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,467:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:28,493:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:29,089:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:29,096:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:29,103:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:29,181:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:29,184:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:29,188:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:29,197:INFO:Calculating mean and std
2025-02-19 17:30:29,198:INFO:Creating metrics dataframe
2025-02-19 17:30:29,200:INFO:Finalizing model
2025-02-19 17:30:29,731:INFO:Uploading results into container
2025-02-19 17:30:29,732:INFO:Uploading model into container now
2025-02-19 17:30:29,733:INFO:_master_model_container: 2
2025-02-19 17:30:29,733:INFO:_display_container: 3
2025-02-19 17:30:29,733:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:30:29,733:INFO:create_model() successfully completed......................................
2025-02-19 17:30:29,861:INFO:SubProcess create_model() end ==================================
2025-02-19 17:30:29,862:INFO:choose_better activated
2025-02-19 17:30:29,862:INFO:SubProcess create_model() called ==================================
2025-02-19 17:30:29,863:INFO:Initializing create_model()
2025-02-19 17:30:29,863:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6e0884c70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:30:29,863:INFO:Checking exceptions
2025-02-19 17:30:29,865:INFO:Importing libraries
2025-02-19 17:30:29,865:INFO:Copying training dataset
2025-02-19 17:30:29,872:INFO:Defining folds
2025-02-19 17:30:29,872:INFO:Declaring metric variables
2025-02-19 17:30:29,873:INFO:Importing untrained model
2025-02-19 17:30:29,873:INFO:Declaring custom model
2025-02-19 17:30:29,874:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:30:29,874:INFO:Starting cross validation
2025-02-19 17:30:29,876:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:30:31,309:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,316:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,317:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,328:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,330:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,350:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,368:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,376:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,401:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,452:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,460:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:31,467:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:32,689:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:32,705:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:32,719:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:32,822:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:32,839:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:32,855:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:32,880:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:32,887:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:32,894:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,023:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,035:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,042:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,697:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,703:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,710:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,741:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,746:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,750:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:33,761:INFO:Calculating mean and std
2025-02-19 17:30:33,762:INFO:Creating metrics dataframe
2025-02-19 17:30:33,769:INFO:Finalizing model
2025-02-19 17:30:34,360:INFO:Uploading results into container
2025-02-19 17:30:34,361:INFO:Uploading model into container now
2025-02-19 17:30:34,361:INFO:_master_model_container: 3
2025-02-19 17:30:34,361:INFO:_display_container: 4
2025-02-19 17:30:34,362:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:30:34,362:INFO:create_model() successfully completed......................................
2025-02-19 17:30:34,502:INFO:SubProcess create_model() end ==================================
2025-02-19 17:30:34,503:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:30:34,504:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:30:34,505:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 17:30:34,505:INFO:choose_better completed
2025-02-19 17:30:34,505:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 17:30:34,519:INFO:_master_model_container: 3
2025-02-19 17:30:34,519:INFO:_display_container: 3
2025-02-19 17:30:34,519:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:30:34,520:INFO:tune_model() successfully completed......................................
2025-02-19 17:30:34,664:INFO:Initializing save_model()
2025-02-19 17:30:34,664:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_173004/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 17:30:34,664:INFO:Adding model into prep_pipe
2025-02-19 17:30:34,730:INFO:outputs/experiment_20250219_173004/models/tuned_model.pkl saved in current working directory
2025-02-19 17:30:34,737:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 17:30:34,737:INFO:save_model() successfully completed......................................
2025-02-19 17:30:34,865:INFO:Initializing calibrate_model()
2025-02-19 17:30:34,865:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6e0884c70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 17:30:34,865:INFO:Checking exceptions
2025-02-19 17:30:34,869:INFO:Preloading libraries
2025-02-19 17:30:34,869:INFO:Preparing display monitor
2025-02-19 17:30:34,871:INFO:Getting model name
2025-02-19 17:30:34,871:INFO:Base model : Random Forest Classifier
2025-02-19 17:30:34,872:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 17:30:34,872:INFO:SubProcess create_model() called ==================================
2025-02-19 17:30:34,874:INFO:Initializing create_model()
2025-02-19 17:30:34,874:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6e0884c70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fb6d8b34a00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:30:34,874:INFO:Checking exceptions
2025-02-19 17:30:34,875:INFO:Importing libraries
2025-02-19 17:30:34,875:INFO:Copying training dataset
2025-02-19 17:30:34,882:INFO:Defining folds
2025-02-19 17:30:34,882:INFO:Declaring metric variables
2025-02-19 17:30:34,882:INFO:Importing untrained model
2025-02-19 17:30:34,883:INFO:Declaring custom model
2025-02-19 17:30:34,884:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:30:34,885:INFO:Starting cross validation
2025-02-19 17:30:34,886:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:30:41,073:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,083:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,086:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,095:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,101:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,102:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,416:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,432:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,440:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,754:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,765:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:41,782:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:47,080:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:47,090:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:47,102:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:47,694:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:47,705:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:47,714:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:47,950:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:47,960:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:47,976:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:48,034:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:48,041:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:48,049:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:51,059:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:51,069:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:51,077:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:51,369:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:51,376:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:51,382:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:30:51,388:INFO:Calculating mean and std
2025-02-19 17:30:51,389:INFO:Creating metrics dataframe
2025-02-19 17:30:51,392:INFO:Finalizing model
2025-02-19 17:30:53,915:INFO:Uploading results into container
2025-02-19 17:30:53,916:INFO:Uploading model into container now
2025-02-19 17:30:53,917:INFO:_master_model_container: 4
2025-02-19 17:30:53,917:INFO:_display_container: 4
2025-02-19 17:30:53,920:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:30:53,920:INFO:create_model() successfully completed......................................
2025-02-19 17:30:54,052:INFO:SubProcess create_model() end ==================================
2025-02-19 17:30:54,066:INFO:_master_model_container: 4
2025-02-19 17:30:54,067:INFO:_display_container: 4
2025-02-19 17:30:54,069:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:30:54,070:INFO:calibrate_model() successfully completed......................................
2025-02-19 17:30:54,205:INFO:Initializing finalize_model()
2025-02-19 17:30:54,205:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6e0884c70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 17:30:54,207:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:30:54,214:INFO:Initializing create_model()
2025-02-19 17:30:54,214:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6e0884c70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:30:54,214:INFO:Checking exceptions
2025-02-19 17:30:54,215:INFO:Importing libraries
2025-02-19 17:30:54,215:INFO:Copying training dataset
2025-02-19 17:30:54,216:INFO:Defining folds
2025-02-19 17:30:54,216:INFO:Declaring metric variables
2025-02-19 17:30:54,216:INFO:Importing untrained model
2025-02-19 17:30:54,216:INFO:Declaring custom model
2025-02-19 17:30:54,218:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:30:54,219:INFO:Cross validation set to False
2025-02-19 17:30:54,219:INFO:Fitting Model
2025-02-19 17:30:57,073:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:30:57,073:INFO:create_model() successfully completed......................................
2025-02-19 17:30:57,196:INFO:_master_model_container: 4
2025-02-19 17:30:57,196:INFO:_display_container: 4
2025-02-19 17:30:57,217:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:30:57,217:INFO:finalize_model() successfully completed......................................
2025-02-19 17:30:57,362:INFO:Initializing predict_model()
2025-02-19 17:30:57,362:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6e0884c70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7fb6c5e8e560>)
2025-02-19 17:30:57,362:INFO:Checking exceptions
2025-02-19 17:30:57,362:INFO:Preloading libraries
2025-02-19 17:30:57,363:INFO:Set up data.
2025-02-19 17:30:57,390:INFO:Set up index.
2025-02-19 17:30:58,405:INFO:PyCaret ClassificationExperiment
2025-02-19 17:30:58,405:INFO:Logging name: clf-default-name
2025-02-19 17:30:58,405:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 17:30:58,405:INFO:version 3.3.2
2025-02-19 17:30:58,405:INFO:Initializing setup()
2025-02-19 17:30:58,405:INFO:self.USI: 3693
2025-02-19 17:30:58,406:INFO:self._variable_keys: {'y_test', 'exp_id', 'is_multiclass', 'log_plots_param', 'gpu_n_jobs_param', '_ml_usecase', '_available_plots', 'X', 'fold_groups_param', 'fix_imbalance', 'fold_generator', 'exp_name_log', 'y_train', 'target_param', 'fold_shuffle_param', 'pipeline', 'y', 'seed', 'memory', 'n_jobs_param', 'USI', 'gpu_param', 'data', 'X_test', 'logging_param', 'X_train', 'html_param', 'idx'}
2025-02-19 17:30:58,406:INFO:Checking environment
2025-02-19 17:30:58,406:INFO:python_version: 3.10.12
2025-02-19 17:30:58,406:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 17:30:58,406:INFO:machine: x86_64
2025-02-19 17:30:58,406:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:30:58,406:INFO:Memory: svmem(total=7813279744, available=1444962304, percent=81.5, used=5465636864, free=370909184, active=3286020096, inactive=3232325632, buffers=72491008, cached=1904242688, shared=612073472, slab=331563008)
2025-02-19 17:30:58,407:INFO:Physical Core: 2
2025-02-19 17:30:58,407:INFO:Logical Core: 4
2025-02-19 17:30:58,407:INFO:Checking libraries
2025-02-19 17:30:58,407:INFO:System:
2025-02-19 17:30:58,407:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 17:30:58,407:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 17:30:58,407:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 17:30:58,407:INFO:PyCaret required dependencies:
2025-02-19 17:30:58,408:INFO:                 pip: 23.3.2
2025-02-19 17:30:58,408:INFO:          setuptools: 65.5.0
2025-02-19 17:30:58,408:INFO:             pycaret: 3.3.2
2025-02-19 17:30:58,408:INFO:             IPython: 8.20.0
2025-02-19 17:30:58,408:INFO:          ipywidgets: 8.1.1
2025-02-19 17:30:58,408:INFO:                tqdm: 4.66.1
2025-02-19 17:30:58,408:INFO:               numpy: 1.24.4
2025-02-19 17:30:58,408:INFO:              pandas: 1.5.3
2025-02-19 17:30:58,408:INFO:              jinja2: 3.1.3
2025-02-19 17:30:58,408:INFO:               scipy: 1.10.1
2025-02-19 17:30:58,408:INFO:              joblib: 1.3.2
2025-02-19 17:30:58,409:INFO:             sklearn: 1.2.2
2025-02-19 17:30:58,409:INFO:                pyod: 1.1.2
2025-02-19 17:30:58,409:INFO:            imblearn: 0.12.3
2025-02-19 17:30:58,409:INFO:   category_encoders: 2.6.3
2025-02-19 17:30:58,409:INFO:            lightgbm: 4.2.0
2025-02-19 17:30:58,409:INFO:               numba: 0.58.1
2025-02-19 17:30:58,409:INFO:            requests: 2.31.0
2025-02-19 17:30:58,409:INFO:          matplotlib: 3.6.0
2025-02-19 17:30:58,409:INFO:          scikitplot: 0.3.7
2025-02-19 17:30:58,409:INFO:         yellowbrick: 1.5
2025-02-19 17:30:58,409:INFO:              plotly: 5.18.0
2025-02-19 17:30:58,409:INFO:    plotly-resampler: Not installed
2025-02-19 17:30:58,409:INFO:             kaleido: 0.2.1
2025-02-19 17:30:58,410:INFO:           schemdraw: 0.15
2025-02-19 17:30:58,410:INFO:         statsmodels: 0.14.1
2025-02-19 17:30:58,410:INFO:              sktime: 0.21.1
2025-02-19 17:30:58,410:INFO:               tbats: 1.1.3
2025-02-19 17:30:58,410:INFO:            pmdarima: 2.0.4
2025-02-19 17:30:58,410:INFO:              psutil: 5.9.7
2025-02-19 17:30:58,410:INFO:          markupsafe: 2.1.3
2025-02-19 17:30:58,410:INFO:             pickle5: Not installed
2025-02-19 17:30:58,410:INFO:         cloudpickle: 2.2.1
2025-02-19 17:30:58,410:INFO:         deprecation: 2.1.0
2025-02-19 17:30:58,410:INFO:              xxhash: 3.4.1
2025-02-19 17:30:58,410:INFO:           wurlitzer: 3.0.3
2025-02-19 17:30:58,410:INFO:PyCaret optional dependencies:
2025-02-19 17:30:58,411:INFO:                shap: 0.44.0
2025-02-19 17:30:58,411:INFO:           interpret: 0.5.0
2025-02-19 17:30:58,411:INFO:                umap: 0.5.5
2025-02-19 17:30:58,411:INFO:     ydata_profiling: 4.6.0
2025-02-19 17:30:58,411:INFO:  explainerdashboard: 0.4.5
2025-02-19 17:30:58,411:INFO:             autoviz: 0.1.804
2025-02-19 17:30:58,411:INFO:           fairlearn: 0.7.0
2025-02-19 17:30:58,411:INFO:          deepchecks: Not installed
2025-02-19 17:30:58,411:INFO:             xgboost: 1.6.2
2025-02-19 17:30:58,411:INFO:            catboost: 1.2.2
2025-02-19 17:30:58,411:INFO:              kmodes: 0.12.2
2025-02-19 17:30:58,412:INFO:             mlxtend: 0.23.1
2025-02-19 17:30:58,412:INFO:       statsforecast: 1.5.0
2025-02-19 17:30:58,412:INFO:        tune_sklearn: 0.5.0
2025-02-19 17:30:58,412:INFO:                 ray: 2.9.0
2025-02-19 17:30:58,412:INFO:            hyperopt: 0.2.7
2025-02-19 17:30:58,412:INFO:              optuna: 3.5.0
2025-02-19 17:30:58,412:INFO:               skopt: 0.9.0
2025-02-19 17:30:58,412:INFO:              mlflow: 1.30.1
2025-02-19 17:30:58,412:INFO:              gradio: 3.50.2
2025-02-19 17:30:58,412:INFO:             fastapi: 0.109.0
2025-02-19 17:30:58,412:INFO:             uvicorn: 0.25.0
2025-02-19 17:30:58,412:INFO:              m2cgen: 0.10.0
2025-02-19 17:30:58,412:INFO:           evidently: 0.2.8
2025-02-19 17:30:58,413:INFO:               fugue: 0.8.6
2025-02-19 17:30:58,413:INFO:           streamlit: Not installed
2025-02-19 17:30:58,413:INFO:             prophet: Not installed
2025-02-19 17:30:58,413:INFO:None
2025-02-19 17:30:58,413:INFO:Set up data.
2025-02-19 17:30:58,435:INFO:Set up folding strategy.
2025-02-19 17:30:58,435:INFO:Set up train/test split.
2025-02-19 17:30:58,442:INFO:Set up index.
2025-02-19 17:30:58,443:INFO:Assigning column types.
2025-02-19 17:30:58,446:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 17:30:58,493:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:30:58,494:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:30:58,537:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:58,540:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:58,586:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 17:30:58,587:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:30:58,615:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:58,618:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:58,619:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 17:30:58,665:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:30:58,695:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:58,698:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:58,745:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 17:30:58,773:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:58,776:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:58,776:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 17:30:58,852:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:58,855:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:58,932:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:58,935:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:58,937:INFO:Preparing preprocessing pipeline...
2025-02-19 17:30:58,938:INFO:Set up label encoding.
2025-02-19 17:30:58,938:INFO:Set up simple imputation.
2025-02-19 17:30:58,965:INFO:Finished creating preprocessing pipeline.
2025-02-19 17:30:58,971:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 17:30:58,971:INFO:Creating final display dataframe.
2025-02-19 17:30:59,064:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    3693
2025-02-19 17:30:59,140:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:59,142:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:59,218:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 17:30:59,221:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 17:30:59,223:INFO:setup() successfully completed in 0.82s...............
2025-02-19 17:30:59,223:INFO:Initializing create_model()
2025-02-19 17:30:59,223:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6c5dacfd0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 17:30:59,223:INFO:Checking exceptions
2025-02-19 17:30:59,225:INFO:Importing libraries
2025-02-19 17:30:59,225:INFO:Copying training dataset
2025-02-19 17:30:59,230:INFO:Defining folds
2025-02-19 17:30:59,230:INFO:Declaring metric variables
2025-02-19 17:30:59,230:INFO:Importing untrained model
2025-02-19 17:30:59,230:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:30:59,231:INFO:Starting cross validation
2025-02-19 17:30:59,231:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:31:00,796:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,798:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,803:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,807:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,808:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,811:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,813:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,814:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,820:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,826:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,835:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:00,842:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,344:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,359:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,368:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,388:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,401:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,403:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,407:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,410:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,411:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,414:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,418:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:02,419:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:03,188:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:03,194:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:03,201:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:03,206:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:03,210:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:03,213:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:03,218:INFO:Calculating mean and std
2025-02-19 17:31:03,219:INFO:Creating metrics dataframe
2025-02-19 17:31:03,221:INFO:Finalizing model
2025-02-19 17:31:03,824:INFO:Uploading results into container
2025-02-19 17:31:03,825:INFO:Uploading model into container now
2025-02-19 17:31:03,832:INFO:_master_model_container: 1
2025-02-19 17:31:03,832:INFO:_display_container: 2
2025-02-19 17:31:03,833:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:31:03,833:INFO:create_model() successfully completed......................................
2025-02-19 17:31:03,961:INFO:Initializing tune_model()
2025-02-19 17:31:03,961:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6c5dacfd0>)
2025-02-19 17:31:03,961:INFO:Checking exceptions
2025-02-19 17:31:03,967:INFO:Copying training dataset
2025-02-19 17:31:03,970:INFO:Checking base model
2025-02-19 17:31:03,970:INFO:Base model : Random Forest Classifier
2025-02-19 17:31:03,971:INFO:Declaring metric variables
2025-02-19 17:31:03,972:INFO:Defining Hyperparameters
2025-02-19 17:31:04,097:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 17:31:04,097:INFO:Tuning with n_jobs=-1
2025-02-19 17:31:04,097:INFO:Initializing RandomizedSearchCV
2025-02-19 17:31:05,617:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:05,637:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:05,654:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:05,662:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:07,075:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:07,134:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:07,148:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:07,193:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:07,943:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:07,965:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:07,978:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 17:31:07,978:INFO:Hyperparameter search completed
2025-02-19 17:31:07,978:INFO:SubProcess create_model() called ==================================
2025-02-19 17:31:07,979:INFO:Initializing create_model()
2025-02-19 17:31:07,979:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6c5dacfd0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fb6c5dc9b70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 17:31:07,979:INFO:Checking exceptions
2025-02-19 17:31:07,979:INFO:Importing libraries
2025-02-19 17:31:07,979:INFO:Copying training dataset
2025-02-19 17:31:07,983:INFO:Defining folds
2025-02-19 17:31:07,983:INFO:Declaring metric variables
2025-02-19 17:31:07,984:INFO:Importing untrained model
2025-02-19 17:31:07,984:INFO:Declaring custom model
2025-02-19 17:31:07,985:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:31:07,986:INFO:Starting cross validation
2025-02-19 17:31:07,987:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:31:09,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,451:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,461:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,461:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,467:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,467:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,536:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,545:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,546:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,553:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,554:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:09,560:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:10,960:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:10,963:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:10,976:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:10,977:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:10,982:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:10,986:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,039:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,055:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,057:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,065:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,066:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,074:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,865:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,874:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,879:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,888:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,894:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,899:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:11,904:INFO:Calculating mean and std
2025-02-19 17:31:11,905:INFO:Creating metrics dataframe
2025-02-19 17:31:11,907:INFO:Finalizing model
2025-02-19 17:31:12,452:INFO:Uploading results into container
2025-02-19 17:31:12,453:INFO:Uploading model into container now
2025-02-19 17:31:12,453:INFO:_master_model_container: 2
2025-02-19 17:31:12,453:INFO:_display_container: 3
2025-02-19 17:31:12,454:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:31:12,454:INFO:create_model() successfully completed......................................
2025-02-19 17:31:12,580:INFO:SubProcess create_model() end ==================================
2025-02-19 17:31:12,580:INFO:choose_better activated
2025-02-19 17:31:12,581:INFO:SubProcess create_model() called ==================================
2025-02-19 17:31:12,583:INFO:Initializing create_model()
2025-02-19 17:31:12,583:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6c5dacfd0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:31:12,583:INFO:Checking exceptions
2025-02-19 17:31:12,585:INFO:Importing libraries
2025-02-19 17:31:12,585:INFO:Copying training dataset
2025-02-19 17:31:12,592:INFO:Defining folds
2025-02-19 17:31:12,592:INFO:Declaring metric variables
2025-02-19 17:31:12,593:INFO:Importing untrained model
2025-02-19 17:31:12,593:INFO:Declaring custom model
2025-02-19 17:31:12,594:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:31:12,594:INFO:Starting cross validation
2025-02-19 17:31:12,596:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:31:14,071:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,079:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,090:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,116:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,118:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,123:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,128:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,131:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,135:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,149:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,161:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:14,169:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,477:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,492:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,508:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,575:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,588:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,597:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,620:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,647:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,654:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,767:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,784:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:15,797:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:16,441:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:16,448:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:16,456:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:16,483:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:16,492:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:16,500:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:16,515:INFO:Calculating mean and std
2025-02-19 17:31:16,516:INFO:Creating metrics dataframe
2025-02-19 17:31:16,521:INFO:Finalizing model
2025-02-19 17:31:17,035:INFO:Uploading results into container
2025-02-19 17:31:17,036:INFO:Uploading model into container now
2025-02-19 17:31:17,036:INFO:_master_model_container: 3
2025-02-19 17:31:17,037:INFO:_display_container: 4
2025-02-19 17:31:17,037:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:31:17,037:INFO:create_model() successfully completed......................................
2025-02-19 17:31:17,166:INFO:SubProcess create_model() end ==================================
2025-02-19 17:31:17,167:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:31:17,168:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 17:31:17,169:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 17:31:17,169:INFO:choose_better completed
2025-02-19 17:31:17,169:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 17:31:17,182:INFO:_master_model_container: 3
2025-02-19 17:31:17,182:INFO:_display_container: 3
2025-02-19 17:31:17,183:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 17:31:17,183:INFO:tune_model() successfully completed......................................
2025-02-19 17:31:17,334:INFO:Initializing save_model()
2025-02-19 17:31:17,335:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_173004/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 17:31:17,335:INFO:Adding model into prep_pipe
2025-02-19 17:31:17,413:INFO:outputs/experiment_20250219_173004/models/tuned_model.pkl saved in current working directory
2025-02-19 17:31:17,420:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 17:31:17,420:INFO:save_model() successfully completed......................................
2025-02-19 17:31:17,549:INFO:Initializing calibrate_model()
2025-02-19 17:31:17,550:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6c5dacfd0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 17:31:17,550:INFO:Checking exceptions
2025-02-19 17:31:17,553:INFO:Preloading libraries
2025-02-19 17:31:17,553:INFO:Preparing display monitor
2025-02-19 17:31:17,555:INFO:Getting model name
2025-02-19 17:31:17,556:INFO:Base model : Random Forest Classifier
2025-02-19 17:31:17,556:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 17:31:17,557:INFO:SubProcess create_model() called ==================================
2025-02-19 17:31:17,559:INFO:Initializing create_model()
2025-02-19 17:31:17,559:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6c5dacfd0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fb6c6051660>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:31:17,559:INFO:Checking exceptions
2025-02-19 17:31:17,559:INFO:Importing libraries
2025-02-19 17:31:17,559:INFO:Copying training dataset
2025-02-19 17:31:17,566:INFO:Defining folds
2025-02-19 17:31:17,566:INFO:Declaring metric variables
2025-02-19 17:31:17,567:INFO:Importing untrained model
2025-02-19 17:31:17,567:INFO:Declaring custom model
2025-02-19 17:31:17,569:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:31:17,570:INFO:Starting cross validation
2025-02-19 17:31:17,571:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 17:31:23,748:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:23,755:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:23,762:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:24,005:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:24,012:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:24,020:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:24,047:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:24,055:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:24,062:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:24,250:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:24,257:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:24,263:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:29,964:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:29,971:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:29,978:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:30,263:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:30,280:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:30,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:30,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:30,450:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:30,474:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:30,760:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:30,767:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:30,788:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:33,849:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:33,857:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:33,864:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:34,016:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:34,020:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:34,024:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 17:31:34,038:INFO:Calculating mean and std
2025-02-19 17:31:34,040:INFO:Creating metrics dataframe
2025-02-19 17:31:34,045:INFO:Finalizing model
2025-02-19 17:31:36,552:INFO:Uploading results into container
2025-02-19 17:31:36,552:INFO:Uploading model into container now
2025-02-19 17:31:36,555:INFO:_master_model_container: 4
2025-02-19 17:31:36,555:INFO:_display_container: 4
2025-02-19 17:31:36,557:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:31:36,557:INFO:create_model() successfully completed......................................
2025-02-19 17:31:36,681:INFO:SubProcess create_model() end ==================================
2025-02-19 17:31:36,697:INFO:_master_model_container: 4
2025-02-19 17:31:36,697:INFO:_display_container: 4
2025-02-19 17:31:36,699:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:31:36,699:INFO:calibrate_model() successfully completed......................................
2025-02-19 17:31:36,834:INFO:Initializing finalize_model()
2025-02-19 17:31:36,834:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6c5dacfd0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 17:31:36,836:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 17:31:36,843:INFO:Initializing create_model()
2025-02-19 17:31:36,843:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6c5dacfd0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 17:31:36,843:INFO:Checking exceptions
2025-02-19 17:31:36,844:INFO:Importing libraries
2025-02-19 17:31:36,844:INFO:Copying training dataset
2025-02-19 17:31:36,845:INFO:Defining folds
2025-02-19 17:31:36,845:INFO:Declaring metric variables
2025-02-19 17:31:36,845:INFO:Importing untrained model
2025-02-19 17:31:36,845:INFO:Declaring custom model
2025-02-19 17:31:36,847:INFO:Random Forest Classifier Imported successfully
2025-02-19 17:31:36,848:INFO:Cross validation set to False
2025-02-19 17:31:36,848:INFO:Fitting Model
2025-02-19 17:31:39,671:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:31:39,671:INFO:create_model() successfully completed......................................
2025-02-19 17:31:39,799:INFO:_master_model_container: 4
2025-02-19 17:31:39,799:INFO:_display_container: 4
2025-02-19 17:31:39,814:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 17:31:39,814:INFO:finalize_model() successfully completed......................................
2025-02-19 17:31:39,968:INFO:Initializing predict_model()
2025-02-19 17:31:39,968:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6c5dacfd0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7fb6c5f9f370>)
2025-02-19 17:31:39,968:INFO:Checking exceptions
2025-02-19 17:31:39,969:INFO:Preloading libraries
2025-02-19 17:31:39,969:INFO:Set up data.
2025-02-19 17:31:39,991:INFO:Set up index.
2025-02-19 21:37:03,197:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 21:37:03,197:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 21:37:03,198:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 21:37:03,198:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 21:37:08,907:INFO:PyCaret ClassificationExperiment
2025-02-19 21:37:08,907:INFO:Logging name: clf-default-name
2025-02-19 21:37:08,907:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 21:37:08,907:INFO:version 3.3.2
2025-02-19 21:37:08,907:INFO:Initializing setup()
2025-02-19 21:37:08,908:INFO:self.USI: 1b22
2025-02-19 21:37:08,908:INFO:self._variable_keys: {'logging_param', 'idx', 'exp_name_log', 'is_multiclass', 'target_param', 'X', 'memory', 'exp_id', '_available_plots', 'data', 'seed', 'n_jobs_param', 'fold_groups_param', 'USI', 'y_test', 'y', 'y_train', 'fold_shuffle_param', 'fold_generator', 'html_param', 'pipeline', 'gpu_n_jobs_param', 'log_plots_param', '_ml_usecase', 'fix_imbalance', 'X_train', 'gpu_param', 'X_test'}
2025-02-19 21:37:08,908:INFO:Checking environment
2025-02-19 21:37:08,908:INFO:python_version: 3.10.12
2025-02-19 21:37:08,908:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 21:37:08,908:INFO:machine: x86_64
2025-02-19 21:37:08,910:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 21:37:08,910:INFO:Memory: svmem(total=7813279744, available=2181156864, percent=72.1, used=4720156672, free=1372016640, active=3233026048, inactive=2515730432, buffers=66650112, cached=1654456320, shared=622825472, slab=329302016)
2025-02-19 21:37:08,911:INFO:Physical Core: 2
2025-02-19 21:37:08,911:INFO:Logical Core: 4
2025-02-19 21:37:08,911:INFO:Checking libraries
2025-02-19 21:37:08,911:INFO:System:
2025-02-19 21:37:08,911:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 21:37:08,911:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 21:37:08,912:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 21:37:08,912:INFO:PyCaret required dependencies:
2025-02-19 21:37:09,638:INFO:                 pip: 23.3.2
2025-02-19 21:37:09,638:INFO:          setuptools: 65.5.0
2025-02-19 21:37:09,638:INFO:             pycaret: 3.3.2
2025-02-19 21:37:09,638:INFO:             IPython: 8.20.0
2025-02-19 21:37:09,639:INFO:          ipywidgets: 8.1.1
2025-02-19 21:37:09,639:INFO:                tqdm: 4.66.1
2025-02-19 21:37:09,639:INFO:               numpy: 1.24.4
2025-02-19 21:37:09,639:INFO:              pandas: 1.5.3
2025-02-19 21:37:09,639:INFO:              jinja2: 3.1.3
2025-02-19 21:37:09,639:INFO:               scipy: 1.10.1
2025-02-19 21:37:09,639:INFO:              joblib: 1.3.2
2025-02-19 21:37:09,639:INFO:             sklearn: 1.2.2
2025-02-19 21:37:09,639:INFO:                pyod: 1.1.2
2025-02-19 21:37:09,639:INFO:            imblearn: 0.12.3
2025-02-19 21:37:09,639:INFO:   category_encoders: 2.6.3
2025-02-19 21:37:09,639:INFO:            lightgbm: 4.2.0
2025-02-19 21:37:09,640:INFO:               numba: 0.58.1
2025-02-19 21:37:09,640:INFO:            requests: 2.31.0
2025-02-19 21:37:09,640:INFO:          matplotlib: 3.6.0
2025-02-19 21:37:09,640:INFO:          scikitplot: 0.3.7
2025-02-19 21:37:09,640:INFO:         yellowbrick: 1.5
2025-02-19 21:37:09,640:INFO:              plotly: 5.18.0
2025-02-19 21:37:09,640:INFO:    plotly-resampler: Not installed
2025-02-19 21:37:09,640:INFO:             kaleido: 0.2.1
2025-02-19 21:37:09,640:INFO:           schemdraw: 0.15
2025-02-19 21:37:09,640:INFO:         statsmodels: 0.14.1
2025-02-19 21:37:09,640:INFO:              sktime: 0.21.1
2025-02-19 21:37:09,640:INFO:               tbats: 1.1.3
2025-02-19 21:37:09,640:INFO:            pmdarima: 2.0.4
2025-02-19 21:37:09,641:INFO:              psutil: 5.9.7
2025-02-19 21:37:09,641:INFO:          markupsafe: 2.1.3
2025-02-19 21:37:09,641:INFO:             pickle5: Not installed
2025-02-19 21:37:09,641:INFO:         cloudpickle: 2.2.1
2025-02-19 21:37:09,641:INFO:         deprecation: 2.1.0
2025-02-19 21:37:09,641:INFO:              xxhash: 3.4.1
2025-02-19 21:37:09,641:INFO:           wurlitzer: 3.0.3
2025-02-19 21:37:09,641:INFO:PyCaret optional dependencies:
2025-02-19 21:37:10,664:INFO:                shap: 0.44.0
2025-02-19 21:37:10,664:INFO:           interpret: 0.5.0
2025-02-19 21:37:10,664:INFO:                umap: 0.5.5
2025-02-19 21:37:10,664:INFO:     ydata_profiling: 4.6.0
2025-02-19 21:37:10,664:INFO:  explainerdashboard: 0.4.5
2025-02-19 21:37:10,664:INFO:             autoviz: 0.1.804
2025-02-19 21:37:10,664:INFO:           fairlearn: 0.7.0
2025-02-19 21:37:10,665:INFO:          deepchecks: Not installed
2025-02-19 21:37:10,665:INFO:             xgboost: 1.6.2
2025-02-19 21:37:10,665:INFO:            catboost: 1.2.2
2025-02-19 21:37:10,665:INFO:              kmodes: 0.12.2
2025-02-19 21:37:10,665:INFO:             mlxtend: 0.23.1
2025-02-19 21:37:10,665:INFO:       statsforecast: 1.5.0
2025-02-19 21:37:10,665:INFO:        tune_sklearn: 0.5.0
2025-02-19 21:37:10,665:INFO:                 ray: 2.9.0
2025-02-19 21:37:10,665:INFO:            hyperopt: 0.2.7
2025-02-19 21:37:10,665:INFO:              optuna: 3.5.0
2025-02-19 21:37:10,665:INFO:               skopt: 0.9.0
2025-02-19 21:37:10,665:INFO:              mlflow: 1.30.1
2025-02-19 21:37:10,665:INFO:              gradio: 3.50.2
2025-02-19 21:37:10,666:INFO:             fastapi: 0.109.0
2025-02-19 21:37:10,666:INFO:             uvicorn: 0.25.0
2025-02-19 21:37:10,666:INFO:              m2cgen: 0.10.0
2025-02-19 21:37:10,666:INFO:           evidently: 0.2.8
2025-02-19 21:37:10,666:INFO:               fugue: 0.8.6
2025-02-19 21:37:10,666:INFO:           streamlit: Not installed
2025-02-19 21:37:10,666:INFO:             prophet: Not installed
2025-02-19 21:37:10,666:INFO:None
2025-02-19 21:37:10,666:INFO:Set up data.
2025-02-19 21:37:10,830:INFO:Set up folding strategy.
2025-02-19 21:37:10,830:INFO:Set up train/test split.
2025-02-19 21:37:10,840:INFO:Set up index.
2025-02-19 21:37:10,841:INFO:Assigning column types.
2025-02-19 21:37:10,847:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 21:37:10,906:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 21:37:10,911:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 21:37:10,944:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:10,968:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:11,053:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 21:37:11,054:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 21:37:11,083:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:11,086:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:11,086:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 21:37:11,146:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 21:37:11,190:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:11,197:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:11,255:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 21:37:11,288:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:11,291:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:11,291:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 21:37:11,373:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:11,376:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:11,455:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:11,457:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:11,459:INFO:Preparing preprocessing pipeline...
2025-02-19 21:37:11,460:INFO:Set up label encoding.
2025-02-19 21:37:11,461:INFO:Set up simple imputation.
2025-02-19 21:37:11,490:INFO:Finished creating preprocessing pipeline.
2025-02-19 21:37:11,495:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 21:37:11,496:INFO:Creating final display dataframe.
2025-02-19 21:37:11,588:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    1b22
2025-02-19 21:37:11,666:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:11,669:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:11,753:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:11,755:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:11,757:INFO:setup() successfully completed in 2.85s...............
2025-02-19 21:37:11,758:INFO:Initializing create_model()
2025-02-19 21:37:11,758:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2bad1cc70>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 21:37:11,758:INFO:Checking exceptions
2025-02-19 21:37:11,760:INFO:Importing libraries
2025-02-19 21:37:11,760:INFO:Copying training dataset
2025-02-19 21:37:11,765:INFO:Defining folds
2025-02-19 21:37:11,765:INFO:Declaring metric variables
2025-02-19 21:37:11,765:INFO:Importing untrained model
2025-02-19 21:37:11,765:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:37:11,766:INFO:Starting cross validation
2025-02-19 21:37:11,767:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 21:37:18,154:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,166:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,176:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,308:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,316:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,324:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,631:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,653:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,674:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,837:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,843:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:18,850:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:19,478:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:19,485:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:19,499:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:19,591:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:19,598:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:19,605:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,369:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,378:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,384:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,414:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,424:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,441:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,667:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,675:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,683:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,691:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,695:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,699:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:20,713:INFO:Calculating mean and std
2025-02-19 21:37:20,716:INFO:Creating metrics dataframe
2025-02-19 21:37:20,726:INFO:Finalizing model
2025-02-19 21:37:21,330:INFO:Uploading results into container
2025-02-19 21:37:21,331:INFO:Uploading model into container now
2025-02-19 21:37:21,338:INFO:_master_model_container: 1
2025-02-19 21:37:21,339:INFO:_display_container: 2
2025-02-19 21:37:21,339:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 21:37:21,339:INFO:create_model() successfully completed......................................
2025-02-19 21:37:21,509:INFO:Initializing tune_model()
2025-02-19 21:37:21,509:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2bad1cc70>)
2025-02-19 21:37:21,509:INFO:Checking exceptions
2025-02-19 21:37:21,517:INFO:Copying training dataset
2025-02-19 21:37:21,522:INFO:Checking base model
2025-02-19 21:37:21,522:INFO:Base model : Random Forest Classifier
2025-02-19 21:37:21,523:INFO:Declaring metric variables
2025-02-19 21:37:21,523:INFO:Defining Hyperparameters
2025-02-19 21:37:21,662:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 21:37:21,662:INFO:Tuning with n_jobs=-1
2025-02-19 21:37:21,662:INFO:Initializing RandomizedSearchCV
2025-02-19 21:37:23,026:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:23,045:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:23,063:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:23,096:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:24,495:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:24,513:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:24,533:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:24,560:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:25,280:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:25,303:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:25,316:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 21:37:25,317:INFO:Hyperparameter search completed
2025-02-19 21:37:25,317:INFO:SubProcess create_model() called ==================================
2025-02-19 21:37:25,319:INFO:Initializing create_model()
2025-02-19 21:37:25,320:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2bad1cc70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fa29fdb57b0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 21:37:25,320:INFO:Checking exceptions
2025-02-19 21:37:25,320:INFO:Importing libraries
2025-02-19 21:37:25,320:INFO:Copying training dataset
2025-02-19 21:37:25,333:INFO:Defining folds
2025-02-19 21:37:25,334:INFO:Declaring metric variables
2025-02-19 21:37:25,334:INFO:Importing untrained model
2025-02-19 21:37:25,334:INFO:Declaring custom model
2025-02-19 21:37:25,337:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:37:25,338:INFO:Starting cross validation
2025-02-19 21:37:25,341:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 21:37:26,779:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,787:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,791:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,795:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,799:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,802:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,802:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,808:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,811:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,815:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,818:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:26,825:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,258:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,273:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,289:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,310:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,317:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,324:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,327:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,335:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,337:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,343:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,345:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:28,351:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:29,108:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:29,116:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:29,125:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:29,137:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:29,141:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:29,146:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:29,151:INFO:Calculating mean and std
2025-02-19 21:37:29,152:INFO:Creating metrics dataframe
2025-02-19 21:37:29,155:INFO:Finalizing model
2025-02-19 21:37:29,671:INFO:Uploading results into container
2025-02-19 21:37:29,671:INFO:Uploading model into container now
2025-02-19 21:37:29,672:INFO:_master_model_container: 2
2025-02-19 21:37:29,672:INFO:_display_container: 3
2025-02-19 21:37:29,672:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 21:37:29,672:INFO:create_model() successfully completed......................................
2025-02-19 21:37:29,802:INFO:SubProcess create_model() end ==================================
2025-02-19 21:37:29,802:INFO:choose_better activated
2025-02-19 21:37:29,802:INFO:SubProcess create_model() called ==================================
2025-02-19 21:37:29,803:INFO:Initializing create_model()
2025-02-19 21:37:29,804:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2bad1cc70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 21:37:29,804:INFO:Checking exceptions
2025-02-19 21:37:29,805:INFO:Importing libraries
2025-02-19 21:37:29,805:INFO:Copying training dataset
2025-02-19 21:37:29,812:INFO:Defining folds
2025-02-19 21:37:29,812:INFO:Declaring metric variables
2025-02-19 21:37:29,813:INFO:Importing untrained model
2025-02-19 21:37:29,813:INFO:Declaring custom model
2025-02-19 21:37:29,814:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:37:29,814:INFO:Starting cross validation
2025-02-19 21:37:29,816:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 21:37:31,152:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,153:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,162:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,162:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,172:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,182:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,210:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,223:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,232:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,234:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,246:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:31,253:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,488:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,497:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,505:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,541:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,548:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,555:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,581:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,587:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,594:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,614:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,620:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:32,626:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:33,329:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:33,337:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:33,345:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:33,355:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:33,359:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:33,363:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:33,373:INFO:Calculating mean and std
2025-02-19 21:37:33,374:INFO:Creating metrics dataframe
2025-02-19 21:37:33,376:INFO:Finalizing model
2025-02-19 21:37:33,839:INFO:Uploading results into container
2025-02-19 21:37:33,839:INFO:Uploading model into container now
2025-02-19 21:37:33,840:INFO:_master_model_container: 3
2025-02-19 21:37:33,840:INFO:_display_container: 4
2025-02-19 21:37:33,840:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 21:37:33,840:INFO:create_model() successfully completed......................................
2025-02-19 21:37:33,964:INFO:SubProcess create_model() end ==================================
2025-02-19 21:37:33,965:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 21:37:33,966:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 21:37:33,967:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 21:37:33,967:INFO:choose_better completed
2025-02-19 21:37:33,968:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 21:37:33,980:INFO:_master_model_container: 3
2025-02-19 21:37:33,980:INFO:_display_container: 3
2025-02-19 21:37:33,981:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 21:37:33,981:INFO:tune_model() successfully completed......................................
2025-02-19 21:37:34,124:INFO:Initializing save_model()
2025-02-19 21:37:34,124:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_213704/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 21:37:34,124:INFO:Adding model into prep_pipe
2025-02-19 21:37:34,194:INFO:outputs/experiment_20250219_213704/models/tuned_model.pkl saved in current working directory
2025-02-19 21:37:34,202:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 21:37:34,202:INFO:save_model() successfully completed......................................
2025-02-19 21:37:34,330:INFO:Initializing calibrate_model()
2025-02-19 21:37:34,330:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2bad1cc70>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 21:37:34,330:INFO:Checking exceptions
2025-02-19 21:37:34,335:INFO:Preloading libraries
2025-02-19 21:37:34,335:INFO:Preparing display monitor
2025-02-19 21:37:34,337:INFO:Getting model name
2025-02-19 21:37:34,337:INFO:Base model : Random Forest Classifier
2025-02-19 21:37:34,338:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 21:37:34,338:INFO:SubProcess create_model() called ==================================
2025-02-19 21:37:34,340:INFO:Initializing create_model()
2025-02-19 21:37:34,340:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2bad1cc70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fa2a6a28d00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 21:37:34,340:INFO:Checking exceptions
2025-02-19 21:37:34,340:INFO:Importing libraries
2025-02-19 21:37:34,340:INFO:Copying training dataset
2025-02-19 21:37:34,347:INFO:Defining folds
2025-02-19 21:37:34,347:INFO:Declaring metric variables
2025-02-19 21:37:34,348:INFO:Importing untrained model
2025-02-19 21:37:34,348:INFO:Declaring custom model
2025-02-19 21:37:34,349:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:37:34,350:INFO:Starting cross validation
2025-02-19 21:37:34,351:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 21:37:40,291:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,309:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,316:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,568:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,571:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,578:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,586:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,590:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,596:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,941:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,948:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:40,982:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:46,562:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:46,570:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:46,592:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:46,755:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:46,763:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:46,769:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:46,893:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:46,902:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:46,909:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:47,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:47,441:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:47,448:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:50,320:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:50,328:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:50,336:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:50,544:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:50,549:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:50,553:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:50,558:INFO:Calculating mean and std
2025-02-19 21:37:50,558:INFO:Creating metrics dataframe
2025-02-19 21:37:50,561:INFO:Finalizing model
2025-02-19 21:37:53,167:INFO:Uploading results into container
2025-02-19 21:37:53,168:INFO:Uploading model into container now
2025-02-19 21:37:53,169:INFO:_master_model_container: 4
2025-02-19 21:37:53,169:INFO:_display_container: 4
2025-02-19 21:37:53,171:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 21:37:53,172:INFO:create_model() successfully completed......................................
2025-02-19 21:37:53,304:INFO:SubProcess create_model() end ==================================
2025-02-19 21:37:53,319:INFO:_master_model_container: 4
2025-02-19 21:37:53,319:INFO:_display_container: 4
2025-02-19 21:37:53,321:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 21:37:53,321:INFO:calibrate_model() successfully completed......................................
2025-02-19 21:37:53,456:INFO:Initializing finalize_model()
2025-02-19 21:37:53,456:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2bad1cc70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 21:37:53,458:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 21:37:53,465:INFO:Initializing create_model()
2025-02-19 21:37:53,465:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2bad1cc70>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 21:37:53,465:INFO:Checking exceptions
2025-02-19 21:37:53,466:INFO:Importing libraries
2025-02-19 21:37:53,466:INFO:Copying training dataset
2025-02-19 21:37:53,467:INFO:Defining folds
2025-02-19 21:37:53,467:INFO:Declaring metric variables
2025-02-19 21:37:53,467:INFO:Importing untrained model
2025-02-19 21:37:53,467:INFO:Declaring custom model
2025-02-19 21:37:53,469:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:37:53,470:INFO:Cross validation set to False
2025-02-19 21:37:53,470:INFO:Fitting Model
2025-02-19 21:37:56,049:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 21:37:56,049:INFO:create_model() successfully completed......................................
2025-02-19 21:37:56,177:INFO:_master_model_container: 4
2025-02-19 21:37:56,177:INFO:_display_container: 4
2025-02-19 21:37:56,195:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 21:37:56,195:INFO:finalize_model() successfully completed......................................
2025-02-19 21:37:56,338:INFO:Initializing predict_model()
2025-02-19 21:37:56,338:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2bad1cc70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7fa2a40b72e0>)
2025-02-19 21:37:56,338:INFO:Checking exceptions
2025-02-19 21:37:56,339:INFO:Preloading libraries
2025-02-19 21:37:56,339:INFO:Set up data.
2025-02-19 21:37:56,361:INFO:Set up index.
2025-02-19 21:37:57,430:INFO:PyCaret ClassificationExperiment
2025-02-19 21:37:57,431:INFO:Logging name: clf-default-name
2025-02-19 21:37:57,431:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 21:37:57,431:INFO:version 3.3.2
2025-02-19 21:37:57,431:INFO:Initializing setup()
2025-02-19 21:37:57,431:INFO:self.USI: 9ec2
2025-02-19 21:37:57,431:INFO:self._variable_keys: {'logging_param', 'idx', 'exp_name_log', 'is_multiclass', 'target_param', 'X', 'memory', 'exp_id', '_available_plots', 'data', 'seed', 'n_jobs_param', 'fold_groups_param', 'USI', 'y_test', 'y', 'y_train', 'fold_shuffle_param', 'fold_generator', 'html_param', 'pipeline', 'gpu_n_jobs_param', 'log_plots_param', '_ml_usecase', 'fix_imbalance', 'X_train', 'gpu_param', 'X_test'}
2025-02-19 21:37:57,431:INFO:Checking environment
2025-02-19 21:37:57,431:INFO:python_version: 3.10.12
2025-02-19 21:37:57,431:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-19 21:37:57,431:INFO:machine: x86_64
2025-02-19 21:37:57,431:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 21:37:57,431:INFO:Memory: svmem(total=7813279744, available=1489940480, percent=80.9, used=5430005760, free=646696960, active=3304550400, inactive=3142930432, buffers=68026368, cached=1668550656, shared=604192768, slab=330215424)
2025-02-19 21:37:57,432:INFO:Physical Core: 2
2025-02-19 21:37:57,432:INFO:Logical Core: 4
2025-02-19 21:37:57,432:INFO:Checking libraries
2025-02-19 21:37:57,432:INFO:System:
2025-02-19 21:37:57,432:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-19 21:37:57,432:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-19 21:37:57,432:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-19 21:37:57,432:INFO:PyCaret required dependencies:
2025-02-19 21:37:57,432:INFO:                 pip: 23.3.2
2025-02-19 21:37:57,432:INFO:          setuptools: 65.5.0
2025-02-19 21:37:57,432:INFO:             pycaret: 3.3.2
2025-02-19 21:37:57,432:INFO:             IPython: 8.20.0
2025-02-19 21:37:57,432:INFO:          ipywidgets: 8.1.1
2025-02-19 21:37:57,432:INFO:                tqdm: 4.66.1
2025-02-19 21:37:57,432:INFO:               numpy: 1.24.4
2025-02-19 21:37:57,433:INFO:              pandas: 1.5.3
2025-02-19 21:37:57,433:INFO:              jinja2: 3.1.3
2025-02-19 21:37:57,433:INFO:               scipy: 1.10.1
2025-02-19 21:37:57,433:INFO:              joblib: 1.3.2
2025-02-19 21:37:57,433:INFO:             sklearn: 1.2.2
2025-02-19 21:37:57,433:INFO:                pyod: 1.1.2
2025-02-19 21:37:57,433:INFO:            imblearn: 0.12.3
2025-02-19 21:37:57,433:INFO:   category_encoders: 2.6.3
2025-02-19 21:37:57,433:INFO:            lightgbm: 4.2.0
2025-02-19 21:37:57,433:INFO:               numba: 0.58.1
2025-02-19 21:37:57,433:INFO:            requests: 2.31.0
2025-02-19 21:37:57,433:INFO:          matplotlib: 3.6.0
2025-02-19 21:37:57,433:INFO:          scikitplot: 0.3.7
2025-02-19 21:37:57,433:INFO:         yellowbrick: 1.5
2025-02-19 21:37:57,433:INFO:              plotly: 5.18.0
2025-02-19 21:37:57,433:INFO:    plotly-resampler: Not installed
2025-02-19 21:37:57,433:INFO:             kaleido: 0.2.1
2025-02-19 21:37:57,433:INFO:           schemdraw: 0.15
2025-02-19 21:37:57,433:INFO:         statsmodels: 0.14.1
2025-02-19 21:37:57,433:INFO:              sktime: 0.21.1
2025-02-19 21:37:57,433:INFO:               tbats: 1.1.3
2025-02-19 21:37:57,433:INFO:            pmdarima: 2.0.4
2025-02-19 21:37:57,433:INFO:              psutil: 5.9.7
2025-02-19 21:37:57,433:INFO:          markupsafe: 2.1.3
2025-02-19 21:37:57,433:INFO:             pickle5: Not installed
2025-02-19 21:37:57,433:INFO:         cloudpickle: 2.2.1
2025-02-19 21:37:57,433:INFO:         deprecation: 2.1.0
2025-02-19 21:37:57,433:INFO:              xxhash: 3.4.1
2025-02-19 21:37:57,434:INFO:           wurlitzer: 3.0.3
2025-02-19 21:37:57,434:INFO:PyCaret optional dependencies:
2025-02-19 21:37:57,434:INFO:                shap: 0.44.0
2025-02-19 21:37:57,434:INFO:           interpret: 0.5.0
2025-02-19 21:37:57,434:INFO:                umap: 0.5.5
2025-02-19 21:37:57,434:INFO:     ydata_profiling: 4.6.0
2025-02-19 21:37:57,434:INFO:  explainerdashboard: 0.4.5
2025-02-19 21:37:57,434:INFO:             autoviz: 0.1.804
2025-02-19 21:37:57,434:INFO:           fairlearn: 0.7.0
2025-02-19 21:37:57,434:INFO:          deepchecks: Not installed
2025-02-19 21:37:57,434:INFO:             xgboost: 1.6.2
2025-02-19 21:37:57,434:INFO:            catboost: 1.2.2
2025-02-19 21:37:57,434:INFO:              kmodes: 0.12.2
2025-02-19 21:37:57,434:INFO:             mlxtend: 0.23.1
2025-02-19 21:37:57,434:INFO:       statsforecast: 1.5.0
2025-02-19 21:37:57,434:INFO:        tune_sklearn: 0.5.0
2025-02-19 21:37:57,434:INFO:                 ray: 2.9.0
2025-02-19 21:37:57,434:INFO:            hyperopt: 0.2.7
2025-02-19 21:37:57,434:INFO:              optuna: 3.5.0
2025-02-19 21:37:57,434:INFO:               skopt: 0.9.0
2025-02-19 21:37:57,434:INFO:              mlflow: 1.30.1
2025-02-19 21:37:57,434:INFO:              gradio: 3.50.2
2025-02-19 21:37:57,434:INFO:             fastapi: 0.109.0
2025-02-19 21:37:57,434:INFO:             uvicorn: 0.25.0
2025-02-19 21:37:57,434:INFO:              m2cgen: 0.10.0
2025-02-19 21:37:57,434:INFO:           evidently: 0.2.8
2025-02-19 21:37:57,435:INFO:               fugue: 0.8.6
2025-02-19 21:37:57,435:INFO:           streamlit: Not installed
2025-02-19 21:37:57,435:INFO:             prophet: Not installed
2025-02-19 21:37:57,435:INFO:None
2025-02-19 21:37:57,435:INFO:Set up data.
2025-02-19 21:37:57,458:INFO:Set up folding strategy.
2025-02-19 21:37:57,458:INFO:Set up train/test split.
2025-02-19 21:37:57,465:INFO:Set up index.
2025-02-19 21:37:57,465:INFO:Assigning column types.
2025-02-19 21:37:57,469:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 21:37:57,515:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 21:37:57,516:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 21:37:57,555:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:57,557:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:57,603:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 21:37:57,604:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 21:37:57,633:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:57,636:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:57,636:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 21:37:57,685:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 21:37:57,713:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:57,716:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:57,769:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 21:37:57,799:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:57,801:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:57,802:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 21:37:57,877:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:57,880:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:57,954:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:57,957:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:57,959:INFO:Preparing preprocessing pipeline...
2025-02-19 21:37:57,960:INFO:Set up label encoding.
2025-02-19 21:37:57,960:INFO:Set up simple imputation.
2025-02-19 21:37:57,985:INFO:Finished creating preprocessing pipeline.
2025-02-19 21:37:57,990:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-19 21:37:57,990:INFO:Creating final display dataframe.
2025-02-19 21:37:58,086:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    9ec2
2025-02-19 21:37:58,165:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:58,168:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:58,250:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-19 21:37:58,253:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-19 21:37:58,254:INFO:setup() successfully completed in 0.82s...............
2025-02-19 21:37:58,255:INFO:Initializing create_model()
2025-02-19 21:37:58,255:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2a6ee2830>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-19 21:37:58,255:INFO:Checking exceptions
2025-02-19 21:37:58,256:INFO:Importing libraries
2025-02-19 21:37:58,256:INFO:Copying training dataset
2025-02-19 21:37:58,260:INFO:Defining folds
2025-02-19 21:37:58,260:INFO:Declaring metric variables
2025-02-19 21:37:58,260:INFO:Importing untrained model
2025-02-19 21:37:58,261:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:37:58,261:INFO:Starting cross validation
2025-02-19 21:37:58,263:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 21:37:59,620:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,628:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,629:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,636:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,636:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,643:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,666:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,673:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,683:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,699:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,705:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:37:59,729:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:00,941:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:00,955:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:00,970:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,022:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,029:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,051:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,065:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,072:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,078:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,116:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,140:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,748:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,753:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,759:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,792:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,796:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,800:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:01,806:INFO:Calculating mean and std
2025-02-19 21:38:01,807:INFO:Creating metrics dataframe
2025-02-19 21:38:01,810:INFO:Finalizing model
2025-02-19 21:38:02,283:INFO:Uploading results into container
2025-02-19 21:38:02,284:INFO:Uploading model into container now
2025-02-19 21:38:02,290:INFO:_master_model_container: 1
2025-02-19 21:38:02,290:INFO:_display_container: 2
2025-02-19 21:38:02,291:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 21:38:02,291:INFO:create_model() successfully completed......................................
2025-02-19 21:38:02,433:INFO:Initializing tune_model()
2025-02-19 21:38:02,433:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2a6ee2830>)
2025-02-19 21:38:02,433:INFO:Checking exceptions
2025-02-19 21:38:02,440:INFO:Copying training dataset
2025-02-19 21:38:02,444:INFO:Checking base model
2025-02-19 21:38:02,444:INFO:Base model : Random Forest Classifier
2025-02-19 21:38:02,445:INFO:Declaring metric variables
2025-02-19 21:38:02,445:INFO:Defining Hyperparameters
2025-02-19 21:38:02,580:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-19 21:38:02,580:INFO:Tuning with n_jobs=-1
2025-02-19 21:38:02,580:INFO:Initializing RandomizedSearchCV
2025-02-19 21:38:03,905:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:03,910:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:03,973:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:04,002:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:05,360:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:05,375:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:05,399:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:05,409:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:06,204:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:06,218:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:06,232:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-19 21:38:06,232:INFO:Hyperparameter search completed
2025-02-19 21:38:06,232:INFO:SubProcess create_model() called ==================================
2025-02-19 21:38:06,233:INFO:Initializing create_model()
2025-02-19 21:38:06,233:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2a6ee2830>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fa29ffc9570>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-19 21:38:06,233:INFO:Checking exceptions
2025-02-19 21:38:06,233:INFO:Importing libraries
2025-02-19 21:38:06,233:INFO:Copying training dataset
2025-02-19 21:38:06,237:INFO:Defining folds
2025-02-19 21:38:06,237:INFO:Declaring metric variables
2025-02-19 21:38:06,238:INFO:Importing untrained model
2025-02-19 21:38:06,238:INFO:Declaring custom model
2025-02-19 21:38:06,238:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:38:06,239:INFO:Starting cross validation
2025-02-19 21:38:06,240:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 21:38:07,691:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,699:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,707:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,713:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,726:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,731:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,740:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,740:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,745:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,748:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,752:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:07,760:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,308:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,320:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,329:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,333:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,334:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,341:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,342:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,349:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,350:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,369:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,376:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:09,383:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:10,177:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:10,186:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:10,193:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:10,201:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:10,205:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:10,213:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:10,222:INFO:Calculating mean and std
2025-02-19 21:38:10,223:INFO:Creating metrics dataframe
2025-02-19 21:38:10,225:INFO:Finalizing model
2025-02-19 21:38:10,723:INFO:Uploading results into container
2025-02-19 21:38:10,724:INFO:Uploading model into container now
2025-02-19 21:38:10,725:INFO:_master_model_container: 2
2025-02-19 21:38:10,725:INFO:_display_container: 3
2025-02-19 21:38:10,725:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 21:38:10,726:INFO:create_model() successfully completed......................................
2025-02-19 21:38:10,854:INFO:SubProcess create_model() end ==================================
2025-02-19 21:38:10,854:INFO:choose_better activated
2025-02-19 21:38:10,854:INFO:SubProcess create_model() called ==================================
2025-02-19 21:38:10,855:INFO:Initializing create_model()
2025-02-19 21:38:10,855:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2a6ee2830>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 21:38:10,856:INFO:Checking exceptions
2025-02-19 21:38:10,857:INFO:Importing libraries
2025-02-19 21:38:10,857:INFO:Copying training dataset
2025-02-19 21:38:10,864:INFO:Defining folds
2025-02-19 21:38:10,865:INFO:Declaring metric variables
2025-02-19 21:38:10,865:INFO:Importing untrained model
2025-02-19 21:38:10,865:INFO:Declaring custom model
2025-02-19 21:38:10,866:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:38:10,867:INFO:Starting cross validation
2025-02-19 21:38:10,868:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 21:38:12,271:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,278:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,286:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,289:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,297:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,305:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,317:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,332:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,339:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,370:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,377:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:12,384:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,781:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,788:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,794:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,836:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,853:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,860:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,865:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,872:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,872:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,879:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,881:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:13,887:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:14,656:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:14,665:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:14,672:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:14,724:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:14,728:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:14,733:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:14,738:INFO:Calculating mean and std
2025-02-19 21:38:14,739:INFO:Creating metrics dataframe
2025-02-19 21:38:14,741:INFO:Finalizing model
2025-02-19 21:38:15,230:INFO:Uploading results into container
2025-02-19 21:38:15,231:INFO:Uploading model into container now
2025-02-19 21:38:15,232:INFO:_master_model_container: 3
2025-02-19 21:38:15,232:INFO:_display_container: 4
2025-02-19 21:38:15,232:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 21:38:15,232:INFO:create_model() successfully completed......................................
2025-02-19 21:38:15,358:INFO:SubProcess create_model() end ==================================
2025-02-19 21:38:15,359:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 21:38:15,361:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-19 21:38:15,361:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-19 21:38:15,361:INFO:choose_better completed
2025-02-19 21:38:15,362:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-19 21:38:15,376:INFO:_master_model_container: 3
2025-02-19 21:38:15,376:INFO:_display_container: 3
2025-02-19 21:38:15,376:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-19 21:38:15,376:INFO:tune_model() successfully completed......................................
2025-02-19 21:38:15,521:INFO:Initializing save_model()
2025-02-19 21:38:15,521:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250219_213704/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 21:38:15,521:INFO:Adding model into prep_pipe
2025-02-19 21:38:15,589:INFO:outputs/experiment_20250219_213704/models/tuned_model.pkl saved in current working directory
2025-02-19 21:38:15,595:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-19 21:38:15,595:INFO:save_model() successfully completed......................................
2025-02-19 21:38:15,730:INFO:Initializing calibrate_model()
2025-02-19 21:38:15,730:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2a6ee2830>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-19 21:38:15,730:INFO:Checking exceptions
2025-02-19 21:38:15,735:INFO:Preloading libraries
2025-02-19 21:38:15,735:INFO:Preparing display monitor
2025-02-19 21:38:15,738:INFO:Getting model name
2025-02-19 21:38:15,739:INFO:Base model : Random Forest Classifier
2025-02-19 21:38:15,739:INFO:Importing untrained CalibratedClassifierCV
2025-02-19 21:38:15,739:INFO:SubProcess create_model() called ==================================
2025-02-19 21:38:15,742:INFO:Initializing create_model()
2025-02-19 21:38:15,742:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2a6ee2830>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fa2a68d7700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 21:38:15,742:INFO:Checking exceptions
2025-02-19 21:38:15,742:INFO:Importing libraries
2025-02-19 21:38:15,743:INFO:Copying training dataset
2025-02-19 21:38:15,749:INFO:Defining folds
2025-02-19 21:38:15,749:INFO:Declaring metric variables
2025-02-19 21:38:15,749:INFO:Importing untrained model
2025-02-19 21:38:15,749:INFO:Declaring custom model
2025-02-19 21:38:15,751:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:38:15,751:INFO:Starting cross validation
2025-02-19 21:38:15,753:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 21:38:21,964:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:21,969:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:21,972:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:21,980:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:21,981:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:21,989:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:22,059:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:22,066:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:22,072:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:22,090:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:22,098:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:22,105:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,181:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,220:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,244:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,495:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,505:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,543:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,545:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,552:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,559:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,936:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,942:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:28,949:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:32,043:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:32,049:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:32,055:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:32,182:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:32,187:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:32,191:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 21:38:32,205:INFO:Calculating mean and std
2025-02-19 21:38:32,206:INFO:Creating metrics dataframe
2025-02-19 21:38:32,208:INFO:Finalizing model
2025-02-19 21:38:34,658:INFO:Uploading results into container
2025-02-19 21:38:34,659:INFO:Uploading model into container now
2025-02-19 21:38:34,659:INFO:_master_model_container: 4
2025-02-19 21:38:34,660:INFO:_display_container: 4
2025-02-19 21:38:34,661:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 21:38:34,661:INFO:create_model() successfully completed......................................
2025-02-19 21:38:34,792:INFO:SubProcess create_model() end ==================================
2025-02-19 21:38:34,807:INFO:_master_model_container: 4
2025-02-19 21:38:34,807:INFO:_display_container: 4
2025-02-19 21:38:34,809:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 21:38:34,809:INFO:calibrate_model() successfully completed......................................
2025-02-19 21:38:34,947:INFO:Initializing finalize_model()
2025-02-19 21:38:34,947:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2a6ee2830>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-19 21:38:34,949:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-19 21:38:34,956:INFO:Initializing create_model()
2025-02-19 21:38:34,956:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2a6ee2830>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 21:38:34,956:INFO:Checking exceptions
2025-02-19 21:38:34,957:INFO:Importing libraries
2025-02-19 21:38:34,958:INFO:Copying training dataset
2025-02-19 21:38:34,958:INFO:Defining folds
2025-02-19 21:38:34,958:INFO:Declaring metric variables
2025-02-19 21:38:34,958:INFO:Importing untrained model
2025-02-19 21:38:34,958:INFO:Declaring custom model
2025-02-19 21:38:34,960:INFO:Random Forest Classifier Imported successfully
2025-02-19 21:38:34,961:INFO:Cross validation set to False
2025-02-19 21:38:34,961:INFO:Fitting Model
2025-02-19 21:38:37,777:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 21:38:37,777:INFO:create_model() successfully completed......................................
2025-02-19 21:38:37,912:INFO:_master_model_container: 4
2025-02-19 21:38:37,913:INFO:_display_container: 4
2025-02-19 21:38:37,927:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-19 21:38:37,927:INFO:finalize_model() successfully completed......................................
2025-02-19 21:38:38,077:INFO:Initializing predict_model()
2025-02-19 21:38:38,077:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fa2a6ee2830>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7fa29fe460e0>)
2025-02-19 21:38:38,077:INFO:Checking exceptions
2025-02-19 21:38:38,077:INFO:Preloading libraries
2025-02-19 21:38:38,078:INFO:Set up data.
2025-02-19 21:38:38,099:INFO:Set up index.
2025-02-20 08:56:10,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 08:56:10,857:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 08:56:10,857:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 08:56:10,857:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 08:56:17,160:INFO:PyCaret ClassificationExperiment
2025-02-20 08:56:17,160:INFO:Logging name: clf-default-name
2025-02-20 08:56:17,160:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 08:56:17,160:INFO:version 3.3.2
2025-02-20 08:56:17,160:INFO:Initializing setup()
2025-02-20 08:56:17,160:INFO:self.USI: 9b22
2025-02-20 08:56:17,160:INFO:self._variable_keys: {'html_param', 'log_plots_param', 'X', 'is_multiclass', 'y', 'y_train', 'gpu_param', 'fold_groups_param', '_available_plots', 'n_jobs_param', 'USI', 'fold_shuffle_param', 'gpu_n_jobs_param', 'fix_imbalance', 'pipeline', 'y_test', 'X_train', 'data', 'exp_name_log', 'exp_id', 'idx', 'X_test', 'seed', 'logging_param', 'fold_generator', 'target_param', '_ml_usecase', 'memory'}
2025-02-20 08:56:17,160:INFO:Checking environment
2025-02-20 08:56:17,161:INFO:python_version: 3.10.12
2025-02-20 08:56:17,161:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-20 08:56:17,161:INFO:machine: x86_64
2025-02-20 08:56:17,162:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 08:56:17,162:INFO:Memory: svmem(total=7813279744, available=1912483840, percent=75.5, used=4946329600, free=236519424, active=3207028736, inactive=3416657920, buffers=76632064, cached=2553798656, shared=647032832, slab=340414464)
2025-02-20 08:56:17,163:INFO:Physical Core: 2
2025-02-20 08:56:17,163:INFO:Logical Core: 4
2025-02-20 08:56:17,163:INFO:Checking libraries
2025-02-20 08:56:17,163:INFO:System:
2025-02-20 08:56:17,163:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-20 08:56:17,164:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-20 08:56:17,164:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 08:56:17,164:INFO:PyCaret required dependencies:
2025-02-20 08:56:17,917:INFO:                 pip: 23.3.2
2025-02-20 08:56:17,917:INFO:          setuptools: 65.5.0
2025-02-20 08:56:17,917:INFO:             pycaret: 3.3.2
2025-02-20 08:56:17,917:INFO:             IPython: 8.20.0
2025-02-20 08:56:17,917:INFO:          ipywidgets: 8.1.1
2025-02-20 08:56:17,917:INFO:                tqdm: 4.66.1
2025-02-20 08:56:17,917:INFO:               numpy: 1.24.4
2025-02-20 08:56:17,917:INFO:              pandas: 1.5.3
2025-02-20 08:56:17,917:INFO:              jinja2: 3.1.3
2025-02-20 08:56:17,917:INFO:               scipy: 1.10.1
2025-02-20 08:56:17,917:INFO:              joblib: 1.3.2
2025-02-20 08:56:17,917:INFO:             sklearn: 1.2.2
2025-02-20 08:56:17,918:INFO:                pyod: 1.1.2
2025-02-20 08:56:17,918:INFO:            imblearn: 0.12.3
2025-02-20 08:56:17,918:INFO:   category_encoders: 2.6.3
2025-02-20 08:56:17,918:INFO:            lightgbm: 4.2.0
2025-02-20 08:56:17,918:INFO:               numba: 0.58.1
2025-02-20 08:56:17,918:INFO:            requests: 2.31.0
2025-02-20 08:56:17,918:INFO:          matplotlib: 3.6.0
2025-02-20 08:56:17,918:INFO:          scikitplot: 0.3.7
2025-02-20 08:56:17,918:INFO:         yellowbrick: 1.5
2025-02-20 08:56:17,918:INFO:              plotly: 5.18.0
2025-02-20 08:56:17,918:INFO:    plotly-resampler: Not installed
2025-02-20 08:56:17,918:INFO:             kaleido: 0.2.1
2025-02-20 08:56:17,918:INFO:           schemdraw: 0.15
2025-02-20 08:56:17,918:INFO:         statsmodels: 0.14.1
2025-02-20 08:56:17,919:INFO:              sktime: 0.21.1
2025-02-20 08:56:17,919:INFO:               tbats: 1.1.3
2025-02-20 08:56:17,919:INFO:            pmdarima: 2.0.4
2025-02-20 08:56:17,919:INFO:              psutil: 5.9.7
2025-02-20 08:56:17,919:INFO:          markupsafe: 2.1.3
2025-02-20 08:56:17,919:INFO:             pickle5: Not installed
2025-02-20 08:56:17,919:INFO:         cloudpickle: 2.2.1
2025-02-20 08:56:17,919:INFO:         deprecation: 2.1.0
2025-02-20 08:56:17,919:INFO:              xxhash: 3.4.1
2025-02-20 08:56:17,919:INFO:           wurlitzer: 3.0.3
2025-02-20 08:56:17,919:INFO:PyCaret optional dependencies:
2025-02-20 08:56:19,142:INFO:                shap: 0.44.0
2025-02-20 08:56:19,143:INFO:           interpret: 0.5.0
2025-02-20 08:56:19,143:INFO:                umap: 0.5.5
2025-02-20 08:56:19,143:INFO:     ydata_profiling: 4.6.0
2025-02-20 08:56:19,143:INFO:  explainerdashboard: 0.4.5
2025-02-20 08:56:19,143:INFO:             autoviz: 0.1.804
2025-02-20 08:56:19,143:INFO:           fairlearn: 0.7.0
2025-02-20 08:56:19,143:INFO:          deepchecks: Not installed
2025-02-20 08:56:19,143:INFO:             xgboost: 1.6.2
2025-02-20 08:56:19,143:INFO:            catboost: 1.2.2
2025-02-20 08:56:19,143:INFO:              kmodes: 0.12.2
2025-02-20 08:56:19,144:INFO:             mlxtend: 0.23.1
2025-02-20 08:56:19,144:INFO:       statsforecast: 1.5.0
2025-02-20 08:56:19,144:INFO:        tune_sklearn: 0.5.0
2025-02-20 08:56:19,144:INFO:                 ray: 2.9.0
2025-02-20 08:56:19,144:INFO:            hyperopt: 0.2.7
2025-02-20 08:56:19,144:INFO:              optuna: 3.5.0
2025-02-20 08:56:19,144:INFO:               skopt: 0.9.0
2025-02-20 08:56:19,144:INFO:              mlflow: 1.30.1
2025-02-20 08:56:19,144:INFO:              gradio: 3.50.2
2025-02-20 08:56:19,144:INFO:             fastapi: 0.109.0
2025-02-20 08:56:19,144:INFO:             uvicorn: 0.25.0
2025-02-20 08:56:19,145:INFO:              m2cgen: 0.10.0
2025-02-20 08:56:19,145:INFO:           evidently: 0.2.8
2025-02-20 08:56:19,145:INFO:               fugue: 0.8.6
2025-02-20 08:56:19,145:INFO:           streamlit: Not installed
2025-02-20 08:56:19,145:INFO:             prophet: Not installed
2025-02-20 08:56:19,145:INFO:None
2025-02-20 08:56:19,145:INFO:Set up data.
2025-02-20 08:56:19,318:INFO:Set up folding strategy.
2025-02-20 08:56:19,318:INFO:Set up train/test split.
2025-02-20 08:56:19,326:INFO:Set up index.
2025-02-20 08:56:19,326:INFO:Assigning column types.
2025-02-20 08:56:19,330:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 08:56:19,379:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 08:56:19,384:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 08:56:19,418:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:56:19,488:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:56:19,636:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 08:56:19,637:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 08:56:19,665:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:56:19,667:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:56:19,668:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 08:56:19,714:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 08:56:19,742:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:56:19,745:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:56:19,790:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 08:56:19,819:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:56:19,822:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:56:19,823:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 08:56:19,898:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:56:19,900:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:56:19,977:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:56:19,980:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:56:19,984:INFO:Preparing preprocessing pipeline...
2025-02-20 08:56:19,986:INFO:Set up label encoding.
2025-02-20 08:56:19,986:INFO:Set up simple imputation.
2025-02-20 08:56:20,014:INFO:Finished creating preprocessing pipeline.
2025-02-20 08:56:20,020:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-20 08:56:20,020:INFO:Creating final display dataframe.
2025-02-20 08:56:20,119:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    9b22
2025-02-20 08:56:20,196:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:56:20,199:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:56:20,278:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:56:20,281:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:56:20,282:INFO:setup() successfully completed in 3.12s...............
2025-02-20 08:56:20,283:INFO:Initializing create_model()
2025-02-20 08:56:20,283:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f57327c0a90>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-20 08:56:20,283:INFO:Checking exceptions
2025-02-20 08:56:20,286:INFO:Importing libraries
2025-02-20 08:56:20,287:INFO:Copying training dataset
2025-02-20 08:56:20,291:INFO:Defining folds
2025-02-20 08:56:20,291:INFO:Declaring metric variables
2025-02-20 08:56:20,291:INFO:Importing untrained model
2025-02-20 08:56:20,292:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:56:20,292:INFO:Starting cross validation
2025-02-20 08:56:20,293:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 08:56:27,707:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,717:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,723:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,734:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,742:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,750:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,777:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,792:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,801:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,812:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,821:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:27,832:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,247:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,254:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,260:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,262:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,269:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,276:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,338:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,344:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,351:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,375:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,382:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:29,389:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:30,065:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:30,072:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:30,080:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:30,090:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:30,093:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:30,097:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:30,112:INFO:Calculating mean and std
2025-02-20 08:56:30,115:INFO:Creating metrics dataframe
2025-02-20 08:56:30,126:INFO:Finalizing model
2025-02-20 08:56:30,710:INFO:Uploading results into container
2025-02-20 08:56:30,712:INFO:Uploading model into container now
2025-02-20 08:56:30,737:INFO:_master_model_container: 1
2025-02-20 08:56:30,737:INFO:_display_container: 2
2025-02-20 08:56:30,739:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 08:56:30,739:INFO:create_model() successfully completed......................................
2025-02-20 08:56:30,946:INFO:Initializing tune_model()
2025-02-20 08:56:30,946:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f57327c0a90>)
2025-02-20 08:56:30,946:INFO:Checking exceptions
2025-02-20 08:56:30,956:INFO:Copying training dataset
2025-02-20 08:56:30,960:INFO:Checking base model
2025-02-20 08:56:30,961:INFO:Base model : Random Forest Classifier
2025-02-20 08:56:30,961:INFO:Declaring metric variables
2025-02-20 08:56:30,961:INFO:Defining Hyperparameters
2025-02-20 08:56:31,097:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-20 08:56:31,097:INFO:Tuning with n_jobs=-1
2025-02-20 08:56:31,098:INFO:Initializing RandomizedSearchCV
2025-02-20 08:56:32,474:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:32,502:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:32,513:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:32,528:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:33,998:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:34,014:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:34,046:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:34,095:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:34,877:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:34,900:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:34,915:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-20 08:56:34,916:INFO:Hyperparameter search completed
2025-02-20 08:56:34,916:INFO:SubProcess create_model() called ==================================
2025-02-20 08:56:34,918:INFO:Initializing create_model()
2025-02-20 08:56:34,919:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f57327c0a90>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f5717914a90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-20 08:56:34,919:INFO:Checking exceptions
2025-02-20 08:56:34,919:INFO:Importing libraries
2025-02-20 08:56:34,919:INFO:Copying training dataset
2025-02-20 08:56:34,932:INFO:Defining folds
2025-02-20 08:56:34,932:INFO:Declaring metric variables
2025-02-20 08:56:34,933:INFO:Importing untrained model
2025-02-20 08:56:34,933:INFO:Declaring custom model
2025-02-20 08:56:34,936:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:56:34,936:INFO:Starting cross validation
2025-02-20 08:56:34,939:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 08:56:36,379:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,388:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,390:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,396:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,397:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,407:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,409:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,414:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,420:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,422:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,432:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:36,440:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,743:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,752:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,759:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,763:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,775:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,783:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,794:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,801:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,809:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,825:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,832:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:37,838:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:38,538:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:38,548:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:38,556:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:38,558:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:38,564:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:38,568:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:38,573:INFO:Calculating mean and std
2025-02-20 08:56:38,574:INFO:Creating metrics dataframe
2025-02-20 08:56:38,576:INFO:Finalizing model
2025-02-20 08:56:39,041:INFO:Uploading results into container
2025-02-20 08:56:39,042:INFO:Uploading model into container now
2025-02-20 08:56:39,043:INFO:_master_model_container: 2
2025-02-20 08:56:39,043:INFO:_display_container: 3
2025-02-20 08:56:39,045:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 08:56:39,045:INFO:create_model() successfully completed......................................
2025-02-20 08:56:39,182:INFO:SubProcess create_model() end ==================================
2025-02-20 08:56:39,183:INFO:choose_better activated
2025-02-20 08:56:39,183:INFO:SubProcess create_model() called ==================================
2025-02-20 08:56:39,185:INFO:Initializing create_model()
2025-02-20 08:56:39,185:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f57327c0a90>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 08:56:39,185:INFO:Checking exceptions
2025-02-20 08:56:39,188:INFO:Importing libraries
2025-02-20 08:56:39,188:INFO:Copying training dataset
2025-02-20 08:56:39,199:INFO:Defining folds
2025-02-20 08:56:39,199:INFO:Declaring metric variables
2025-02-20 08:56:39,200:INFO:Importing untrained model
2025-02-20 08:56:39,200:INFO:Declaring custom model
2025-02-20 08:56:39,202:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:56:39,203:INFO:Starting cross validation
2025-02-20 08:56:39,206:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 08:56:40,662:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,673:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,679:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,682:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,689:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,691:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,694:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,699:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,699:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,701:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,706:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:40,707:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,082:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,084:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,087:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,090:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,096:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,097:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,098:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,098:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,105:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,107:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,113:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,115:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,861:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,866:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,871:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,871:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,878:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,883:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:42,889:INFO:Calculating mean and std
2025-02-20 08:56:42,890:INFO:Creating metrics dataframe
2025-02-20 08:56:42,892:INFO:Finalizing model
2025-02-20 08:56:43,369:INFO:Uploading results into container
2025-02-20 08:56:43,370:INFO:Uploading model into container now
2025-02-20 08:56:43,371:INFO:_master_model_container: 3
2025-02-20 08:56:43,371:INFO:_display_container: 4
2025-02-20 08:56:43,371:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 08:56:43,371:INFO:create_model() successfully completed......................................
2025-02-20 08:56:43,504:INFO:SubProcess create_model() end ==================================
2025-02-20 08:56:43,505:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 08:56:43,506:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 08:56:43,507:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-20 08:56:43,507:INFO:choose_better completed
2025-02-20 08:56:43,507:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-20 08:56:43,522:INFO:_master_model_container: 3
2025-02-20 08:56:43,522:INFO:_display_container: 3
2025-02-20 08:56:43,523:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 08:56:43,523:INFO:tune_model() successfully completed......................................
2025-02-20 08:56:43,672:INFO:Initializing save_model()
2025-02-20 08:56:43,672:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250220_085612/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 08:56:43,672:INFO:Adding model into prep_pipe
2025-02-20 08:56:43,742:INFO:outputs/experiment_20250220_085612/models/tuned_model.pkl saved in current working directory
2025-02-20 08:56:43,748:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-20 08:56:43,748:INFO:save_model() successfully completed......................................
2025-02-20 08:56:43,882:INFO:Initializing calibrate_model()
2025-02-20 08:56:43,882:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f57327c0a90>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-20 08:56:43,882:INFO:Checking exceptions
2025-02-20 08:56:43,885:INFO:Preloading libraries
2025-02-20 08:56:43,885:INFO:Preparing display monitor
2025-02-20 08:56:43,887:INFO:Getting model name
2025-02-20 08:56:43,888:INFO:Base model : Random Forest Classifier
2025-02-20 08:56:43,888:INFO:Importing untrained CalibratedClassifierCV
2025-02-20 08:56:43,888:INFO:SubProcess create_model() called ==================================
2025-02-20 08:56:43,891:INFO:Initializing create_model()
2025-02-20 08:56:43,891:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f57327c0a90>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f57327c0bb0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 08:56:43,891:INFO:Checking exceptions
2025-02-20 08:56:43,891:INFO:Importing libraries
2025-02-20 08:56:43,891:INFO:Copying training dataset
2025-02-20 08:56:43,900:INFO:Defining folds
2025-02-20 08:56:43,900:INFO:Declaring metric variables
2025-02-20 08:56:43,900:INFO:Importing untrained model
2025-02-20 08:56:43,900:INFO:Declaring custom model
2025-02-20 08:56:43,902:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:56:43,902:INFO:Starting cross validation
2025-02-20 08:56:43,904:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 08:56:49,868:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:49,880:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:49,889:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:50,018:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:50,020:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:50,028:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:50,028:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:50,035:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:50,035:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:50,042:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:50,049:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:50,057:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:55,664:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:55,685:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:55,694:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:55,760:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:55,769:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:55,775:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:55,894:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:55,901:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:55,907:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:56,095:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:56,108:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:56,124:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:59,314:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:59,323:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:59,328:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:59,337:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:59,341:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:59,345:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:56:59,351:INFO:Calculating mean and std
2025-02-20 08:56:59,352:INFO:Creating metrics dataframe
2025-02-20 08:56:59,355:INFO:Finalizing model
2025-02-20 08:57:01,990:INFO:Uploading results into container
2025-02-20 08:57:01,991:INFO:Uploading model into container now
2025-02-20 08:57:01,991:INFO:_master_model_container: 4
2025-02-20 08:57:01,991:INFO:_display_container: 4
2025-02-20 08:57:01,992:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 08:57:01,992:INFO:create_model() successfully completed......................................
2025-02-20 08:57:02,122:INFO:SubProcess create_model() end ==================================
2025-02-20 08:57:02,136:INFO:_master_model_container: 4
2025-02-20 08:57:02,137:INFO:_display_container: 4
2025-02-20 08:57:02,138:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 08:57:02,138:INFO:calibrate_model() successfully completed......................................
2025-02-20 08:57:02,277:INFO:Initializing finalize_model()
2025-02-20 08:57:02,277:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f57327c0a90>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 08:57:02,280:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 08:57:02,286:INFO:Initializing create_model()
2025-02-20 08:57:02,286:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f57327c0a90>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 08:57:02,286:INFO:Checking exceptions
2025-02-20 08:57:02,288:INFO:Importing libraries
2025-02-20 08:57:02,288:INFO:Copying training dataset
2025-02-20 08:57:02,288:INFO:Defining folds
2025-02-20 08:57:02,288:INFO:Declaring metric variables
2025-02-20 08:57:02,288:INFO:Importing untrained model
2025-02-20 08:57:02,288:INFO:Declaring custom model
2025-02-20 08:57:02,290:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:57:02,291:INFO:Cross validation set to False
2025-02-20 08:57:02,291:INFO:Fitting Model
2025-02-20 08:57:05,000:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 08:57:05,000:INFO:create_model() successfully completed......................................
2025-02-20 08:57:05,126:INFO:_master_model_container: 4
2025-02-20 08:57:05,127:INFO:_display_container: 4
2025-02-20 08:57:05,141:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 08:57:05,141:INFO:finalize_model() successfully completed......................................
2025-02-20 08:57:05,293:INFO:Initializing predict_model()
2025-02-20 08:57:05,293:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f57327c0a90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f5717ea0310>)
2025-02-20 08:57:05,293:INFO:Checking exceptions
2025-02-20 08:57:05,293:INFO:Preloading libraries
2025-02-20 08:57:05,294:INFO:Set up data.
2025-02-20 08:57:05,317:INFO:Set up index.
2025-02-20 08:57:06,341:INFO:PyCaret ClassificationExperiment
2025-02-20 08:57:06,341:INFO:Logging name: clf-default-name
2025-02-20 08:57:06,341:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 08:57:06,341:INFO:version 3.3.2
2025-02-20 08:57:06,341:INFO:Initializing setup()
2025-02-20 08:57:06,341:INFO:self.USI: 9475
2025-02-20 08:57:06,341:INFO:self._variable_keys: {'html_param', 'log_plots_param', 'X', 'is_multiclass', 'y', 'y_train', 'gpu_param', 'fold_groups_param', '_available_plots', 'n_jobs_param', 'USI', 'fold_shuffle_param', 'gpu_n_jobs_param', 'fix_imbalance', 'pipeline', 'y_test', 'X_train', 'data', 'exp_name_log', 'exp_id', 'idx', 'X_test', 'seed', 'logging_param', 'fold_generator', 'target_param', '_ml_usecase', 'memory'}
2025-02-20 08:57:06,341:INFO:Checking environment
2025-02-20 08:57:06,341:INFO:python_version: 3.10.12
2025-02-20 08:57:06,341:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-20 08:57:06,342:INFO:machine: x86_64
2025-02-20 08:57:06,342:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 08:57:06,342:INFO:Memory: svmem(total=7813279744, available=1254236160, percent=83.9, used=5638942720, free=120369152, active=3039260672, inactive=4081758208, buffers=61026304, cached=1992941568, shared=626450432, slab=342659072)
2025-02-20 08:57:06,342:INFO:Physical Core: 2
2025-02-20 08:57:06,342:INFO:Logical Core: 4
2025-02-20 08:57:06,342:INFO:Checking libraries
2025-02-20 08:57:06,342:INFO:System:
2025-02-20 08:57:06,342:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-20 08:57:06,342:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-20 08:57:06,342:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 08:57:06,343:INFO:PyCaret required dependencies:
2025-02-20 08:57:06,343:INFO:                 pip: 23.3.2
2025-02-20 08:57:06,343:INFO:          setuptools: 65.5.0
2025-02-20 08:57:06,343:INFO:             pycaret: 3.3.2
2025-02-20 08:57:06,343:INFO:             IPython: 8.20.0
2025-02-20 08:57:06,343:INFO:          ipywidgets: 8.1.1
2025-02-20 08:57:06,343:INFO:                tqdm: 4.66.1
2025-02-20 08:57:06,343:INFO:               numpy: 1.24.4
2025-02-20 08:57:06,343:INFO:              pandas: 1.5.3
2025-02-20 08:57:06,343:INFO:              jinja2: 3.1.3
2025-02-20 08:57:06,343:INFO:               scipy: 1.10.1
2025-02-20 08:57:06,344:INFO:              joblib: 1.3.2
2025-02-20 08:57:06,344:INFO:             sklearn: 1.2.2
2025-02-20 08:57:06,344:INFO:                pyod: 1.1.2
2025-02-20 08:57:06,344:INFO:            imblearn: 0.12.3
2025-02-20 08:57:06,344:INFO:   category_encoders: 2.6.3
2025-02-20 08:57:06,344:INFO:            lightgbm: 4.2.0
2025-02-20 08:57:06,344:INFO:               numba: 0.58.1
2025-02-20 08:57:06,344:INFO:            requests: 2.31.0
2025-02-20 08:57:06,344:INFO:          matplotlib: 3.6.0
2025-02-20 08:57:06,344:INFO:          scikitplot: 0.3.7
2025-02-20 08:57:06,344:INFO:         yellowbrick: 1.5
2025-02-20 08:57:06,344:INFO:              plotly: 5.18.0
2025-02-20 08:57:06,345:INFO:    plotly-resampler: Not installed
2025-02-20 08:57:06,345:INFO:             kaleido: 0.2.1
2025-02-20 08:57:06,345:INFO:           schemdraw: 0.15
2025-02-20 08:57:06,345:INFO:         statsmodels: 0.14.1
2025-02-20 08:57:06,345:INFO:              sktime: 0.21.1
2025-02-20 08:57:06,345:INFO:               tbats: 1.1.3
2025-02-20 08:57:06,345:INFO:            pmdarima: 2.0.4
2025-02-20 08:57:06,345:INFO:              psutil: 5.9.7
2025-02-20 08:57:06,345:INFO:          markupsafe: 2.1.3
2025-02-20 08:57:06,345:INFO:             pickle5: Not installed
2025-02-20 08:57:06,345:INFO:         cloudpickle: 2.2.1
2025-02-20 08:57:06,345:INFO:         deprecation: 2.1.0
2025-02-20 08:57:06,345:INFO:              xxhash: 3.4.1
2025-02-20 08:57:06,345:INFO:           wurlitzer: 3.0.3
2025-02-20 08:57:06,345:INFO:PyCaret optional dependencies:
2025-02-20 08:57:06,345:INFO:                shap: 0.44.0
2025-02-20 08:57:06,345:INFO:           interpret: 0.5.0
2025-02-20 08:57:06,345:INFO:                umap: 0.5.5
2025-02-20 08:57:06,345:INFO:     ydata_profiling: 4.6.0
2025-02-20 08:57:06,346:INFO:  explainerdashboard: 0.4.5
2025-02-20 08:57:06,346:INFO:             autoviz: 0.1.804
2025-02-20 08:57:06,346:INFO:           fairlearn: 0.7.0
2025-02-20 08:57:06,346:INFO:          deepchecks: Not installed
2025-02-20 08:57:06,346:INFO:             xgboost: 1.6.2
2025-02-20 08:57:06,346:INFO:            catboost: 1.2.2
2025-02-20 08:57:06,346:INFO:              kmodes: 0.12.2
2025-02-20 08:57:06,346:INFO:             mlxtend: 0.23.1
2025-02-20 08:57:06,346:INFO:       statsforecast: 1.5.0
2025-02-20 08:57:06,346:INFO:        tune_sklearn: 0.5.0
2025-02-20 08:57:06,346:INFO:                 ray: 2.9.0
2025-02-20 08:57:06,346:INFO:            hyperopt: 0.2.7
2025-02-20 08:57:06,346:INFO:              optuna: 3.5.0
2025-02-20 08:57:06,346:INFO:               skopt: 0.9.0
2025-02-20 08:57:06,346:INFO:              mlflow: 1.30.1
2025-02-20 08:57:06,346:INFO:              gradio: 3.50.2
2025-02-20 08:57:06,346:INFO:             fastapi: 0.109.0
2025-02-20 08:57:06,346:INFO:             uvicorn: 0.25.0
2025-02-20 08:57:06,346:INFO:              m2cgen: 0.10.0
2025-02-20 08:57:06,346:INFO:           evidently: 0.2.8
2025-02-20 08:57:06,346:INFO:               fugue: 0.8.6
2025-02-20 08:57:06,346:INFO:           streamlit: Not installed
2025-02-20 08:57:06,346:INFO:             prophet: Not installed
2025-02-20 08:57:06,346:INFO:None
2025-02-20 08:57:06,346:INFO:Set up data.
2025-02-20 08:57:06,374:INFO:Set up folding strategy.
2025-02-20 08:57:06,375:INFO:Set up train/test split.
2025-02-20 08:57:06,381:INFO:Set up index.
2025-02-20 08:57:06,381:INFO:Assigning column types.
2025-02-20 08:57:06,385:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 08:57:06,432:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 08:57:06,433:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 08:57:06,460:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:57:06,463:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:57:06,509:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 08:57:06,510:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 08:57:06,544:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:57:06,549:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:57:06,550:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 08:57:06,595:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 08:57:06,623:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:57:06,626:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:57:06,672:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 08:57:06,699:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:57:06,702:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:57:06,703:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 08:57:06,775:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:57:06,777:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:57:06,852:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:57:06,855:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:57:06,856:INFO:Preparing preprocessing pipeline...
2025-02-20 08:57:06,857:INFO:Set up label encoding.
2025-02-20 08:57:06,857:INFO:Set up simple imputation.
2025-02-20 08:57:06,886:INFO:Finished creating preprocessing pipeline.
2025-02-20 08:57:06,891:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-20 08:57:06,891:INFO:Creating final display dataframe.
2025-02-20 08:57:06,982:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    9475
2025-02-20 08:57:07,056:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:57:07,059:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:57:07,134:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 08:57:07,137:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 08:57:07,138:INFO:setup() successfully completed in 0.8s...............
2025-02-20 08:57:07,139:INFO:Initializing create_model()
2025-02-20 08:57:07,139:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f5717e60e20>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-20 08:57:07,139:INFO:Checking exceptions
2025-02-20 08:57:07,140:INFO:Importing libraries
2025-02-20 08:57:07,140:INFO:Copying training dataset
2025-02-20 08:57:07,144:INFO:Defining folds
2025-02-20 08:57:07,144:INFO:Declaring metric variables
2025-02-20 08:57:07,145:INFO:Importing untrained model
2025-02-20 08:57:07,145:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:57:07,145:INFO:Starting cross validation
2025-02-20 08:57:07,146:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 08:57:08,458:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,464:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,484:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,493:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,501:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,512:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,529:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,540:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,548:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,615:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,621:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:08,628:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:09,798:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:09,799:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:09,805:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:09,805:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:09,813:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:09,824:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:09,840:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:09,847:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:09,863:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,135:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,141:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,160:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,620:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,626:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,632:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,714:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,718:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,722:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:10,731:INFO:Calculating mean and std
2025-02-20 08:57:10,733:INFO:Creating metrics dataframe
2025-02-20 08:57:10,738:INFO:Finalizing model
2025-02-20 08:57:11,307:INFO:Uploading results into container
2025-02-20 08:57:11,309:INFO:Uploading model into container now
2025-02-20 08:57:11,335:INFO:_master_model_container: 1
2025-02-20 08:57:11,335:INFO:_display_container: 2
2025-02-20 08:57:11,336:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 08:57:11,337:INFO:create_model() successfully completed......................................
2025-02-20 08:57:11,511:INFO:Initializing tune_model()
2025-02-20 08:57:11,511:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f5717e60e20>)
2025-02-20 08:57:11,511:INFO:Checking exceptions
2025-02-20 08:57:11,520:INFO:Copying training dataset
2025-02-20 08:57:11,526:INFO:Checking base model
2025-02-20 08:57:11,526:INFO:Base model : Random Forest Classifier
2025-02-20 08:57:11,527:INFO:Declaring metric variables
2025-02-20 08:57:11,527:INFO:Defining Hyperparameters
2025-02-20 08:57:11,658:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-20 08:57:11,659:INFO:Tuning with n_jobs=-1
2025-02-20 08:57:11,659:INFO:Initializing RandomizedSearchCV
2025-02-20 08:57:13,023:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:13,025:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:13,127:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:13,237:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:14,181:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:14,542:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:14,719:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:14,910:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:15,342:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:15,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:15,446:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-20 08:57:15,447:INFO:Hyperparameter search completed
2025-02-20 08:57:15,447:INFO:SubProcess create_model() called ==================================
2025-02-20 08:57:15,447:INFO:Initializing create_model()
2025-02-20 08:57:15,447:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f5717e60e20>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f5730afcf70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-20 08:57:15,447:INFO:Checking exceptions
2025-02-20 08:57:15,447:INFO:Importing libraries
2025-02-20 08:57:15,448:INFO:Copying training dataset
2025-02-20 08:57:15,452:INFO:Defining folds
2025-02-20 08:57:15,452:INFO:Declaring metric variables
2025-02-20 08:57:15,453:INFO:Importing untrained model
2025-02-20 08:57:15,453:INFO:Declaring custom model
2025-02-20 08:57:15,454:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:57:15,454:INFO:Starting cross validation
2025-02-20 08:57:15,455:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 08:57:16,912:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:16,920:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:16,922:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:16,929:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:16,930:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:16,936:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:16,937:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:16,943:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:16,961:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:17,047:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:17,055:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:17,062:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,352:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,361:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,368:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,396:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,414:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,424:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,424:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,433:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,449:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,696:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,707:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:18,715:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:19,318:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:19,327:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:19,334:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:19,345:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:19,350:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:19,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:19,366:INFO:Calculating mean and std
2025-02-20 08:57:19,368:INFO:Creating metrics dataframe
2025-02-20 08:57:19,374:INFO:Finalizing model
2025-02-20 08:57:19,954:INFO:Uploading results into container
2025-02-20 08:57:19,956:INFO:Uploading model into container now
2025-02-20 08:57:19,956:INFO:_master_model_container: 2
2025-02-20 08:57:19,956:INFO:_display_container: 3
2025-02-20 08:57:19,958:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 08:57:19,958:INFO:create_model() successfully completed......................................
2025-02-20 08:57:20,089:INFO:SubProcess create_model() end ==================================
2025-02-20 08:57:20,089:INFO:choose_better activated
2025-02-20 08:57:20,090:INFO:SubProcess create_model() called ==================================
2025-02-20 08:57:20,091:INFO:Initializing create_model()
2025-02-20 08:57:20,091:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f5717e60e20>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 08:57:20,091:INFO:Checking exceptions
2025-02-20 08:57:20,092:INFO:Importing libraries
2025-02-20 08:57:20,093:INFO:Copying training dataset
2025-02-20 08:57:20,099:INFO:Defining folds
2025-02-20 08:57:20,099:INFO:Declaring metric variables
2025-02-20 08:57:20,099:INFO:Importing untrained model
2025-02-20 08:57:20,099:INFO:Declaring custom model
2025-02-20 08:57:20,100:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:57:20,101:INFO:Starting cross validation
2025-02-20 08:57:20,102:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 08:57:21,530:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,539:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,544:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,547:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,551:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,559:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,567:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,568:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,576:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,632:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,639:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:21,648:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,032:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,035:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,040:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,047:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,048:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,061:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,099:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,106:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,112:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,126:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,131:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,137:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,916:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,923:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,931:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,944:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,948:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,951:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:23,963:INFO:Calculating mean and std
2025-02-20 08:57:23,965:INFO:Creating metrics dataframe
2025-02-20 08:57:23,970:INFO:Finalizing model
2025-02-20 08:57:24,498:INFO:Uploading results into container
2025-02-20 08:57:24,499:INFO:Uploading model into container now
2025-02-20 08:57:24,499:INFO:_master_model_container: 3
2025-02-20 08:57:24,499:INFO:_display_container: 4
2025-02-20 08:57:24,500:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 08:57:24,500:INFO:create_model() successfully completed......................................
2025-02-20 08:57:24,630:INFO:SubProcess create_model() end ==================================
2025-02-20 08:57:24,631:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 08:57:24,632:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 08:57:24,633:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-20 08:57:24,633:INFO:choose_better completed
2025-02-20 08:57:24,633:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-20 08:57:24,645:INFO:_master_model_container: 3
2025-02-20 08:57:24,646:INFO:_display_container: 3
2025-02-20 08:57:24,646:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 08:57:24,647:INFO:tune_model() successfully completed......................................
2025-02-20 08:57:24,791:INFO:Initializing save_model()
2025-02-20 08:57:24,791:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250220_085612/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 08:57:24,791:INFO:Adding model into prep_pipe
2025-02-20 08:57:24,860:INFO:outputs/experiment_20250220_085612/models/tuned_model.pkl saved in current working directory
2025-02-20 08:57:24,867:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-20 08:57:24,867:INFO:save_model() successfully completed......................................
2025-02-20 08:57:25,000:INFO:Initializing calibrate_model()
2025-02-20 08:57:25,000:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f5717e60e20>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-20 08:57:25,000:INFO:Checking exceptions
2025-02-20 08:57:25,003:INFO:Preloading libraries
2025-02-20 08:57:25,003:INFO:Preparing display monitor
2025-02-20 08:57:25,005:INFO:Getting model name
2025-02-20 08:57:25,005:INFO:Base model : Random Forest Classifier
2025-02-20 08:57:25,006:INFO:Importing untrained CalibratedClassifierCV
2025-02-20 08:57:25,006:INFO:SubProcess create_model() called ==================================
2025-02-20 08:57:25,008:INFO:Initializing create_model()
2025-02-20 08:57:25,008:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f5717e60e20>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f5717db2ad0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 08:57:25,008:INFO:Checking exceptions
2025-02-20 08:57:25,008:INFO:Importing libraries
2025-02-20 08:57:25,008:INFO:Copying training dataset
2025-02-20 08:57:25,015:INFO:Defining folds
2025-02-20 08:57:25,016:INFO:Declaring metric variables
2025-02-20 08:57:25,016:INFO:Importing untrained model
2025-02-20 08:57:25,016:INFO:Declaring custom model
2025-02-20 08:57:25,019:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:57:25,019:INFO:Starting cross validation
2025-02-20 08:57:25,021:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 08:57:31,260:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,266:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,273:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,302:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,315:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,321:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,361:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,368:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,375:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,443:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:31,450:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:37,403:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:37,410:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:37,419:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:37,467:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:37,475:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:37,485:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:37,837:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:37,844:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:37,852:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:38,234:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:38,243:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:38,250:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:41,503:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:41,511:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:41,519:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:41,565:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:41,569:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:41,573:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 08:57:41,581:INFO:Calculating mean and std
2025-02-20 08:57:41,581:INFO:Creating metrics dataframe
2025-02-20 08:57:41,584:INFO:Finalizing model
2025-02-20 08:57:44,032:INFO:Uploading results into container
2025-02-20 08:57:44,033:INFO:Uploading model into container now
2025-02-20 08:57:44,033:INFO:_master_model_container: 4
2025-02-20 08:57:44,033:INFO:_display_container: 4
2025-02-20 08:57:44,035:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 08:57:44,035:INFO:create_model() successfully completed......................................
2025-02-20 08:57:44,166:INFO:SubProcess create_model() end ==================================
2025-02-20 08:57:44,181:INFO:_master_model_container: 4
2025-02-20 08:57:44,181:INFO:_display_container: 4
2025-02-20 08:57:44,183:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 08:57:44,183:INFO:calibrate_model() successfully completed......................................
2025-02-20 08:57:44,322:INFO:Initializing finalize_model()
2025-02-20 08:57:44,323:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f5717e60e20>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 08:57:44,325:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 08:57:44,332:INFO:Initializing create_model()
2025-02-20 08:57:44,332:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f5717e60e20>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 08:57:44,332:INFO:Checking exceptions
2025-02-20 08:57:44,333:INFO:Importing libraries
2025-02-20 08:57:44,333:INFO:Copying training dataset
2025-02-20 08:57:44,334:INFO:Defining folds
2025-02-20 08:57:44,334:INFO:Declaring metric variables
2025-02-20 08:57:44,334:INFO:Importing untrained model
2025-02-20 08:57:44,334:INFO:Declaring custom model
2025-02-20 08:57:44,336:INFO:Random Forest Classifier Imported successfully
2025-02-20 08:57:44,337:INFO:Cross validation set to False
2025-02-20 08:57:44,337:INFO:Fitting Model
2025-02-20 08:57:47,042:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 08:57:47,042:INFO:create_model() successfully completed......................................
2025-02-20 08:57:47,179:INFO:_master_model_container: 4
2025-02-20 08:57:47,179:INFO:_display_container: 4
2025-02-20 08:57:47,196:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 08:57:47,196:INFO:finalize_model() successfully completed......................................
2025-02-20 08:57:47,348:INFO:Initializing predict_model()
2025-02-20 08:57:47,348:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f5717e60e20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f5717bc7370>)
2025-02-20 08:57:47,348:INFO:Checking exceptions
2025-02-20 08:57:47,348:INFO:Preloading libraries
2025-02-20 08:57:47,348:INFO:Set up data.
2025-02-20 08:57:47,370:INFO:Set up index.
2025-02-20 09:20:29,721:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 09:20:29,721:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 09:20:29,721:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 09:20:29,721:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 09:20:37,035:INFO:PyCaret ClassificationExperiment
2025-02-20 09:20:37,036:INFO:Logging name: clf-default-name
2025-02-20 09:20:37,036:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 09:20:37,036:INFO:version 3.3.2
2025-02-20 09:20:37,036:INFO:Initializing setup()
2025-02-20 09:20:37,036:INFO:self.USI: 21a5
2025-02-20 09:20:37,036:INFO:self._variable_keys: {'gpu_n_jobs_param', 'data', '_ml_usecase', 'X', 'fix_imbalance', 'idx', 'pipeline', 'fold_shuffle_param', 'log_plots_param', 'target_param', 'X_test', 'y', 'X_train', 'exp_id', 'y_test', 'html_param', 'memory', 'n_jobs_param', 'exp_name_log', 'fold_generator', 'gpu_param', '_available_plots', 'fold_groups_param', 'is_multiclass', 'seed', 'y_train', 'USI', 'logging_param'}
2025-02-20 09:20:37,036:INFO:Checking environment
2025-02-20 09:20:37,036:INFO:python_version: 3.10.12
2025-02-20 09:20:37,036:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-20 09:20:37,036:INFO:machine: x86_64
2025-02-20 09:20:37,038:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 09:20:37,038:INFO:Memory: svmem(total=7813279744, available=1339215872, percent=82.9, used=5023096832, free=124948480, active=2800553984, inactive=3871764480, buffers=62672896, cached=2602561536, shared=1159782400, slab=351662080)
2025-02-20 09:20:37,039:INFO:Physical Core: 2
2025-02-20 09:20:37,039:INFO:Logical Core: 4
2025-02-20 09:20:37,039:INFO:Checking libraries
2025-02-20 09:20:37,039:INFO:System:
2025-02-20 09:20:37,039:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-20 09:20:37,039:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-20 09:20:37,039:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 09:20:37,039:INFO:PyCaret required dependencies:
2025-02-20 09:20:37,826:INFO:                 pip: 23.3.2
2025-02-20 09:20:37,826:INFO:          setuptools: 65.5.0
2025-02-20 09:20:37,826:INFO:             pycaret: 3.3.2
2025-02-20 09:20:37,826:INFO:             IPython: 8.20.0
2025-02-20 09:20:37,826:INFO:          ipywidgets: 8.1.1
2025-02-20 09:20:37,827:INFO:                tqdm: 4.66.1
2025-02-20 09:20:37,827:INFO:               numpy: 1.24.4
2025-02-20 09:20:37,827:INFO:              pandas: 1.5.3
2025-02-20 09:20:37,827:INFO:              jinja2: 3.1.3
2025-02-20 09:20:37,827:INFO:               scipy: 1.10.1
2025-02-20 09:20:37,827:INFO:              joblib: 1.3.2
2025-02-20 09:20:37,827:INFO:             sklearn: 1.2.2
2025-02-20 09:20:37,827:INFO:                pyod: 1.1.2
2025-02-20 09:20:37,827:INFO:            imblearn: 0.12.3
2025-02-20 09:20:37,827:INFO:   category_encoders: 2.6.3
2025-02-20 09:20:37,827:INFO:            lightgbm: 4.2.0
2025-02-20 09:20:37,827:INFO:               numba: 0.58.1
2025-02-20 09:20:37,828:INFO:            requests: 2.31.0
2025-02-20 09:20:37,828:INFO:          matplotlib: 3.6.0
2025-02-20 09:20:37,828:INFO:          scikitplot: 0.3.7
2025-02-20 09:20:37,828:INFO:         yellowbrick: 1.5
2025-02-20 09:20:37,828:INFO:              plotly: 5.18.0
2025-02-20 09:20:37,828:INFO:    plotly-resampler: Not installed
2025-02-20 09:20:37,828:INFO:             kaleido: 0.2.1
2025-02-20 09:20:37,828:INFO:           schemdraw: 0.15
2025-02-20 09:20:37,828:INFO:         statsmodels: 0.14.1
2025-02-20 09:20:37,828:INFO:              sktime: 0.21.1
2025-02-20 09:20:37,828:INFO:               tbats: 1.1.3
2025-02-20 09:20:37,828:INFO:            pmdarima: 2.0.4
2025-02-20 09:20:37,828:INFO:              psutil: 5.9.7
2025-02-20 09:20:37,829:INFO:          markupsafe: 2.1.3
2025-02-20 09:20:37,829:INFO:             pickle5: Not installed
2025-02-20 09:20:37,829:INFO:         cloudpickle: 2.2.1
2025-02-20 09:20:37,829:INFO:         deprecation: 2.1.0
2025-02-20 09:20:37,829:INFO:              xxhash: 3.4.1
2025-02-20 09:20:37,829:INFO:           wurlitzer: 3.0.3
2025-02-20 09:20:37,829:INFO:PyCaret optional dependencies:
2025-02-20 09:20:39,367:INFO:                shap: 0.44.0
2025-02-20 09:20:39,367:INFO:           interpret: 0.5.0
2025-02-20 09:20:39,367:INFO:                umap: 0.5.5
2025-02-20 09:20:39,367:INFO:     ydata_profiling: 4.6.0
2025-02-20 09:20:39,367:INFO:  explainerdashboard: 0.4.5
2025-02-20 09:20:39,367:INFO:             autoviz: 0.1.804
2025-02-20 09:20:39,367:INFO:           fairlearn: 0.7.0
2025-02-20 09:20:39,367:INFO:          deepchecks: Not installed
2025-02-20 09:20:39,367:INFO:             xgboost: 1.6.2
2025-02-20 09:20:39,368:INFO:            catboost: 1.2.2
2025-02-20 09:20:39,368:INFO:              kmodes: 0.12.2
2025-02-20 09:20:39,368:INFO:             mlxtend: 0.23.1
2025-02-20 09:20:39,368:INFO:       statsforecast: 1.5.0
2025-02-20 09:20:39,368:INFO:        tune_sklearn: 0.5.0
2025-02-20 09:20:39,368:INFO:                 ray: 2.9.0
2025-02-20 09:20:39,368:INFO:            hyperopt: 0.2.7
2025-02-20 09:20:39,368:INFO:              optuna: 3.5.0
2025-02-20 09:20:39,368:INFO:               skopt: 0.9.0
2025-02-20 09:20:39,368:INFO:              mlflow: 1.30.1
2025-02-20 09:20:39,368:INFO:              gradio: 3.50.2
2025-02-20 09:20:39,368:INFO:             fastapi: 0.109.0
2025-02-20 09:20:39,368:INFO:             uvicorn: 0.25.0
2025-02-20 09:20:39,369:INFO:              m2cgen: 0.10.0
2025-02-20 09:20:39,369:INFO:           evidently: 0.2.8
2025-02-20 09:20:39,369:INFO:               fugue: 0.8.6
2025-02-20 09:20:39,369:INFO:           streamlit: Not installed
2025-02-20 09:20:39,369:INFO:             prophet: Not installed
2025-02-20 09:20:39,369:INFO:None
2025-02-20 09:20:39,369:INFO:Set up data.
2025-02-20 09:20:39,545:INFO:Set up folding strategy.
2025-02-20 09:20:39,545:INFO:Set up train/test split.
2025-02-20 09:20:39,559:INFO:Set up index.
2025-02-20 09:20:39,559:INFO:Assigning column types.
2025-02-20 09:20:39,568:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 09:20:39,630:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 09:20:39,636:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:20:39,673:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:20:39,738:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:20:39,921:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 09:20:39,922:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:20:39,950:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:20:39,953:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:20:39,954:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 09:20:40,006:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:20:40,044:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:20:40,047:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:20:40,110:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:20:40,145:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:20:40,148:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:20:40,149:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 09:20:40,227:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:20:40,230:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:20:40,309:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:20:40,311:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:20:40,316:INFO:Preparing preprocessing pipeline...
2025-02-20 09:20:40,319:INFO:Set up label encoding.
2025-02-20 09:20:40,319:INFO:Set up simple imputation.
2025-02-20 09:20:40,349:INFO:Finished creating preprocessing pipeline.
2025-02-20 09:20:40,355:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-20 09:20:40,355:INFO:Creating final display dataframe.
2025-02-20 09:20:40,461:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    21a5
2025-02-20 09:20:40,556:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:20:40,559:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:20:40,648:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:20:40,651:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:20:40,655:INFO:setup() successfully completed in 3.62s...............
2025-02-20 09:20:40,655:INFO:Initializing create_model()
2025-02-20 09:20:40,656:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6b1cecca0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-20 09:20:40,656:INFO:Checking exceptions
2025-02-20 09:20:40,659:INFO:Importing libraries
2025-02-20 09:20:40,659:INFO:Copying training dataset
2025-02-20 09:20:40,664:INFO:Defining folds
2025-02-20 09:20:40,664:INFO:Declaring metric variables
2025-02-20 09:20:40,664:INFO:Importing untrained model
2025-02-20 09:20:40,664:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:20:40,665:INFO:Starting cross validation
2025-02-20 09:20:40,666:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:20:48,600:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:48,615:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:48,625:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:48,785:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:48,792:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:48,829:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:49,154:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:49,157:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:49,162:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:49,164:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:49,171:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:49,174:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,201:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,209:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,224:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,271:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,289:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,319:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,973:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,983:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,989:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:50,994:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:51,011:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:51,018:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:51,399:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:51,406:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:51,413:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:51,482:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:51,486:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:51,490:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:51,498:INFO:Calculating mean and std
2025-02-20 09:20:51,499:INFO:Creating metrics dataframe
2025-02-20 09:20:51,503:INFO:Finalizing model
2025-02-20 09:20:52,067:INFO:Uploading results into container
2025-02-20 09:20:52,068:INFO:Uploading model into container now
2025-02-20 09:20:52,083:INFO:_master_model_container: 1
2025-02-20 09:20:52,083:INFO:_display_container: 2
2025-02-20 09:20:52,084:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:20:52,084:INFO:create_model() successfully completed......................................
2025-02-20 09:20:52,275:INFO:Initializing tune_model()
2025-02-20 09:20:52,275:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6b1cecca0>)
2025-02-20 09:20:52,275:INFO:Checking exceptions
2025-02-20 09:20:52,284:INFO:Copying training dataset
2025-02-20 09:20:52,288:INFO:Checking base model
2025-02-20 09:20:52,289:INFO:Base model : Random Forest Classifier
2025-02-20 09:20:52,289:INFO:Declaring metric variables
2025-02-20 09:20:52,289:INFO:Defining Hyperparameters
2025-02-20 09:20:52,433:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-20 09:20:52,433:INFO:Tuning with n_jobs=-1
2025-02-20 09:20:52,433:INFO:Initializing RandomizedSearchCV
2025-02-20 09:20:53,935:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:53,974:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:53,998:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:54,034:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:55,417:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:55,453:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:55,499:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:55,541:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:56,330:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:56,347:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:56,357:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-20 09:20:56,358:INFO:Hyperparameter search completed
2025-02-20 09:20:56,358:INFO:SubProcess create_model() called ==================================
2025-02-20 09:20:56,359:INFO:Initializing create_model()
2025-02-20 09:20:56,359:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6b1cecca0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fb696ed18a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-20 09:20:56,359:INFO:Checking exceptions
2025-02-20 09:20:56,359:INFO:Importing libraries
2025-02-20 09:20:56,359:INFO:Copying training dataset
2025-02-20 09:20:56,366:INFO:Defining folds
2025-02-20 09:20:56,366:INFO:Declaring metric variables
2025-02-20 09:20:56,366:INFO:Importing untrained model
2025-02-20 09:20:56,366:INFO:Declaring custom model
2025-02-20 09:20:56,367:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:20:56,367:INFO:Starting cross validation
2025-02-20 09:20:56,368:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:20:58,006:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,014:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,024:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,030:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,042:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,049:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,102:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,110:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,119:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,167:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,179:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:58,220:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,618:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,619:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,638:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,633:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,667:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,676:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,782:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,798:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,805:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,969:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,979:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:20:59,987:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:00,660:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:00,668:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:00,671:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:00,675:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:00,676:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:00,680:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:00,694:INFO:Calculating mean and std
2025-02-20 09:21:00,695:INFO:Creating metrics dataframe
2025-02-20 09:21:00,697:INFO:Finalizing model
2025-02-20 09:21:01,248:INFO:Uploading results into container
2025-02-20 09:21:01,249:INFO:Uploading model into container now
2025-02-20 09:21:01,252:INFO:_master_model_container: 2
2025-02-20 09:21:01,252:INFO:_display_container: 3
2025-02-20 09:21:01,253:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:21:01,253:INFO:create_model() successfully completed......................................
2025-02-20 09:21:01,408:INFO:SubProcess create_model() end ==================================
2025-02-20 09:21:01,409:INFO:choose_better activated
2025-02-20 09:21:01,409:INFO:SubProcess create_model() called ==================================
2025-02-20 09:21:01,410:INFO:Initializing create_model()
2025-02-20 09:21:01,411:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6b1cecca0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:21:01,411:INFO:Checking exceptions
2025-02-20 09:21:01,413:INFO:Importing libraries
2025-02-20 09:21:01,413:INFO:Copying training dataset
2025-02-20 09:21:01,422:INFO:Defining folds
2025-02-20 09:21:01,422:INFO:Declaring metric variables
2025-02-20 09:21:01,422:INFO:Importing untrained model
2025-02-20 09:21:01,422:INFO:Declaring custom model
2025-02-20 09:21:01,423:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:21:01,424:INFO:Starting cross validation
2025-02-20 09:21:01,426:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:21:03,250:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,252:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,278:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,288:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,300:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,301:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,482:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,492:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,522:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,517:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,549:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:03,682:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:05,364:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:05,398:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:05,422:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:05,562:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:05,617:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:05,658:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:05,861:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:05,906:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:05,965:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:06,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:06,193:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:06,240:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:07,136:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:07,150:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:07,160:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:07,239:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:07,247:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:07,258:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:07,272:INFO:Calculating mean and std
2025-02-20 09:21:07,272:INFO:Creating metrics dataframe
2025-02-20 09:21:07,276:INFO:Finalizing model
2025-02-20 09:21:08,162:INFO:Uploading results into container
2025-02-20 09:21:08,164:INFO:Uploading model into container now
2025-02-20 09:21:08,164:INFO:_master_model_container: 3
2025-02-20 09:21:08,165:INFO:_display_container: 4
2025-02-20 09:21:08,166:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:21:08,166:INFO:create_model() successfully completed......................................
2025-02-20 09:21:08,405:INFO:SubProcess create_model() end ==================================
2025-02-20 09:21:08,406:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 09:21:08,408:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 09:21:08,409:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-20 09:21:08,410:INFO:choose_better completed
2025-02-20 09:21:08,410:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-20 09:21:08,458:INFO:_master_model_container: 3
2025-02-20 09:21:08,459:INFO:_display_container: 3
2025-02-20 09:21:08,461:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:21:08,461:INFO:tune_model() successfully completed......................................
2025-02-20 09:21:08,818:INFO:Initializing save_model()
2025-02-20 09:21:08,818:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250220_092031/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 09:21:08,818:INFO:Adding model into prep_pipe
2025-02-20 09:21:09,026:INFO:outputs/experiment_20250220_092031/models/tuned_model.pkl saved in current working directory
2025-02-20 09:21:09,063:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-20 09:21:09,063:INFO:save_model() successfully completed......................................
2025-02-20 09:21:09,285:INFO:Initializing calibrate_model()
2025-02-20 09:21:09,285:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6b1cecca0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-20 09:21:09,285:INFO:Checking exceptions
2025-02-20 09:21:09,290:INFO:Preloading libraries
2025-02-20 09:21:09,291:INFO:Preparing display monitor
2025-02-20 09:21:09,294:INFO:Getting model name
2025-02-20 09:21:09,294:INFO:Base model : Random Forest Classifier
2025-02-20 09:21:09,295:INFO:Importing untrained CalibratedClassifierCV
2025-02-20 09:21:09,296:INFO:SubProcess create_model() called ==================================
2025-02-20 09:21:09,301:INFO:Initializing create_model()
2025-02-20 09:21:09,302:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6b1cecca0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fb6b00deb90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:21:09,302:INFO:Checking exceptions
2025-02-20 09:21:09,302:INFO:Importing libraries
2025-02-20 09:21:09,302:INFO:Copying training dataset
2025-02-20 09:21:09,320:INFO:Defining folds
2025-02-20 09:21:09,321:INFO:Declaring metric variables
2025-02-20 09:21:09,322:INFO:Importing untrained model
2025-02-20 09:21:09,322:INFO:Declaring custom model
2025-02-20 09:21:09,325:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:21:09,326:INFO:Starting cross validation
2025-02-20 09:21:09,329:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:21:18,550:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:18,593:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:18,618:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:18,759:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:18,794:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:18,804:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:19,022:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:19,058:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:19,116:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:20,002:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:20,013:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:20,025:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:26,822:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:26,830:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:26,846:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:26,956:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:26,964:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:26,973:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:27,389:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:27,398:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:27,407:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:27,489:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:27,551:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:27,559:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:31,384:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:31,393:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:31,401:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:31,755:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:31,766:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:31,774:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:31,782:INFO:Calculating mean and std
2025-02-20 09:21:31,783:INFO:Creating metrics dataframe
2025-02-20 09:21:31,786:INFO:Finalizing model
2025-02-20 09:21:34,204:INFO:Uploading results into container
2025-02-20 09:21:34,205:INFO:Uploading model into container now
2025-02-20 09:21:34,206:INFO:_master_model_container: 4
2025-02-20 09:21:34,206:INFO:_display_container: 4
2025-02-20 09:21:34,209:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:21:34,209:INFO:create_model() successfully completed......................................
2025-02-20 09:21:34,353:INFO:SubProcess create_model() end ==================================
2025-02-20 09:21:34,372:INFO:_master_model_container: 4
2025-02-20 09:21:34,372:INFO:_display_container: 4
2025-02-20 09:21:34,374:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:21:34,374:INFO:calibrate_model() successfully completed......................................
2025-02-20 09:21:34,523:INFO:Initializing finalize_model()
2025-02-20 09:21:34,523:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6b1cecca0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 09:21:34,525:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:21:34,535:INFO:Initializing create_model()
2025-02-20 09:21:34,535:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6b1cecca0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:21:34,535:INFO:Checking exceptions
2025-02-20 09:21:34,537:INFO:Importing libraries
2025-02-20 09:21:34,537:INFO:Copying training dataset
2025-02-20 09:21:34,538:INFO:Defining folds
2025-02-20 09:21:34,538:INFO:Declaring metric variables
2025-02-20 09:21:34,538:INFO:Importing untrained model
2025-02-20 09:21:34,538:INFO:Declaring custom model
2025-02-20 09:21:34,539:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:21:34,541:INFO:Cross validation set to False
2025-02-20 09:21:34,541:INFO:Fitting Model
2025-02-20 09:21:38,049:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 09:21:38,049:INFO:create_model() successfully completed......................................
2025-02-20 09:21:38,186:INFO:_master_model_container: 4
2025-02-20 09:21:38,186:INFO:_display_container: 4
2025-02-20 09:21:38,208:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 09:21:38,208:INFO:finalize_model() successfully completed......................................
2025-02-20 09:21:38,396:INFO:Initializing predict_model()
2025-02-20 09:21:38,396:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6b1cecca0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7fb6973883a0>)
2025-02-20 09:21:38,397:INFO:Checking exceptions
2025-02-20 09:21:38,397:INFO:Preloading libraries
2025-02-20 09:21:38,397:INFO:Set up data.
2025-02-20 09:21:38,420:INFO:Set up index.
2025-02-20 09:21:39,587:INFO:PyCaret ClassificationExperiment
2025-02-20 09:21:39,587:INFO:Logging name: clf-default-name
2025-02-20 09:21:39,587:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 09:21:39,587:INFO:version 3.3.2
2025-02-20 09:21:39,588:INFO:Initializing setup()
2025-02-20 09:21:39,588:INFO:self.USI: 5347
2025-02-20 09:21:39,588:INFO:self._variable_keys: {'gpu_n_jobs_param', 'data', '_ml_usecase', 'X', 'fix_imbalance', 'idx', 'pipeline', 'fold_shuffle_param', 'log_plots_param', 'target_param', 'X_test', 'y', 'X_train', 'exp_id', 'y_test', 'html_param', 'memory', 'n_jobs_param', 'exp_name_log', 'fold_generator', 'gpu_param', '_available_plots', 'fold_groups_param', 'is_multiclass', 'seed', 'y_train', 'USI', 'logging_param'}
2025-02-20 09:21:39,588:INFO:Checking environment
2025-02-20 09:21:39,588:INFO:python_version: 3.10.12
2025-02-20 09:21:39,588:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-20 09:21:39,588:INFO:machine: x86_64
2025-02-20 09:21:39,589:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 09:21:39,589:INFO:Memory: svmem(total=7813279744, available=787582976, percent=89.9, used=5652074496, free=160583680, active=2899554304, inactive=4034084864, buffers=18964480, cached=1981657088, shared=1082060800, slab=352485376)
2025-02-20 09:21:39,590:INFO:Physical Core: 2
2025-02-20 09:21:39,590:INFO:Logical Core: 4
2025-02-20 09:21:39,590:INFO:Checking libraries
2025-02-20 09:21:39,590:INFO:System:
2025-02-20 09:21:39,590:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-20 09:21:39,590:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-20 09:21:39,591:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 09:21:39,591:INFO:PyCaret required dependencies:
2025-02-20 09:21:39,591:INFO:                 pip: 23.3.2
2025-02-20 09:21:39,591:INFO:          setuptools: 65.5.0
2025-02-20 09:21:39,591:INFO:             pycaret: 3.3.2
2025-02-20 09:21:39,591:INFO:             IPython: 8.20.0
2025-02-20 09:21:39,591:INFO:          ipywidgets: 8.1.1
2025-02-20 09:21:39,591:INFO:                tqdm: 4.66.1
2025-02-20 09:21:39,591:INFO:               numpy: 1.24.4
2025-02-20 09:21:39,591:INFO:              pandas: 1.5.3
2025-02-20 09:21:39,591:INFO:              jinja2: 3.1.3
2025-02-20 09:21:39,591:INFO:               scipy: 1.10.1
2025-02-20 09:21:39,592:INFO:              joblib: 1.3.2
2025-02-20 09:21:39,592:INFO:             sklearn: 1.2.2
2025-02-20 09:21:39,592:INFO:                pyod: 1.1.2
2025-02-20 09:21:39,592:INFO:            imblearn: 0.12.3
2025-02-20 09:21:39,592:INFO:   category_encoders: 2.6.3
2025-02-20 09:21:39,592:INFO:            lightgbm: 4.2.0
2025-02-20 09:21:39,592:INFO:               numba: 0.58.1
2025-02-20 09:21:39,592:INFO:            requests: 2.31.0
2025-02-20 09:21:39,592:INFO:          matplotlib: 3.6.0
2025-02-20 09:21:39,592:INFO:          scikitplot: 0.3.7
2025-02-20 09:21:39,592:INFO:         yellowbrick: 1.5
2025-02-20 09:21:39,592:INFO:              plotly: 5.18.0
2025-02-20 09:21:39,592:INFO:    plotly-resampler: Not installed
2025-02-20 09:21:39,592:INFO:             kaleido: 0.2.1
2025-02-20 09:21:39,592:INFO:           schemdraw: 0.15
2025-02-20 09:21:39,592:INFO:         statsmodels: 0.14.1
2025-02-20 09:21:39,592:INFO:              sktime: 0.21.1
2025-02-20 09:21:39,592:INFO:               tbats: 1.1.3
2025-02-20 09:21:39,592:INFO:            pmdarima: 2.0.4
2025-02-20 09:21:39,592:INFO:              psutil: 5.9.7
2025-02-20 09:21:39,593:INFO:          markupsafe: 2.1.3
2025-02-20 09:21:39,593:INFO:             pickle5: Not installed
2025-02-20 09:21:39,593:INFO:         cloudpickle: 2.2.1
2025-02-20 09:21:39,593:INFO:         deprecation: 2.1.0
2025-02-20 09:21:39,593:INFO:              xxhash: 3.4.1
2025-02-20 09:21:39,593:INFO:           wurlitzer: 3.0.3
2025-02-20 09:21:39,593:INFO:PyCaret optional dependencies:
2025-02-20 09:21:39,593:INFO:                shap: 0.44.0
2025-02-20 09:21:39,593:INFO:           interpret: 0.5.0
2025-02-20 09:21:39,593:INFO:                umap: 0.5.5
2025-02-20 09:21:39,593:INFO:     ydata_profiling: 4.6.0
2025-02-20 09:21:39,593:INFO:  explainerdashboard: 0.4.5
2025-02-20 09:21:39,593:INFO:             autoviz: 0.1.804
2025-02-20 09:21:39,593:INFO:           fairlearn: 0.7.0
2025-02-20 09:21:39,593:INFO:          deepchecks: Not installed
2025-02-20 09:21:39,593:INFO:             xgboost: 1.6.2
2025-02-20 09:21:39,593:INFO:            catboost: 1.2.2
2025-02-20 09:21:39,593:INFO:              kmodes: 0.12.2
2025-02-20 09:21:39,593:INFO:             mlxtend: 0.23.1
2025-02-20 09:21:39,593:INFO:       statsforecast: 1.5.0
2025-02-20 09:21:39,593:INFO:        tune_sklearn: 0.5.0
2025-02-20 09:21:39,593:INFO:                 ray: 2.9.0
2025-02-20 09:21:39,594:INFO:            hyperopt: 0.2.7
2025-02-20 09:21:39,594:INFO:              optuna: 3.5.0
2025-02-20 09:21:39,594:INFO:               skopt: 0.9.0
2025-02-20 09:21:39,594:INFO:              mlflow: 1.30.1
2025-02-20 09:21:39,594:INFO:              gradio: 3.50.2
2025-02-20 09:21:39,594:INFO:             fastapi: 0.109.0
2025-02-20 09:21:39,594:INFO:             uvicorn: 0.25.0
2025-02-20 09:21:39,594:INFO:              m2cgen: 0.10.0
2025-02-20 09:21:39,594:INFO:           evidently: 0.2.8
2025-02-20 09:21:39,594:INFO:               fugue: 0.8.6
2025-02-20 09:21:39,594:INFO:           streamlit: Not installed
2025-02-20 09:21:39,594:INFO:             prophet: Not installed
2025-02-20 09:21:39,594:INFO:None
2025-02-20 09:21:39,594:INFO:Set up data.
2025-02-20 09:21:39,623:INFO:Set up folding strategy.
2025-02-20 09:21:39,623:INFO:Set up train/test split.
2025-02-20 09:21:39,631:INFO:Set up index.
2025-02-20 09:21:39,631:INFO:Assigning column types.
2025-02-20 09:21:39,635:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 09:21:39,713:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 09:21:39,714:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:21:39,749:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:21:39,752:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:21:39,898:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 09:21:39,900:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:21:39,994:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:21:40,000:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:21:40,002:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 09:21:40,124:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:21:40,242:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:21:40,252:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:21:40,458:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:21:40,513:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:21:40,517:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:21:40,518:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 09:21:40,644:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:21:40,647:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:21:40,776:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:21:40,782:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:21:40,783:INFO:Preparing preprocessing pipeline...
2025-02-20 09:21:40,786:INFO:Set up label encoding.
2025-02-20 09:21:40,786:INFO:Set up simple imputation.
2025-02-20 09:21:40,843:INFO:Finished creating preprocessing pipeline.
2025-02-20 09:21:40,851:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-20 09:21:40,851:INFO:Creating final display dataframe.
2025-02-20 09:21:40,997:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    5347
2025-02-20 09:21:41,120:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:21:41,126:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:21:41,298:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:21:41,303:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:21:41,305:INFO:setup() successfully completed in 1.72s...............
2025-02-20 09:21:41,305:INFO:Initializing create_model()
2025-02-20 09:21:41,306:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6971a9810>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-20 09:21:41,306:INFO:Checking exceptions
2025-02-20 09:21:41,307:INFO:Importing libraries
2025-02-20 09:21:41,307:INFO:Copying training dataset
2025-02-20 09:21:41,312:INFO:Defining folds
2025-02-20 09:21:41,312:INFO:Declaring metric variables
2025-02-20 09:21:41,312:INFO:Importing untrained model
2025-02-20 09:21:41,313:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:21:41,313:INFO:Starting cross validation
2025-02-20 09:21:41,315:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:21:42,671:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:42,691:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:42,731:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:43,601:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:43,616:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:43,669:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:43,751:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:43,762:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:43,778:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:43,831:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:43,845:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:43,858:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:44,733:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:44,756:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:44,804:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:45,206:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:45,217:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:45,234:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:45,296:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:45,314:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:45,344:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:45,436:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:45,446:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:45,492:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:46,055:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:46,062:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:46,068:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:46,367:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:46,385:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:46,394:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:46,406:INFO:Calculating mean and std
2025-02-20 09:21:46,408:INFO:Creating metrics dataframe
2025-02-20 09:21:46,412:INFO:Finalizing model
2025-02-20 09:21:47,603:INFO:Uploading results into container
2025-02-20 09:21:47,604:INFO:Uploading model into container now
2025-02-20 09:21:47,618:INFO:_master_model_container: 1
2025-02-20 09:21:47,618:INFO:_display_container: 2
2025-02-20 09:21:47,619:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:21:47,619:INFO:create_model() successfully completed......................................
2025-02-20 09:21:47,794:INFO:Initializing tune_model()
2025-02-20 09:21:47,794:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6971a9810>)
2025-02-20 09:21:47,794:INFO:Checking exceptions
2025-02-20 09:21:47,802:INFO:Copying training dataset
2025-02-20 09:21:47,807:INFO:Checking base model
2025-02-20 09:21:47,808:INFO:Base model : Random Forest Classifier
2025-02-20 09:21:47,808:INFO:Declaring metric variables
2025-02-20 09:21:47,809:INFO:Defining Hyperparameters
2025-02-20 09:21:47,955:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-20 09:21:47,955:INFO:Tuning with n_jobs=-1
2025-02-20 09:21:47,955:INFO:Initializing RandomizedSearchCV
2025-02-20 09:21:49,815:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:49,852:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:49,912:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:50,042:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:51,638:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:51,778:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:51,930:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:52,015:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:52,857:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:52,963:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:52,978:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-20 09:21:52,978:INFO:Hyperparameter search completed
2025-02-20 09:21:52,979:INFO:SubProcess create_model() called ==================================
2025-02-20 09:21:52,980:INFO:Initializing create_model()
2025-02-20 09:21:52,980:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6971a9810>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fb69dc382b0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-20 09:21:52,980:INFO:Checking exceptions
2025-02-20 09:21:52,981:INFO:Importing libraries
2025-02-20 09:21:52,981:INFO:Copying training dataset
2025-02-20 09:21:53,000:INFO:Defining folds
2025-02-20 09:21:53,001:INFO:Declaring metric variables
2025-02-20 09:21:53,001:INFO:Importing untrained model
2025-02-20 09:21:53,002:INFO:Declaring custom model
2025-02-20 09:21:53,004:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:21:53,005:INFO:Starting cross validation
2025-02-20 09:21:53,008:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:21:55,068:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,103:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,103:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,109:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,119:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,119:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,120:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,127:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,137:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,247:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,256:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:55,262:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:56,800:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:56,851:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:56,844:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:56,858:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:56,866:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:56,872:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:56,874:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:56,898:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:56,903:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,042:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,049:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,056:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,860:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,865:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,870:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,921:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,928:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,936:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:21:57,946:INFO:Calculating mean and std
2025-02-20 09:21:57,947:INFO:Creating metrics dataframe
2025-02-20 09:21:57,952:INFO:Finalizing model
2025-02-20 09:21:58,445:INFO:Uploading results into container
2025-02-20 09:21:58,446:INFO:Uploading model into container now
2025-02-20 09:21:58,446:INFO:_master_model_container: 2
2025-02-20 09:21:58,446:INFO:_display_container: 3
2025-02-20 09:21:58,447:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:21:58,447:INFO:create_model() successfully completed......................................
2025-02-20 09:21:58,586:INFO:SubProcess create_model() end ==================================
2025-02-20 09:21:58,586:INFO:choose_better activated
2025-02-20 09:21:58,587:INFO:SubProcess create_model() called ==================================
2025-02-20 09:21:58,588:INFO:Initializing create_model()
2025-02-20 09:21:58,588:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6971a9810>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:21:58,588:INFO:Checking exceptions
2025-02-20 09:21:58,590:INFO:Importing libraries
2025-02-20 09:21:58,590:INFO:Copying training dataset
2025-02-20 09:21:58,598:INFO:Defining folds
2025-02-20 09:21:58,598:INFO:Declaring metric variables
2025-02-20 09:21:58,598:INFO:Importing untrained model
2025-02-20 09:21:58,598:INFO:Declaring custom model
2025-02-20 09:21:58,600:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:21:58,601:INFO:Starting cross validation
2025-02-20 09:21:58,603:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:22:00,275:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:00,287:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:00,336:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:00,773:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:00,773:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:00,796:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:00,798:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:00,808:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:00,834:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:00,984:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:01,000:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:01,017:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:02,852:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:02,861:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:02,867:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:02,887:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:02,892:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:02,897:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:02,907:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:02,917:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:02,924:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:03,043:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:03,052:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:03,075:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:04,141:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:04,143:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:04,147:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:04,155:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:04,166:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:04,166:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:04,170:INFO:Calculating mean and std
2025-02-20 09:22:04,171:INFO:Creating metrics dataframe
2025-02-20 09:22:04,174:INFO:Finalizing model
2025-02-20 09:22:04,873:INFO:Uploading results into container
2025-02-20 09:22:04,876:INFO:Uploading model into container now
2025-02-20 09:22:04,877:INFO:_master_model_container: 3
2025-02-20 09:22:04,877:INFO:_display_container: 4
2025-02-20 09:22:04,879:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:22:04,879:INFO:create_model() successfully completed......................................
2025-02-20 09:22:05,150:INFO:SubProcess create_model() end ==================================
2025-02-20 09:22:05,152:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 09:22:05,154:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 09:22:05,155:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-20 09:22:05,155:INFO:choose_better completed
2025-02-20 09:22:05,156:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-20 09:22:05,172:INFO:_master_model_container: 3
2025-02-20 09:22:05,172:INFO:_display_container: 3
2025-02-20 09:22:05,173:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:22:05,173:INFO:tune_model() successfully completed......................................
2025-02-20 09:22:05,392:INFO:Initializing save_model()
2025-02-20 09:22:05,392:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250220_092031/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 09:22:05,392:INFO:Adding model into prep_pipe
2025-02-20 09:22:05,517:INFO:outputs/experiment_20250220_092031/models/tuned_model.pkl saved in current working directory
2025-02-20 09:22:05,588:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-20 09:22:05,588:INFO:save_model() successfully completed......................................
2025-02-20 09:22:05,817:INFO:Initializing calibrate_model()
2025-02-20 09:22:05,817:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6971a9810>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-20 09:22:05,817:INFO:Checking exceptions
2025-02-20 09:22:05,821:INFO:Preloading libraries
2025-02-20 09:22:05,822:INFO:Preparing display monitor
2025-02-20 09:22:05,827:INFO:Getting model name
2025-02-20 09:22:05,828:INFO:Base model : Random Forest Classifier
2025-02-20 09:22:05,829:INFO:Importing untrained CalibratedClassifierCV
2025-02-20 09:22:05,829:INFO:SubProcess create_model() called ==================================
2025-02-20 09:22:05,834:INFO:Initializing create_model()
2025-02-20 09:22:05,834:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6971a9810>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fb69747d540>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:22:05,834:INFO:Checking exceptions
2025-02-20 09:22:05,834:INFO:Importing libraries
2025-02-20 09:22:05,835:INFO:Copying training dataset
2025-02-20 09:22:05,842:INFO:Defining folds
2025-02-20 09:22:05,842:INFO:Declaring metric variables
2025-02-20 09:22:05,843:INFO:Importing untrained model
2025-02-20 09:22:05,843:INFO:Declaring custom model
2025-02-20 09:22:05,845:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:22:05,845:INFO:Starting cross validation
2025-02-20 09:22:05,848:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:22:12,618:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,628:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,638:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,685:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,692:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,700:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,760:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,767:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,774:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,774:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,781:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:12,789:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,357:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,365:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,373:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,411:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,421:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,588:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,597:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,605:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,694:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,712:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:19,725:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:23,845:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:23,850:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:23,856:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:23,856:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:23,860:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:23,865:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:22:23,875:INFO:Calculating mean and std
2025-02-20 09:22:23,878:INFO:Creating metrics dataframe
2025-02-20 09:22:23,888:INFO:Finalizing model
2025-02-20 09:22:26,563:INFO:Uploading results into container
2025-02-20 09:22:26,565:INFO:Uploading model into container now
2025-02-20 09:22:26,565:INFO:_master_model_container: 4
2025-02-20 09:22:26,565:INFO:_display_container: 4
2025-02-20 09:22:26,569:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:22:26,570:INFO:create_model() successfully completed......................................
2025-02-20 09:22:26,704:INFO:SubProcess create_model() end ==================================
2025-02-20 09:22:26,725:INFO:_master_model_container: 4
2025-02-20 09:22:26,725:INFO:_display_container: 4
2025-02-20 09:22:26,727:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:22:26,727:INFO:calibrate_model() successfully completed......................................
2025-02-20 09:22:26,873:INFO:Initializing finalize_model()
2025-02-20 09:22:26,873:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6971a9810>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 09:22:26,875:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:22:26,882:INFO:Initializing create_model()
2025-02-20 09:22:26,882:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6971a9810>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:22:26,882:INFO:Checking exceptions
2025-02-20 09:22:26,884:INFO:Importing libraries
2025-02-20 09:22:26,884:INFO:Copying training dataset
2025-02-20 09:22:26,884:INFO:Defining folds
2025-02-20 09:22:26,884:INFO:Declaring metric variables
2025-02-20 09:22:26,884:INFO:Importing untrained model
2025-02-20 09:22:26,885:INFO:Declaring custom model
2025-02-20 09:22:26,886:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:22:26,888:INFO:Cross validation set to False
2025-02-20 09:22:26,888:INFO:Fitting Model
2025-02-20 09:22:29,692:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 09:22:29,692:INFO:create_model() successfully completed......................................
2025-02-20 09:22:29,834:INFO:_master_model_container: 4
2025-02-20 09:22:29,834:INFO:_display_container: 4
2025-02-20 09:22:29,850:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 09:22:29,850:INFO:finalize_model() successfully completed......................................
2025-02-20 09:22:30,022:INFO:Initializing predict_model()
2025-02-20 09:22:30,022:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb6971a9810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7fb696f10d30>)
2025-02-20 09:22:30,022:INFO:Checking exceptions
2025-02-20 09:22:30,022:INFO:Preloading libraries
2025-02-20 09:22:30,023:INFO:Set up data.
2025-02-20 09:22:30,050:INFO:Set up index.
2025-02-20 09:52:04,876:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 09:52:04,877:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 09:52:04,877:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 09:52:04,877:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 09:52:12,226:INFO:PyCaret ClassificationExperiment
2025-02-20 09:52:12,226:INFO:Logging name: clf-default-name
2025-02-20 09:52:12,226:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 09:52:12,226:INFO:version 3.3.2
2025-02-20 09:52:12,226:INFO:Initializing setup()
2025-02-20 09:52:12,226:INFO:self.USI: c57f
2025-02-20 09:52:12,226:INFO:self._variable_keys: {'exp_name_log', 'html_param', 'X_test', 'logging_param', 'target_param', 'exp_id', 'gpu_param', '_ml_usecase', 'idx', 'seed', 'fold_generator', 'data', 'fold_shuffle_param', 'y', 'is_multiclass', '_available_plots', 'memory', 'USI', 'y_test', 'log_plots_param', 'X', 'fold_groups_param', 'pipeline', 'X_train', 'n_jobs_param', 'gpu_n_jobs_param', 'fix_imbalance', 'y_train'}
2025-02-20 09:52:12,226:INFO:Checking environment
2025-02-20 09:52:12,226:INFO:python_version: 3.10.12
2025-02-20 09:52:12,226:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-20 09:52:12,226:INFO:machine: x86_64
2025-02-20 09:52:12,228:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 09:52:12,228:INFO:Memory: svmem(total=7813279744, available=1517502464, percent=80.6, used=4964528128, free=131223552, active=2982367232, inactive=3662831616, buffers=84627456, cached=2632900608, shared=1038168064, slab=355278848)
2025-02-20 09:52:12,229:INFO:Physical Core: 2
2025-02-20 09:52:12,229:INFO:Logical Core: 4
2025-02-20 09:52:12,229:INFO:Checking libraries
2025-02-20 09:52:12,229:INFO:System:
2025-02-20 09:52:12,229:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-20 09:52:12,229:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-20 09:52:12,229:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 09:52:12,229:INFO:PyCaret required dependencies:
2025-02-20 09:52:12,996:INFO:                 pip: 23.3.2
2025-02-20 09:52:12,997:INFO:          setuptools: 65.5.0
2025-02-20 09:52:12,997:INFO:             pycaret: 3.3.2
2025-02-20 09:52:12,997:INFO:             IPython: 8.20.0
2025-02-20 09:52:12,997:INFO:          ipywidgets: 8.1.1
2025-02-20 09:52:12,997:INFO:                tqdm: 4.66.1
2025-02-20 09:52:12,997:INFO:               numpy: 1.24.4
2025-02-20 09:52:12,997:INFO:              pandas: 1.5.3
2025-02-20 09:52:12,997:INFO:              jinja2: 3.1.3
2025-02-20 09:52:12,997:INFO:               scipy: 1.10.1
2025-02-20 09:52:12,998:INFO:              joblib: 1.3.2
2025-02-20 09:52:12,998:INFO:             sklearn: 1.2.2
2025-02-20 09:52:12,998:INFO:                pyod: 1.1.2
2025-02-20 09:52:12,998:INFO:            imblearn: 0.12.3
2025-02-20 09:52:12,998:INFO:   category_encoders: 2.6.3
2025-02-20 09:52:12,998:INFO:            lightgbm: 4.2.0
2025-02-20 09:52:12,998:INFO:               numba: 0.58.1
2025-02-20 09:52:12,999:INFO:            requests: 2.31.0
2025-02-20 09:52:13,000:INFO:          matplotlib: 3.6.0
2025-02-20 09:52:13,000:INFO:          scikitplot: 0.3.7
2025-02-20 09:52:13,000:INFO:         yellowbrick: 1.5
2025-02-20 09:52:13,000:INFO:              plotly: 5.18.0
2025-02-20 09:52:13,000:INFO:    plotly-resampler: Not installed
2025-02-20 09:52:13,000:INFO:             kaleido: 0.2.1
2025-02-20 09:52:13,000:INFO:           schemdraw: 0.15
2025-02-20 09:52:13,000:INFO:         statsmodels: 0.14.1
2025-02-20 09:52:13,000:INFO:              sktime: 0.21.1
2025-02-20 09:52:13,000:INFO:               tbats: 1.1.3
2025-02-20 09:52:13,001:INFO:            pmdarima: 2.0.4
2025-02-20 09:52:13,001:INFO:              psutil: 5.9.7
2025-02-20 09:52:13,001:INFO:          markupsafe: 2.1.3
2025-02-20 09:52:13,001:INFO:             pickle5: Not installed
2025-02-20 09:52:13,001:INFO:         cloudpickle: 2.2.1
2025-02-20 09:52:13,001:INFO:         deprecation: 2.1.0
2025-02-20 09:52:13,001:INFO:              xxhash: 3.4.1
2025-02-20 09:52:13,001:INFO:           wurlitzer: 3.0.3
2025-02-20 09:52:13,001:INFO:PyCaret optional dependencies:
2025-02-20 09:52:14,212:INFO:                shap: 0.44.0
2025-02-20 09:52:14,212:INFO:           interpret: 0.5.0
2025-02-20 09:52:14,213:INFO:                umap: 0.5.5
2025-02-20 09:52:14,213:INFO:     ydata_profiling: 4.6.0
2025-02-20 09:52:14,213:INFO:  explainerdashboard: 0.4.5
2025-02-20 09:52:14,213:INFO:             autoviz: 0.1.804
2025-02-20 09:52:14,213:INFO:           fairlearn: 0.7.0
2025-02-20 09:52:14,213:INFO:          deepchecks: Not installed
2025-02-20 09:52:14,213:INFO:             xgboost: 1.6.2
2025-02-20 09:52:14,213:INFO:            catboost: 1.2.2
2025-02-20 09:52:14,213:INFO:              kmodes: 0.12.2
2025-02-20 09:52:14,213:INFO:             mlxtend: 0.23.1
2025-02-20 09:52:14,213:INFO:       statsforecast: 1.5.0
2025-02-20 09:52:14,214:INFO:        tune_sklearn: 0.5.0
2025-02-20 09:52:14,214:INFO:                 ray: 2.9.0
2025-02-20 09:52:14,214:INFO:            hyperopt: 0.2.7
2025-02-20 09:52:14,214:INFO:              optuna: 3.5.0
2025-02-20 09:52:14,214:INFO:               skopt: 0.9.0
2025-02-20 09:52:14,214:INFO:              mlflow: 1.30.1
2025-02-20 09:52:14,214:INFO:              gradio: 3.50.2
2025-02-20 09:52:14,214:INFO:             fastapi: 0.109.0
2025-02-20 09:52:14,214:INFO:             uvicorn: 0.25.0
2025-02-20 09:52:14,214:INFO:              m2cgen: 0.10.0
2025-02-20 09:52:14,214:INFO:           evidently: 0.2.8
2025-02-20 09:52:14,214:INFO:               fugue: 0.8.6
2025-02-20 09:52:14,215:INFO:           streamlit: Not installed
2025-02-20 09:52:14,215:INFO:             prophet: Not installed
2025-02-20 09:52:14,215:INFO:None
2025-02-20 09:52:14,215:INFO:Set up data.
2025-02-20 09:52:14,373:INFO:Set up folding strategy.
2025-02-20 09:52:14,373:INFO:Set up train/test split.
2025-02-20 09:52:14,386:INFO:Set up index.
2025-02-20 09:52:14,386:INFO:Assigning column types.
2025-02-20 09:52:14,391:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 09:52:14,454:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 09:52:14,459:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:52:14,497:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:52:14,542:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:52:14,699:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 09:52:14,700:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:52:14,729:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:52:14,732:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:52:14,733:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 09:52:14,781:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:52:14,811:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:52:14,814:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:52:14,864:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:52:14,893:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:52:14,896:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:52:14,896:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 09:52:14,973:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:52:14,976:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:52:15,054:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:52:15,056:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:52:15,058:INFO:Preparing preprocessing pipeline...
2025-02-20 09:52:15,060:INFO:Set up label encoding.
2025-02-20 09:52:15,060:INFO:Set up simple imputation.
2025-02-20 09:52:15,089:INFO:Finished creating preprocessing pipeline.
2025-02-20 09:52:15,095:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-20 09:52:15,095:INFO:Creating final display dataframe.
2025-02-20 09:52:15,197:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    c57f
2025-02-20 09:52:15,279:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:52:15,282:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:52:15,364:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:52:15,367:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:52:15,368:INFO:setup() successfully completed in 3.14s...............
2025-02-20 09:52:15,369:INFO:Initializing create_model()
2025-02-20 09:52:15,369:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dd5ce8bb0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-20 09:52:15,369:INFO:Checking exceptions
2025-02-20 09:52:15,371:INFO:Importing libraries
2025-02-20 09:52:15,372:INFO:Copying training dataset
2025-02-20 09:52:15,376:INFO:Defining folds
2025-02-20 09:52:15,376:INFO:Declaring metric variables
2025-02-20 09:52:15,376:INFO:Importing untrained model
2025-02-20 09:52:15,376:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:52:15,377:INFO:Starting cross validation
2025-02-20 09:52:15,378:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:52:26,131:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,143:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,208:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,228:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,285:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,298:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,584:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,610:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,621:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,800:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,819:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:26,827:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:27,929:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:27,946:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:27,974:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:28,362:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:28,379:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:28,412:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:28,563:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:28,583:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:28,593:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:28,831:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:28,848:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:28,855:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:29,584:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:29,591:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:29,600:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:29,757:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:29,764:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:29,770:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:29,783:INFO:Calculating mean and std
2025-02-20 09:52:29,785:INFO:Creating metrics dataframe
2025-02-20 09:52:29,795:INFO:Finalizing model
2025-02-20 09:52:30,436:INFO:Uploading results into container
2025-02-20 09:52:30,437:INFO:Uploading model into container now
2025-02-20 09:52:30,445:INFO:_master_model_container: 1
2025-02-20 09:52:30,445:INFO:_display_container: 2
2025-02-20 09:52:30,446:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:52:30,446:INFO:create_model() successfully completed......................................
2025-02-20 09:52:30,853:INFO:Initializing tune_model()
2025-02-20 09:52:30,860:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dd5ce8bb0>)
2025-02-20 09:52:30,861:INFO:Checking exceptions
2025-02-20 09:52:30,912:INFO:Copying training dataset
2025-02-20 09:52:30,935:INFO:Checking base model
2025-02-20 09:52:30,940:INFO:Base model : Random Forest Classifier
2025-02-20 09:52:30,943:INFO:Declaring metric variables
2025-02-20 09:52:30,948:INFO:Defining Hyperparameters
2025-02-20 09:52:31,339:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-20 09:52:31,340:INFO:Tuning with n_jobs=-1
2025-02-20 09:52:31,341:INFO:Initializing RandomizedSearchCV
2025-02-20 09:52:33,096:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:33,151:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:33,175:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:33,279:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:34,797:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:34,837:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:34,867:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:34,992:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:36,041:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:36,065:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:36,083:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-20 09:52:36,084:INFO:Hyperparameter search completed
2025-02-20 09:52:36,084:INFO:SubProcess create_model() called ==================================
2025-02-20 09:52:36,085:INFO:Initializing create_model()
2025-02-20 09:52:36,085:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dd5ce8bb0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f3dbaecd810>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-20 09:52:36,086:INFO:Checking exceptions
2025-02-20 09:52:36,086:INFO:Importing libraries
2025-02-20 09:52:36,086:INFO:Copying training dataset
2025-02-20 09:52:36,093:INFO:Defining folds
2025-02-20 09:52:36,093:INFO:Declaring metric variables
2025-02-20 09:52:36,094:INFO:Importing untrained model
2025-02-20 09:52:36,094:INFO:Declaring custom model
2025-02-20 09:52:36,095:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:52:36,095:INFO:Starting cross validation
2025-02-20 09:52:36,097:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:52:37,813:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:37,846:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:37,851:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:37,878:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:37,878:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:37,885:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:37,957:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:37,965:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:37,972:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:38,095:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:38,107:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:38,118:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:39,409:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:39,455:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:39,517:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:39,778:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:39,801:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:39,833:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:39,993:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:40,025:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:40,036:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:40,080:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:40,084:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:40,099:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:41,412:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:41,421:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:41,430:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:41,478:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:41,490:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:41,500:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:41,509:INFO:Calculating mean and std
2025-02-20 09:52:41,510:INFO:Creating metrics dataframe
2025-02-20 09:52:41,514:INFO:Finalizing model
2025-02-20 09:52:42,256:INFO:Uploading results into container
2025-02-20 09:52:42,257:INFO:Uploading model into container now
2025-02-20 09:52:42,258:INFO:_master_model_container: 2
2025-02-20 09:52:42,258:INFO:_display_container: 3
2025-02-20 09:52:42,258:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:52:42,258:INFO:create_model() successfully completed......................................
2025-02-20 09:52:42,397:INFO:SubProcess create_model() end ==================================
2025-02-20 09:52:42,397:INFO:choose_better activated
2025-02-20 09:52:42,398:INFO:SubProcess create_model() called ==================================
2025-02-20 09:52:42,400:INFO:Initializing create_model()
2025-02-20 09:52:42,400:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dd5ce8bb0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:52:42,400:INFO:Checking exceptions
2025-02-20 09:52:42,403:INFO:Importing libraries
2025-02-20 09:52:42,403:INFO:Copying training dataset
2025-02-20 09:52:42,412:INFO:Defining folds
2025-02-20 09:52:42,412:INFO:Declaring metric variables
2025-02-20 09:52:42,413:INFO:Importing untrained model
2025-02-20 09:52:42,413:INFO:Declaring custom model
2025-02-20 09:52:42,415:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:52:42,416:INFO:Starting cross validation
2025-02-20 09:52:42,420:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:52:43,897:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:43,922:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:43,927:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:44,104:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:44,111:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:44,117:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:44,121:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:44,161:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:44,181:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:44,238:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:44,257:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:44,268:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,393:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,400:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,409:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,696:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,700:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,703:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,708:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,711:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,717:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,740:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,746:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:45,753:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:46,514:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:46,535:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:46,550:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:46,663:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:46,667:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:46,671:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:46,676:INFO:Calculating mean and std
2025-02-20 09:52:46,677:INFO:Creating metrics dataframe
2025-02-20 09:52:46,679:INFO:Finalizing model
2025-02-20 09:52:47,201:INFO:Uploading results into container
2025-02-20 09:52:47,202:INFO:Uploading model into container now
2025-02-20 09:52:47,203:INFO:_master_model_container: 3
2025-02-20 09:52:47,203:INFO:_display_container: 4
2025-02-20 09:52:47,204:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:52:47,204:INFO:create_model() successfully completed......................................
2025-02-20 09:52:47,343:INFO:SubProcess create_model() end ==================================
2025-02-20 09:52:47,344:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 09:52:47,345:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 09:52:47,346:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-20 09:52:47,346:INFO:choose_better completed
2025-02-20 09:52:47,346:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-20 09:52:47,360:INFO:_master_model_container: 3
2025-02-20 09:52:47,360:INFO:_display_container: 3
2025-02-20 09:52:47,360:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:52:47,361:INFO:tune_model() successfully completed......................................
2025-02-20 09:52:47,563:INFO:Initializing save_model()
2025-02-20 09:52:47,563:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250220_095207/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 09:52:47,564:INFO:Adding model into prep_pipe
2025-02-20 09:52:47,646:INFO:outputs/experiment_20250220_095207/models/tuned_model.pkl saved in current working directory
2025-02-20 09:52:47,655:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-20 09:52:47,655:INFO:save_model() successfully completed......................................
2025-02-20 09:52:47,812:INFO:Initializing calibrate_model()
2025-02-20 09:52:47,812:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dd5ce8bb0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-20 09:52:47,812:INFO:Checking exceptions
2025-02-20 09:52:47,815:INFO:Preloading libraries
2025-02-20 09:52:47,815:INFO:Preparing display monitor
2025-02-20 09:52:47,817:INFO:Getting model name
2025-02-20 09:52:47,818:INFO:Base model : Random Forest Classifier
2025-02-20 09:52:47,818:INFO:Importing untrained CalibratedClassifierCV
2025-02-20 09:52:47,819:INFO:SubProcess create_model() called ==================================
2025-02-20 09:52:47,823:INFO:Initializing create_model()
2025-02-20 09:52:47,823:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dd5ce8bb0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f3dd4f50f70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:52:47,823:INFO:Checking exceptions
2025-02-20 09:52:47,823:INFO:Importing libraries
2025-02-20 09:52:47,823:INFO:Copying training dataset
2025-02-20 09:52:47,830:INFO:Defining folds
2025-02-20 09:52:47,830:INFO:Declaring metric variables
2025-02-20 09:52:47,830:INFO:Importing untrained model
2025-02-20 09:52:47,831:INFO:Declaring custom model
2025-02-20 09:52:47,832:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:52:47,833:INFO:Starting cross validation
2025-02-20 09:52:47,834:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:52:54,852:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:54,863:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:54,870:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:54,872:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:54,878:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:54,891:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:55,081:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:55,082:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:55,090:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:55,091:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:55,098:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:52:55,100:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,251:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,259:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,267:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,601:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,624:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,629:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,631:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,636:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,639:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,658:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,665:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:02,673:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:06,539:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:06,547:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:06,558:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:06,734:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:06,739:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:06,744:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:06,751:INFO:Calculating mean and std
2025-02-20 09:53:06,752:INFO:Creating metrics dataframe
2025-02-20 09:53:06,755:INFO:Finalizing model
2025-02-20 09:53:09,476:INFO:Uploading results into container
2025-02-20 09:53:09,478:INFO:Uploading model into container now
2025-02-20 09:53:09,479:INFO:_master_model_container: 4
2025-02-20 09:53:09,479:INFO:_display_container: 4
2025-02-20 09:53:09,485:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:53:09,485:INFO:create_model() successfully completed......................................
2025-02-20 09:53:09,675:INFO:SubProcess create_model() end ==================================
2025-02-20 09:53:09,695:INFO:_master_model_container: 4
2025-02-20 09:53:09,695:INFO:_display_container: 4
2025-02-20 09:53:09,697:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:53:09,697:INFO:calibrate_model() successfully completed......................................
2025-02-20 09:53:09,853:INFO:Initializing finalize_model()
2025-02-20 09:53:09,853:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dd5ce8bb0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 09:53:09,856:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:53:09,865:INFO:Initializing create_model()
2025-02-20 09:53:09,865:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dd5ce8bb0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:53:09,865:INFO:Checking exceptions
2025-02-20 09:53:09,867:INFO:Importing libraries
2025-02-20 09:53:09,867:INFO:Copying training dataset
2025-02-20 09:53:09,868:INFO:Defining folds
2025-02-20 09:53:09,868:INFO:Declaring metric variables
2025-02-20 09:53:09,868:INFO:Importing untrained model
2025-02-20 09:53:09,868:INFO:Declaring custom model
2025-02-20 09:53:09,871:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:53:09,873:INFO:Cross validation set to False
2025-02-20 09:53:09,873:INFO:Fitting Model
2025-02-20 09:53:13,038:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 09:53:13,038:INFO:create_model() successfully completed......................................
2025-02-20 09:53:13,197:INFO:_master_model_container: 4
2025-02-20 09:53:13,197:INFO:_display_container: 4
2025-02-20 09:53:13,215:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 09:53:13,215:INFO:finalize_model() successfully completed......................................
2025-02-20 09:53:13,394:INFO:Initializing predict_model()
2025-02-20 09:53:13,394:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dd5ce8bb0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f3dbb2084c0>)
2025-02-20 09:53:13,394:INFO:Checking exceptions
2025-02-20 09:53:13,394:INFO:Preloading libraries
2025-02-20 09:53:13,395:INFO:Set up data.
2025-02-20 09:53:13,423:INFO:Set up index.
2025-02-20 09:53:14,729:INFO:PyCaret ClassificationExperiment
2025-02-20 09:53:14,730:INFO:Logging name: clf-default-name
2025-02-20 09:53:14,730:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 09:53:14,730:INFO:version 3.3.2
2025-02-20 09:53:14,730:INFO:Initializing setup()
2025-02-20 09:53:14,730:INFO:self.USI: 6add
2025-02-20 09:53:14,730:INFO:self._variable_keys: {'exp_name_log', 'html_param', 'X_test', 'logging_param', 'target_param', 'exp_id', 'gpu_param', '_ml_usecase', 'idx', 'seed', 'fold_generator', 'data', 'fold_shuffle_param', 'y', 'is_multiclass', '_available_plots', 'memory', 'USI', 'y_test', 'log_plots_param', 'X', 'fold_groups_param', 'pipeline', 'X_train', 'n_jobs_param', 'gpu_n_jobs_param', 'fix_imbalance', 'y_train'}
2025-02-20 09:53:14,730:INFO:Checking environment
2025-02-20 09:53:14,730:INFO:python_version: 3.10.12
2025-02-20 09:53:14,730:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-20 09:53:14,730:INFO:machine: x86_64
2025-02-20 09:53:14,731:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 09:53:14,731:INFO:Memory: svmem(total=7813279744, available=927473664, percent=88.1, used=5561683968, free=127102976, active=3067514880, inactive=3908333568, buffers=59387904, cached=2065104896, shared=1031294976, slab=354590720)
2025-02-20 09:53:14,732:INFO:Physical Core: 2
2025-02-20 09:53:14,732:INFO:Logical Core: 4
2025-02-20 09:53:14,732:INFO:Checking libraries
2025-02-20 09:53:14,732:INFO:System:
2025-02-20 09:53:14,732:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-20 09:53:14,732:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-20 09:53:14,732:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 09:53:14,732:INFO:PyCaret required dependencies:
2025-02-20 09:53:14,733:INFO:                 pip: 23.3.2
2025-02-20 09:53:14,733:INFO:          setuptools: 65.5.0
2025-02-20 09:53:14,733:INFO:             pycaret: 3.3.2
2025-02-20 09:53:14,733:INFO:             IPython: 8.20.0
2025-02-20 09:53:14,733:INFO:          ipywidgets: 8.1.1
2025-02-20 09:53:14,733:INFO:                tqdm: 4.66.1
2025-02-20 09:53:14,733:INFO:               numpy: 1.24.4
2025-02-20 09:53:14,733:INFO:              pandas: 1.5.3
2025-02-20 09:53:14,733:INFO:              jinja2: 3.1.3
2025-02-20 09:53:14,733:INFO:               scipy: 1.10.1
2025-02-20 09:53:14,734:INFO:              joblib: 1.3.2
2025-02-20 09:53:14,734:INFO:             sklearn: 1.2.2
2025-02-20 09:53:14,734:INFO:                pyod: 1.1.2
2025-02-20 09:53:14,734:INFO:            imblearn: 0.12.3
2025-02-20 09:53:14,734:INFO:   category_encoders: 2.6.3
2025-02-20 09:53:14,734:INFO:            lightgbm: 4.2.0
2025-02-20 09:53:14,734:INFO:               numba: 0.58.1
2025-02-20 09:53:14,734:INFO:            requests: 2.31.0
2025-02-20 09:53:14,734:INFO:          matplotlib: 3.6.0
2025-02-20 09:53:14,734:INFO:          scikitplot: 0.3.7
2025-02-20 09:53:14,735:INFO:         yellowbrick: 1.5
2025-02-20 09:53:14,735:INFO:              plotly: 5.18.0
2025-02-20 09:53:14,735:INFO:    plotly-resampler: Not installed
2025-02-20 09:53:14,735:INFO:             kaleido: 0.2.1
2025-02-20 09:53:14,735:INFO:           schemdraw: 0.15
2025-02-20 09:53:14,735:INFO:         statsmodels: 0.14.1
2025-02-20 09:53:14,735:INFO:              sktime: 0.21.1
2025-02-20 09:53:14,735:INFO:               tbats: 1.1.3
2025-02-20 09:53:14,735:INFO:            pmdarima: 2.0.4
2025-02-20 09:53:14,735:INFO:              psutil: 5.9.7
2025-02-20 09:53:14,736:INFO:          markupsafe: 2.1.3
2025-02-20 09:53:14,736:INFO:             pickle5: Not installed
2025-02-20 09:53:14,736:INFO:         cloudpickle: 2.2.1
2025-02-20 09:53:14,736:INFO:         deprecation: 2.1.0
2025-02-20 09:53:14,736:INFO:              xxhash: 3.4.1
2025-02-20 09:53:14,736:INFO:           wurlitzer: 3.0.3
2025-02-20 09:53:14,736:INFO:PyCaret optional dependencies:
2025-02-20 09:53:14,737:INFO:                shap: 0.44.0
2025-02-20 09:53:14,737:INFO:           interpret: 0.5.0
2025-02-20 09:53:14,737:INFO:                umap: 0.5.5
2025-02-20 09:53:14,737:INFO:     ydata_profiling: 4.6.0
2025-02-20 09:53:14,737:INFO:  explainerdashboard: 0.4.5
2025-02-20 09:53:14,737:INFO:             autoviz: 0.1.804
2025-02-20 09:53:14,737:INFO:           fairlearn: 0.7.0
2025-02-20 09:53:14,737:INFO:          deepchecks: Not installed
2025-02-20 09:53:14,737:INFO:             xgboost: 1.6.2
2025-02-20 09:53:14,737:INFO:            catboost: 1.2.2
2025-02-20 09:53:14,738:INFO:              kmodes: 0.12.2
2025-02-20 09:53:14,738:INFO:             mlxtend: 0.23.1
2025-02-20 09:53:14,738:INFO:       statsforecast: 1.5.0
2025-02-20 09:53:14,738:INFO:        tune_sklearn: 0.5.0
2025-02-20 09:53:14,738:INFO:                 ray: 2.9.0
2025-02-20 09:53:14,738:INFO:            hyperopt: 0.2.7
2025-02-20 09:53:14,738:INFO:              optuna: 3.5.0
2025-02-20 09:53:14,738:INFO:               skopt: 0.9.0
2025-02-20 09:53:14,738:INFO:              mlflow: 1.30.1
2025-02-20 09:53:14,738:INFO:              gradio: 3.50.2
2025-02-20 09:53:14,738:INFO:             fastapi: 0.109.0
2025-02-20 09:53:14,739:INFO:             uvicorn: 0.25.0
2025-02-20 09:53:14,739:INFO:              m2cgen: 0.10.0
2025-02-20 09:53:14,739:INFO:           evidently: 0.2.8
2025-02-20 09:53:14,739:INFO:               fugue: 0.8.6
2025-02-20 09:53:14,739:INFO:           streamlit: Not installed
2025-02-20 09:53:14,739:INFO:             prophet: Not installed
2025-02-20 09:53:14,739:INFO:None
2025-02-20 09:53:14,739:INFO:Set up data.
2025-02-20 09:53:14,778:INFO:Set up folding strategy.
2025-02-20 09:53:14,778:INFO:Set up train/test split.
2025-02-20 09:53:14,786:INFO:Set up index.
2025-02-20 09:53:14,786:INFO:Assigning column types.
2025-02-20 09:53:14,791:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 09:53:14,844:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 09:53:14,845:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:53:14,884:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:53:14,889:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:53:14,945:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 09:53:14,947:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:53:14,977:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:53:14,980:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:53:14,981:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 09:53:15,041:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:53:15,079:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:53:15,082:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:53:15,135:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 09:53:15,165:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:53:15,168:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:53:15,169:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 09:53:15,270:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:53:15,273:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:53:15,362:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:53:15,365:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:53:15,367:INFO:Preparing preprocessing pipeline...
2025-02-20 09:53:15,368:INFO:Set up label encoding.
2025-02-20 09:53:15,369:INFO:Set up simple imputation.
2025-02-20 09:53:15,409:INFO:Finished creating preprocessing pipeline.
2025-02-20 09:53:15,416:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-20 09:53:15,417:INFO:Creating final display dataframe.
2025-02-20 09:53:15,568:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    6add
2025-02-20 09:53:15,674:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:53:15,678:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:53:15,763:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 09:53:15,766:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 09:53:15,768:INFO:setup() successfully completed in 1.04s...............
2025-02-20 09:53:15,769:INFO:Initializing create_model()
2025-02-20 09:53:15,769:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dbb157ac0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-20 09:53:15,769:INFO:Checking exceptions
2025-02-20 09:53:15,770:INFO:Importing libraries
2025-02-20 09:53:15,770:INFO:Copying training dataset
2025-02-20 09:53:15,774:INFO:Defining folds
2025-02-20 09:53:15,775:INFO:Declaring metric variables
2025-02-20 09:53:15,775:INFO:Importing untrained model
2025-02-20 09:53:15,775:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:53:15,776:INFO:Starting cross validation
2025-02-20 09:53:15,777:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:53:17,336:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,345:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,353:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,441:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,449:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,460:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,461:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,466:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,473:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,528:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,545:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:17,567:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,057:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,081:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,101:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,198:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,203:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,210:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,224:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,248:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,262:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,274:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,280:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:19,287:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:20,005:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:20,011:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:20,018:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:20,140:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:20,149:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:20,157:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:20,168:INFO:Calculating mean and std
2025-02-20 09:53:20,170:INFO:Creating metrics dataframe
2025-02-20 09:53:20,178:INFO:Finalizing model
2025-02-20 09:53:20,740:INFO:Uploading results into container
2025-02-20 09:53:20,741:INFO:Uploading model into container now
2025-02-20 09:53:20,749:INFO:_master_model_container: 1
2025-02-20 09:53:20,749:INFO:_display_container: 2
2025-02-20 09:53:20,749:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:53:20,749:INFO:create_model() successfully completed......................................
2025-02-20 09:53:20,940:INFO:Initializing tune_model()
2025-02-20 09:53:20,941:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dbb157ac0>)
2025-02-20 09:53:20,941:INFO:Checking exceptions
2025-02-20 09:53:20,951:INFO:Copying training dataset
2025-02-20 09:53:20,956:INFO:Checking base model
2025-02-20 09:53:20,956:INFO:Base model : Random Forest Classifier
2025-02-20 09:53:20,957:INFO:Declaring metric variables
2025-02-20 09:53:20,958:INFO:Defining Hyperparameters
2025-02-20 09:53:21,118:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-20 09:53:21,118:INFO:Tuning with n_jobs=-1
2025-02-20 09:53:21,118:INFO:Initializing RandomizedSearchCV
2025-02-20 09:53:22,615:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:22,698:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:22,734:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:22,743:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:24,131:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:24,357:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:24,438:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:24,484:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:25,347:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:25,506:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:25,536:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-20 09:53:25,537:INFO:Hyperparameter search completed
2025-02-20 09:53:25,537:INFO:SubProcess create_model() called ==================================
2025-02-20 09:53:25,539:INFO:Initializing create_model()
2025-02-20 09:53:25,539:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dbb157ac0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f3dbb0d4d00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-20 09:53:25,539:INFO:Checking exceptions
2025-02-20 09:53:25,539:INFO:Importing libraries
2025-02-20 09:53:25,539:INFO:Copying training dataset
2025-02-20 09:53:25,560:INFO:Defining folds
2025-02-20 09:53:25,566:INFO:Declaring metric variables
2025-02-20 09:53:25,567:INFO:Importing untrained model
2025-02-20 09:53:25,567:INFO:Declaring custom model
2025-02-20 09:53:25,569:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:53:25,573:INFO:Starting cross validation
2025-02-20 09:53:25,575:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:53:27,316:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,324:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,331:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,362:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,378:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,387:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,395:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,403:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,410:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,412:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,422:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:27,430:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,097:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,104:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,117:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,117:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,128:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,136:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,145:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,152:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,169:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,282:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,305:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:29,315:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:30,099:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:30,112:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:30,118:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:30,135:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:30,150:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:30,162:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:30,174:INFO:Calculating mean and std
2025-02-20 09:53:30,176:INFO:Creating metrics dataframe
2025-02-20 09:53:30,180:INFO:Finalizing model
2025-02-20 09:53:30,776:INFO:Uploading results into container
2025-02-20 09:53:30,778:INFO:Uploading model into container now
2025-02-20 09:53:30,778:INFO:_master_model_container: 2
2025-02-20 09:53:30,778:INFO:_display_container: 3
2025-02-20 09:53:30,779:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:53:30,779:INFO:create_model() successfully completed......................................
2025-02-20 09:53:30,973:INFO:SubProcess create_model() end ==================================
2025-02-20 09:53:30,973:INFO:choose_better activated
2025-02-20 09:53:30,974:INFO:SubProcess create_model() called ==================================
2025-02-20 09:53:30,976:INFO:Initializing create_model()
2025-02-20 09:53:30,976:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dbb157ac0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:53:30,976:INFO:Checking exceptions
2025-02-20 09:53:30,979:INFO:Importing libraries
2025-02-20 09:53:30,979:INFO:Copying training dataset
2025-02-20 09:53:30,989:INFO:Defining folds
2025-02-20 09:53:30,989:INFO:Declaring metric variables
2025-02-20 09:53:30,990:INFO:Importing untrained model
2025-02-20 09:53:30,990:INFO:Declaring custom model
2025-02-20 09:53:30,991:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:53:30,991:INFO:Starting cross validation
2025-02-20 09:53:30,992:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:53:32,662:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,671:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,680:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,728:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,729:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,737:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,742:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,747:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,756:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,764:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,774:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:32,782:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,361:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,369:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,377:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,441:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,448:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,456:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,484:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,494:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,502:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,522:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,530:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:34,545:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:35,372:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:35,380:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:35,388:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:35,394:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:35,398:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:35,403:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:35,411:INFO:Calculating mean and std
2025-02-20 09:53:35,412:INFO:Creating metrics dataframe
2025-02-20 09:53:35,414:INFO:Finalizing model
2025-02-20 09:53:35,993:INFO:Uploading results into container
2025-02-20 09:53:35,994:INFO:Uploading model into container now
2025-02-20 09:53:35,995:INFO:_master_model_container: 3
2025-02-20 09:53:35,995:INFO:_display_container: 4
2025-02-20 09:53:35,996:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:53:35,996:INFO:create_model() successfully completed......................................
2025-02-20 09:53:36,128:INFO:SubProcess create_model() end ==================================
2025-02-20 09:53:36,130:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 09:53:36,133:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 09:53:36,134:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-20 09:53:36,134:INFO:choose_better completed
2025-02-20 09:53:36,134:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-20 09:53:36,159:INFO:_master_model_container: 3
2025-02-20 09:53:36,159:INFO:_display_container: 3
2025-02-20 09:53:36,161:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 09:53:36,161:INFO:tune_model() successfully completed......................................
2025-02-20 09:53:36,320:INFO:Initializing save_model()
2025-02-20 09:53:36,320:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250220_095207/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 09:53:36,321:INFO:Adding model into prep_pipe
2025-02-20 09:53:36,422:INFO:outputs/experiment_20250220_095207/models/tuned_model.pkl saved in current working directory
2025-02-20 09:53:36,433:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-20 09:53:36,434:INFO:save_model() successfully completed......................................
2025-02-20 09:53:36,613:INFO:Initializing calibrate_model()
2025-02-20 09:53:36,614:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dbb157ac0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-20 09:53:36,614:INFO:Checking exceptions
2025-02-20 09:53:36,617:INFO:Preloading libraries
2025-02-20 09:53:36,617:INFO:Preparing display monitor
2025-02-20 09:53:36,619:INFO:Getting model name
2025-02-20 09:53:36,619:INFO:Base model : Random Forest Classifier
2025-02-20 09:53:36,620:INFO:Importing untrained CalibratedClassifierCV
2025-02-20 09:53:36,620:INFO:SubProcess create_model() called ==================================
2025-02-20 09:53:36,623:INFO:Initializing create_model()
2025-02-20 09:53:36,623:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dbb157ac0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f3dc5536410>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:53:36,623:INFO:Checking exceptions
2025-02-20 09:53:36,623:INFO:Importing libraries
2025-02-20 09:53:36,623:INFO:Copying training dataset
2025-02-20 09:53:36,630:INFO:Defining folds
2025-02-20 09:53:36,630:INFO:Declaring metric variables
2025-02-20 09:53:36,631:INFO:Importing untrained model
2025-02-20 09:53:36,631:INFO:Declaring custom model
2025-02-20 09:53:36,632:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:53:36,633:INFO:Starting cross validation
2025-02-20 09:53:36,634:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 09:53:43,597:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:43,604:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:43,622:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:43,722:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:43,733:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:43,742:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:43,777:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:43,784:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:43,790:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:44,073:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:44,104:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:44,124:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,090:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,098:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,107:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,296:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,307:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,314:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,328:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,346:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,360:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,815:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,833:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:51,844:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:55,637:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:55,645:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:55,650:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:55,738:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:55,743:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:55,747:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 09:53:55,759:INFO:Calculating mean and std
2025-02-20 09:53:55,760:INFO:Creating metrics dataframe
2025-02-20 09:53:55,763:INFO:Finalizing model
2025-02-20 09:53:58,552:INFO:Uploading results into container
2025-02-20 09:53:58,554:INFO:Uploading model into container now
2025-02-20 09:53:58,555:INFO:_master_model_container: 4
2025-02-20 09:53:58,556:INFO:_display_container: 4
2025-02-20 09:53:58,563:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:53:58,563:INFO:create_model() successfully completed......................................
2025-02-20 09:53:58,746:INFO:SubProcess create_model() end ==================================
2025-02-20 09:53:58,773:INFO:_master_model_container: 4
2025-02-20 09:53:58,774:INFO:_display_container: 4
2025-02-20 09:53:58,777:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:53:58,777:INFO:calibrate_model() successfully completed......................................
2025-02-20 09:53:58,973:INFO:Initializing finalize_model()
2025-02-20 09:53:58,973:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dbb157ac0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 09:53:58,976:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 09:53:59,000:INFO:Initializing create_model()
2025-02-20 09:53:59,001:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dbb157ac0>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 09:53:59,001:INFO:Checking exceptions
2025-02-20 09:53:59,009:INFO:Importing libraries
2025-02-20 09:53:59,010:INFO:Copying training dataset
2025-02-20 09:53:59,012:INFO:Defining folds
2025-02-20 09:53:59,012:INFO:Declaring metric variables
2025-02-20 09:53:59,013:INFO:Importing untrained model
2025-02-20 09:53:59,013:INFO:Declaring custom model
2025-02-20 09:53:59,025:INFO:Random Forest Classifier Imported successfully
2025-02-20 09:53:59,027:INFO:Cross validation set to False
2025-02-20 09:53:59,027:INFO:Fitting Model
2025-02-20 09:54:02,323:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 09:54:02,323:INFO:create_model() successfully completed......................................
2025-02-20 09:54:02,470:INFO:_master_model_container: 4
2025-02-20 09:54:02,471:INFO:_display_container: 4
2025-02-20 09:54:02,492:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 09:54:02,493:INFO:finalize_model() successfully completed......................................
2025-02-20 09:54:02,654:INFO:Initializing predict_model()
2025-02-20 09:54:02,654:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f3dbb157ac0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7f3dbb3cf370>)
2025-02-20 09:54:02,656:INFO:Checking exceptions
2025-02-20 09:54:02,656:INFO:Preloading libraries
2025-02-20 09:54:02,657:INFO:Set up data.
2025-02-20 09:54:02,679:INFO:Set up index.
2025-02-20 10:31:06,842:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 10:31:06,843:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 10:31:06,843:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 10:31:06,843:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 10:50:06,320:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 10:50:06,320:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 10:50:06,320:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 10:50:06,321:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 10:50:17,486:INFO:PyCaret ClassificationExperiment
2025-02-20 10:50:17,486:INFO:Logging name: clf-default-name
2025-02-20 10:50:17,486:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 10:50:17,487:INFO:version 3.3.2
2025-02-20 10:50:17,487:INFO:Initializing setup()
2025-02-20 10:50:17,487:INFO:self.USI: 4e0d
2025-02-20 10:50:17,487:INFO:self._variable_keys: {'data', 'fix_imbalance', '_ml_usecase', 'html_param', 'logging_param', 'y_train', 'target_param', 'y_test', 'fold_groups_param', 'X_test', 'is_multiclass', '_available_plots', 'y', 'seed', 'idx', 'exp_id', 'n_jobs_param', 'gpu_n_jobs_param', 'USI', 'X_train', 'log_plots_param', 'X', 'gpu_param', 'pipeline', 'memory', 'fold_generator', 'exp_name_log', 'fold_shuffle_param'}
2025-02-20 10:50:17,487:INFO:Checking environment
2025-02-20 10:50:17,487:INFO:python_version: 3.10.12
2025-02-20 10:50:17,488:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-20 10:50:17,488:INFO:machine: x86_64
2025-02-20 10:50:17,492:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 10:50:17,492:INFO:Memory: svmem(total=7813279744, available=897445888, percent=88.5, used=5615235072, free=137207808, active=3248259072, inactive=3767164928, buffers=49803264, cached=2011033600, shared=1007910912, slab=353763328)
2025-02-20 10:50:17,493:INFO:Physical Core: 2
2025-02-20 10:50:17,493:INFO:Logical Core: 4
2025-02-20 10:50:17,494:INFO:Checking libraries
2025-02-20 10:50:17,494:INFO:System:
2025-02-20 10:50:17,494:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-20 10:50:17,495:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-20 10:50:17,495:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 10:50:17,495:INFO:PyCaret required dependencies:
2025-02-20 10:50:18,659:INFO:                 pip: 23.3.2
2025-02-20 10:50:18,659:INFO:          setuptools: 65.5.0
2025-02-20 10:50:18,659:INFO:             pycaret: 3.3.2
2025-02-20 10:50:18,659:INFO:             IPython: 8.20.0
2025-02-20 10:50:18,659:INFO:          ipywidgets: 8.1.1
2025-02-20 10:50:18,659:INFO:                tqdm: 4.66.1
2025-02-20 10:50:18,659:INFO:               numpy: 1.24.4
2025-02-20 10:50:18,660:INFO:              pandas: 1.5.3
2025-02-20 10:50:18,660:INFO:              jinja2: 3.1.3
2025-02-20 10:50:18,660:INFO:               scipy: 1.10.1
2025-02-20 10:50:18,660:INFO:              joblib: 1.3.2
2025-02-20 10:50:18,660:INFO:             sklearn: 1.2.2
2025-02-20 10:50:18,660:INFO:                pyod: 1.1.2
2025-02-20 10:50:18,660:INFO:            imblearn: 0.12.3
2025-02-20 10:50:18,660:INFO:   category_encoders: 2.6.3
2025-02-20 10:50:18,660:INFO:            lightgbm: 4.2.0
2025-02-20 10:50:18,660:INFO:               numba: 0.58.1
2025-02-20 10:50:18,660:INFO:            requests: 2.31.0
2025-02-20 10:50:18,660:INFO:          matplotlib: 3.6.0
2025-02-20 10:50:18,660:INFO:          scikitplot: 0.3.7
2025-02-20 10:50:18,661:INFO:         yellowbrick: 1.5
2025-02-20 10:50:18,661:INFO:              plotly: 5.18.0
2025-02-20 10:50:18,661:INFO:    plotly-resampler: Not installed
2025-02-20 10:50:18,661:INFO:             kaleido: 0.2.1
2025-02-20 10:50:18,661:INFO:           schemdraw: 0.15
2025-02-20 10:50:18,661:INFO:         statsmodels: 0.14.1
2025-02-20 10:50:18,661:INFO:              sktime: 0.21.1
2025-02-20 10:50:18,661:INFO:               tbats: 1.1.3
2025-02-20 10:50:18,661:INFO:            pmdarima: 2.0.4
2025-02-20 10:50:18,661:INFO:              psutil: 5.9.7
2025-02-20 10:50:18,661:INFO:          markupsafe: 2.1.3
2025-02-20 10:50:18,661:INFO:             pickle5: Not installed
2025-02-20 10:50:18,661:INFO:         cloudpickle: 2.2.1
2025-02-20 10:50:18,662:INFO:         deprecation: 2.1.0
2025-02-20 10:50:18,662:INFO:              xxhash: 3.4.1
2025-02-20 10:50:18,662:INFO:           wurlitzer: 3.0.3
2025-02-20 10:50:18,662:INFO:PyCaret optional dependencies:
2025-02-20 10:50:21,023:INFO:                shap: 0.44.0
2025-02-20 10:50:21,024:INFO:           interpret: 0.5.0
2025-02-20 10:50:21,024:INFO:                umap: 0.5.5
2025-02-20 10:50:21,024:INFO:     ydata_profiling: 4.6.0
2025-02-20 10:50:21,024:INFO:  explainerdashboard: 0.4.5
2025-02-20 10:50:21,024:INFO:             autoviz: 0.1.804
2025-02-20 10:50:21,024:INFO:           fairlearn: 0.7.0
2025-02-20 10:50:21,024:INFO:          deepchecks: Not installed
2025-02-20 10:50:21,024:INFO:             xgboost: 1.6.2
2025-02-20 10:50:21,024:INFO:            catboost: 1.2.2
2025-02-20 10:50:21,025:INFO:              kmodes: 0.12.2
2025-02-20 10:50:21,025:INFO:             mlxtend: 0.23.1
2025-02-20 10:50:21,025:INFO:       statsforecast: 1.5.0
2025-02-20 10:50:21,025:INFO:        tune_sklearn: 0.5.0
2025-02-20 10:50:21,025:INFO:                 ray: 2.9.0
2025-02-20 10:50:21,025:INFO:            hyperopt: 0.2.7
2025-02-20 10:50:21,025:INFO:              optuna: 3.5.0
2025-02-20 10:50:21,025:INFO:               skopt: 0.9.0
2025-02-20 10:50:21,026:INFO:              mlflow: 1.30.1
2025-02-20 10:50:21,026:INFO:              gradio: 3.50.2
2025-02-20 10:50:21,026:INFO:             fastapi: 0.109.0
2025-02-20 10:50:21,026:INFO:             uvicorn: 0.25.0
2025-02-20 10:50:21,026:INFO:              m2cgen: 0.10.0
2025-02-20 10:50:21,026:INFO:           evidently: 0.2.8
2025-02-20 10:50:21,026:INFO:               fugue: 0.8.6
2025-02-20 10:50:21,026:INFO:           streamlit: Not installed
2025-02-20 10:50:21,026:INFO:             prophet: Not installed
2025-02-20 10:50:21,026:INFO:None
2025-02-20 10:50:21,027:INFO:Set up data.
2025-02-20 10:50:21,285:INFO:Set up folding strategy.
2025-02-20 10:50:21,285:INFO:Set up train/test split.
2025-02-20 10:50:21,298:INFO:Set up index.
2025-02-20 10:50:21,299:INFO:Assigning column types.
2025-02-20 10:50:21,316:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 10:50:21,409:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 10:50:21,417:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 10:50:21,487:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:50:21,546:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:50:21,750:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 10:50:21,752:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 10:50:21,839:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:50:21,856:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:50:21,859:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 10:50:21,934:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 10:50:21,973:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:50:21,976:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:50:22,075:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 10:50:22,148:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:50:22,152:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:50:22,153:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 10:50:22,277:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:50:22,282:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:50:22,460:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:50:22,468:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:50:22,473:INFO:Preparing preprocessing pipeline...
2025-02-20 10:50:22,477:INFO:Set up label encoding.
2025-02-20 10:50:22,477:INFO:Set up simple imputation.
2025-02-20 10:50:22,545:INFO:Finished creating preprocessing pipeline.
2025-02-20 10:50:22,561:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-20 10:50:22,562:INFO:Creating final display dataframe.
2025-02-20 10:50:22,768:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    4e0d
2025-02-20 10:50:22,895:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:50:22,899:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:50:22,996:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:50:22,999:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:50:23,004:INFO:setup() successfully completed in 5.52s...............
2025-02-20 10:50:23,005:INFO:Initializing create_model()
2025-02-20 10:50:23,005:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8c8814b20>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-20 10:50:23,005:INFO:Checking exceptions
2025-02-20 10:50:23,008:INFO:Importing libraries
2025-02-20 10:50:23,008:INFO:Copying training dataset
2025-02-20 10:50:23,018:INFO:Defining folds
2025-02-20 10:50:23,018:INFO:Declaring metric variables
2025-02-20 10:50:23,019:INFO:Importing untrained model
2025-02-20 10:50:23,021:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:50:23,022:INFO:Starting cross validation
2025-02-20 10:50:23,026:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 10:50:36,855:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:36,885:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:36,889:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:36,906:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:36,916:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:36,951:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:37,287:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:37,296:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:37,304:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:37,390:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:37,412:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:37,421:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:39,333:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:39,380:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:39,401:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:39,544:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:39,571:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:39,596:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:39,815:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:39,833:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:39,859:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:40,715:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:40,733:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:40,746:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:41,153:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:41,162:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:41,171:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:41,336:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:41,349:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:41,358:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:41,377:INFO:Calculating mean and std
2025-02-20 10:50:41,379:INFO:Creating metrics dataframe
2025-02-20 10:50:41,393:INFO:Finalizing model
2025-02-20 10:50:42,336:INFO:Uploading results into container
2025-02-20 10:50:42,338:INFO:Uploading model into container now
2025-02-20 10:50:42,351:INFO:_master_model_container: 1
2025-02-20 10:50:42,351:INFO:_display_container: 2
2025-02-20 10:50:42,352:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 10:50:42,353:INFO:create_model() successfully completed......................................
2025-02-20 10:50:42,607:INFO:Initializing tune_model()
2025-02-20 10:50:42,607:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8c8814b20>)
2025-02-20 10:50:42,607:INFO:Checking exceptions
2025-02-20 10:50:42,618:INFO:Copying training dataset
2025-02-20 10:50:42,624:INFO:Checking base model
2025-02-20 10:50:42,625:INFO:Base model : Random Forest Classifier
2025-02-20 10:50:42,627:INFO:Declaring metric variables
2025-02-20 10:50:42,627:INFO:Defining Hyperparameters
2025-02-20 10:50:42,825:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-20 10:50:42,825:INFO:Tuning with n_jobs=-1
2025-02-20 10:50:42,825:INFO:Initializing RandomizedSearchCV
2025-02-20 10:50:44,358:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:44,402:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:44,416:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:44,609:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:45,833:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:45,974:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:46,019:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:46,181:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:46,950:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:46,976:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:46,986:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-20 10:50:46,987:INFO:Hyperparameter search completed
2025-02-20 10:50:46,987:INFO:SubProcess create_model() called ==================================
2025-02-20 10:50:46,987:INFO:Initializing create_model()
2025-02-20 10:50:46,987:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8c8814b20>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff8adaa57e0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-20 10:50:46,987:INFO:Checking exceptions
2025-02-20 10:50:46,988:INFO:Importing libraries
2025-02-20 10:50:46,988:INFO:Copying training dataset
2025-02-20 10:50:46,992:INFO:Defining folds
2025-02-20 10:50:46,993:INFO:Declaring metric variables
2025-02-20 10:50:46,993:INFO:Importing untrained model
2025-02-20 10:50:46,993:INFO:Declaring custom model
2025-02-20 10:50:46,994:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:50:46,994:INFO:Starting cross validation
2025-02-20 10:50:46,995:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 10:50:48,525:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,539:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,544:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,559:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,565:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,604:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,611:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,629:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,659:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,681:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,686:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:48,727:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:50,460:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:50,508:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:50,530:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:50,667:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:50,694:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:50,710:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:50,718:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:50,722:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:50,748:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:51,054:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:51,079:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:51,100:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:52,348:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:52,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:52,364:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:52,366:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:52,379:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:52,393:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:52,410:INFO:Calculating mean and std
2025-02-20 10:50:52,411:INFO:Creating metrics dataframe
2025-02-20 10:50:52,413:INFO:Finalizing model
2025-02-20 10:50:53,149:INFO:Uploading results into container
2025-02-20 10:50:53,150:INFO:Uploading model into container now
2025-02-20 10:50:53,150:INFO:_master_model_container: 2
2025-02-20 10:50:53,150:INFO:_display_container: 3
2025-02-20 10:50:53,151:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 10:50:53,151:INFO:create_model() successfully completed......................................
2025-02-20 10:50:53,329:INFO:SubProcess create_model() end ==================================
2025-02-20 10:50:53,329:INFO:choose_better activated
2025-02-20 10:50:53,330:INFO:SubProcess create_model() called ==================================
2025-02-20 10:50:53,331:INFO:Initializing create_model()
2025-02-20 10:50:53,331:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8c8814b20>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 10:50:53,332:INFO:Checking exceptions
2025-02-20 10:50:53,334:INFO:Importing libraries
2025-02-20 10:50:53,334:INFO:Copying training dataset
2025-02-20 10:50:53,341:INFO:Defining folds
2025-02-20 10:50:53,341:INFO:Declaring metric variables
2025-02-20 10:50:53,341:INFO:Importing untrained model
2025-02-20 10:50:53,341:INFO:Declaring custom model
2025-02-20 10:50:53,342:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:50:53,343:INFO:Starting cross validation
2025-02-20 10:50:53,346:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 10:50:54,829:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:54,835:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:54,843:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:54,916:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:54,918:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:54,925:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:54,929:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:54,936:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:54,937:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:54,986:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:55,002:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:55,008:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,113:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,124:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,144:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,243:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,251:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,254:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,260:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,270:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,270:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,556:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,571:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:56,581:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:57,115:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:57,129:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:57,147:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:57,182:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:57,190:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:57,197:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:50:57,212:INFO:Calculating mean and std
2025-02-20 10:50:57,212:INFO:Creating metrics dataframe
2025-02-20 10:50:57,215:INFO:Finalizing model
2025-02-20 10:50:57,723:INFO:Uploading results into container
2025-02-20 10:50:57,723:INFO:Uploading model into container now
2025-02-20 10:50:57,724:INFO:_master_model_container: 3
2025-02-20 10:50:57,724:INFO:_display_container: 4
2025-02-20 10:50:57,724:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 10:50:57,724:INFO:create_model() successfully completed......................................
2025-02-20 10:50:57,872:INFO:SubProcess create_model() end ==================================
2025-02-20 10:50:57,873:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 10:50:57,874:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 10:50:57,874:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-20 10:50:57,874:INFO:choose_better completed
2025-02-20 10:50:57,874:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-20 10:50:57,883:INFO:_master_model_container: 3
2025-02-20 10:50:57,883:INFO:_display_container: 3
2025-02-20 10:50:57,883:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 10:50:57,883:INFO:tune_model() successfully completed......................................
2025-02-20 10:50:58,030:INFO:Initializing save_model()
2025-02-20 10:50:58,030:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250220_105008/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 10:50:58,030:INFO:Adding model into prep_pipe
2025-02-20 10:50:58,119:INFO:outputs/experiment_20250220_105008/models/tuned_model.pkl saved in current working directory
2025-02-20 10:50:58,125:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-20 10:50:58,125:INFO:save_model() successfully completed......................................
2025-02-20 10:50:58,252:INFO:Initializing calibrate_model()
2025-02-20 10:50:58,252:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8c8814b20>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-20 10:50:58,252:INFO:Checking exceptions
2025-02-20 10:50:58,256:INFO:Preloading libraries
2025-02-20 10:50:58,256:INFO:Preparing display monitor
2025-02-20 10:50:58,258:INFO:Getting model name
2025-02-20 10:50:58,259:INFO:Base model : Random Forest Classifier
2025-02-20 10:50:58,259:INFO:Importing untrained CalibratedClassifierCV
2025-02-20 10:50:58,259:INFO:SubProcess create_model() called ==================================
2025-02-20 10:50:58,262:INFO:Initializing create_model()
2025-02-20 10:50:58,262:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8c8814b20>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff8addf79d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 10:50:58,262:INFO:Checking exceptions
2025-02-20 10:50:58,262:INFO:Importing libraries
2025-02-20 10:50:58,262:INFO:Copying training dataset
2025-02-20 10:50:58,268:INFO:Defining folds
2025-02-20 10:50:58,269:INFO:Declaring metric variables
2025-02-20 10:50:58,269:INFO:Importing untrained model
2025-02-20 10:50:58,269:INFO:Declaring custom model
2025-02-20 10:50:58,270:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:50:58,271:INFO:Starting cross validation
2025-02-20 10:50:58,272:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 10:51:04,591:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,601:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,625:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,720:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,732:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,740:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,779:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,786:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,792:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,941:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,949:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:04,960:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,456:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,478:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,494:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,503:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,516:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,527:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,543:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,566:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,597:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,605:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:12,613:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:18,507:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:18,516:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:18,525:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:18,709:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:18,721:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:18,738:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:18,752:INFO:Calculating mean and std
2025-02-20 10:51:18,753:INFO:Creating metrics dataframe
2025-02-20 10:51:18,757:INFO:Finalizing model
2025-02-20 10:51:23,747:INFO:Uploading results into container
2025-02-20 10:51:23,749:INFO:Uploading model into container now
2025-02-20 10:51:23,750:INFO:_master_model_container: 4
2025-02-20 10:51:23,750:INFO:_display_container: 4
2025-02-20 10:51:23,754:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 10:51:23,755:INFO:create_model() successfully completed......................................
2025-02-20 10:51:23,964:INFO:SubProcess create_model() end ==================================
2025-02-20 10:51:23,979:INFO:_master_model_container: 4
2025-02-20 10:51:23,979:INFO:_display_container: 4
2025-02-20 10:51:23,981:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 10:51:23,981:INFO:calibrate_model() successfully completed......................................
2025-02-20 10:51:24,127:INFO:Initializing finalize_model()
2025-02-20 10:51:24,127:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8c8814b20>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 10:51:24,129:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 10:51:24,136:INFO:Initializing create_model()
2025-02-20 10:51:24,136:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8c8814b20>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 10:51:24,136:INFO:Checking exceptions
2025-02-20 10:51:24,138:INFO:Importing libraries
2025-02-20 10:51:24,138:INFO:Copying training dataset
2025-02-20 10:51:24,138:INFO:Defining folds
2025-02-20 10:51:24,138:INFO:Declaring metric variables
2025-02-20 10:51:24,138:INFO:Importing untrained model
2025-02-20 10:51:24,139:INFO:Declaring custom model
2025-02-20 10:51:24,140:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:51:24,142:INFO:Cross validation set to False
2025-02-20 10:51:24,142:INFO:Fitting Model
2025-02-20 10:51:27,522:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 10:51:27,522:INFO:create_model() successfully completed......................................
2025-02-20 10:51:27,685:INFO:_master_model_container: 4
2025-02-20 10:51:27,686:INFO:_display_container: 4
2025-02-20 10:51:27,701:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 10:51:27,701:INFO:finalize_model() successfully completed......................................
2025-02-20 10:51:27,901:INFO:Initializing predict_model()
2025-02-20 10:51:27,901:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8c8814b20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7ff8add5b250>)
2025-02-20 10:51:27,901:INFO:Checking exceptions
2025-02-20 10:51:27,901:INFO:Preloading libraries
2025-02-20 10:51:27,902:INFO:Set up data.
2025-02-20 10:51:27,930:INFO:Set up index.
2025-02-20 10:51:29,291:INFO:PyCaret ClassificationExperiment
2025-02-20 10:51:29,291:INFO:Logging name: clf-default-name
2025-02-20 10:51:29,291:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 10:51:29,291:INFO:version 3.3.2
2025-02-20 10:51:29,291:INFO:Initializing setup()
2025-02-20 10:51:29,291:INFO:self.USI: 65e3
2025-02-20 10:51:29,291:INFO:self._variable_keys: {'data', 'fix_imbalance', '_ml_usecase', 'html_param', 'logging_param', 'y_train', 'target_param', 'y_test', 'fold_groups_param', 'X_test', 'is_multiclass', '_available_plots', 'y', 'seed', 'idx', 'exp_id', 'n_jobs_param', 'gpu_n_jobs_param', 'USI', 'X_train', 'log_plots_param', 'X', 'gpu_param', 'pipeline', 'memory', 'fold_generator', 'exp_name_log', 'fold_shuffle_param'}
2025-02-20 10:51:29,291:INFO:Checking environment
2025-02-20 10:51:29,292:INFO:python_version: 3.10.12
2025-02-20 10:51:29,292:INFO:python_build: ('main', 'Jan 15 2024 21:14:33')
2025-02-20 10:51:29,292:INFO:machine: x86_64
2025-02-20 10:51:29,292:INFO:platform: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 10:51:29,292:INFO:Memory: svmem(total=7813279744, available=649670656, percent=91.7, used=6103277568, free=135364608, active=2441170944, inactive=4566204416, buffers=27717632, cached=1546919936, shared=769413120, slab=352681984)
2025-02-20 10:51:29,292:INFO:Physical Core: 2
2025-02-20 10:51:29,292:INFO:Logical Core: 4
2025-02-20 10:51:29,292:INFO:Checking libraries
2025-02-20 10:51:29,292:INFO:System:
2025-02-20 10:51:29,293:INFO:    python: 3.10.12 (main, Jan 15 2024, 21:14:33) [GCC 9.4.0]
2025-02-20 10:51:29,293:INFO:executable: /home/dsg/vortex/venv/bin/python3
2025-02-20 10:51:29,293:INFO:   machine: Linux-5.15.0-131-generic-x86_64-with-glibc2.31
2025-02-20 10:51:29,293:INFO:PyCaret required dependencies:
2025-02-20 10:51:29,293:INFO:                 pip: 23.3.2
2025-02-20 10:51:29,293:INFO:          setuptools: 65.5.0
2025-02-20 10:51:29,293:INFO:             pycaret: 3.3.2
2025-02-20 10:51:29,293:INFO:             IPython: 8.20.0
2025-02-20 10:51:29,293:INFO:          ipywidgets: 8.1.1
2025-02-20 10:51:29,293:INFO:                tqdm: 4.66.1
2025-02-20 10:51:29,293:INFO:               numpy: 1.24.4
2025-02-20 10:51:29,293:INFO:              pandas: 1.5.3
2025-02-20 10:51:29,293:INFO:              jinja2: 3.1.3
2025-02-20 10:51:29,293:INFO:               scipy: 1.10.1
2025-02-20 10:51:29,294:INFO:              joblib: 1.3.2
2025-02-20 10:51:29,294:INFO:             sklearn: 1.2.2
2025-02-20 10:51:29,294:INFO:                pyod: 1.1.2
2025-02-20 10:51:29,294:INFO:            imblearn: 0.12.3
2025-02-20 10:51:29,294:INFO:   category_encoders: 2.6.3
2025-02-20 10:51:29,294:INFO:            lightgbm: 4.2.0
2025-02-20 10:51:29,294:INFO:               numba: 0.58.1
2025-02-20 10:51:29,294:INFO:            requests: 2.31.0
2025-02-20 10:51:29,294:INFO:          matplotlib: 3.6.0
2025-02-20 10:51:29,294:INFO:          scikitplot: 0.3.7
2025-02-20 10:51:29,294:INFO:         yellowbrick: 1.5
2025-02-20 10:51:29,295:INFO:              plotly: 5.18.0
2025-02-20 10:51:29,295:INFO:    plotly-resampler: Not installed
2025-02-20 10:51:29,295:INFO:             kaleido: 0.2.1
2025-02-20 10:51:29,295:INFO:           schemdraw: 0.15
2025-02-20 10:51:29,295:INFO:         statsmodels: 0.14.1
2025-02-20 10:51:29,295:INFO:              sktime: 0.21.1
2025-02-20 10:51:29,295:INFO:               tbats: 1.1.3
2025-02-20 10:51:29,295:INFO:            pmdarima: 2.0.4
2025-02-20 10:51:29,295:INFO:              psutil: 5.9.7
2025-02-20 10:51:29,295:INFO:          markupsafe: 2.1.3
2025-02-20 10:51:29,295:INFO:             pickle5: Not installed
2025-02-20 10:51:29,295:INFO:         cloudpickle: 2.2.1
2025-02-20 10:51:29,295:INFO:         deprecation: 2.1.0
2025-02-20 10:51:29,295:INFO:              xxhash: 3.4.1
2025-02-20 10:51:29,296:INFO:           wurlitzer: 3.0.3
2025-02-20 10:51:29,296:INFO:PyCaret optional dependencies:
2025-02-20 10:51:29,296:INFO:                shap: 0.44.0
2025-02-20 10:51:29,296:INFO:           interpret: 0.5.0
2025-02-20 10:51:29,296:INFO:                umap: 0.5.5
2025-02-20 10:51:29,296:INFO:     ydata_profiling: 4.6.0
2025-02-20 10:51:29,296:INFO:  explainerdashboard: 0.4.5
2025-02-20 10:51:29,296:INFO:             autoviz: 0.1.804
2025-02-20 10:51:29,296:INFO:           fairlearn: 0.7.0
2025-02-20 10:51:29,296:INFO:          deepchecks: Not installed
2025-02-20 10:51:29,296:INFO:             xgboost: 1.6.2
2025-02-20 10:51:29,297:INFO:            catboost: 1.2.2
2025-02-20 10:51:29,297:INFO:              kmodes: 0.12.2
2025-02-20 10:51:29,297:INFO:             mlxtend: 0.23.1
2025-02-20 10:51:29,297:INFO:       statsforecast: 1.5.0
2025-02-20 10:51:29,297:INFO:        tune_sklearn: 0.5.0
2025-02-20 10:51:29,297:INFO:                 ray: 2.9.0
2025-02-20 10:51:29,297:INFO:            hyperopt: 0.2.7
2025-02-20 10:51:29,297:INFO:              optuna: 3.5.0
2025-02-20 10:51:29,297:INFO:               skopt: 0.9.0
2025-02-20 10:51:29,297:INFO:              mlflow: 1.30.1
2025-02-20 10:51:29,298:INFO:              gradio: 3.50.2
2025-02-20 10:51:29,298:INFO:             fastapi: 0.109.0
2025-02-20 10:51:29,298:INFO:             uvicorn: 0.25.0
2025-02-20 10:51:29,298:INFO:              m2cgen: 0.10.0
2025-02-20 10:51:29,298:INFO:           evidently: 0.2.8
2025-02-20 10:51:29,298:INFO:               fugue: 0.8.6
2025-02-20 10:51:29,298:INFO:           streamlit: Not installed
2025-02-20 10:51:29,298:INFO:             prophet: Not installed
2025-02-20 10:51:29,298:INFO:None
2025-02-20 10:51:29,298:INFO:Set up data.
2025-02-20 10:51:29,324:INFO:Set up folding strategy.
2025-02-20 10:51:29,324:INFO:Set up train/test split.
2025-02-20 10:51:29,332:INFO:Set up index.
2025-02-20 10:51:29,332:INFO:Assigning column types.
2025-02-20 10:51:29,338:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 10:51:29,390:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 10:51:29,391:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 10:51:29,438:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:51:29,443:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:51:29,537:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 10:51:29,539:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 10:51:29,582:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:51:29,588:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:51:29,589:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 10:51:29,658:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 10:51:29,702:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:51:29,707:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:51:29,784:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 10:51:29,834:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:51:29,840:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:51:29,841:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 10:51:29,945:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:51:29,948:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:51:30,026:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:51:30,030:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:51:30,032:INFO:Preparing preprocessing pipeline...
2025-02-20 10:51:30,033:INFO:Set up label encoding.
2025-02-20 10:51:30,033:INFO:Set up simple imputation.
2025-02-20 10:51:30,060:INFO:Finished creating preprocessing pipeline.
2025-02-20 10:51:30,066:INFO:Pipeline: Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-02-20 10:51:30,067:INFO:Creating final display dataframe.
2025-02-20 10:51:30,170:INFO:Setup _display_container:                     Description                   Value
0                    Session id                     123
1                        Target                    Site
2                   Target type              Multiclass
3                Target mapping  CT: 0, PCM: 1, PDLC: 2
4           Original data shape              (2256, 46)
5        Transformed data shape              (2256, 46)
6   Transformed train set shape              (1804, 46)
7    Transformed test set shape               (452, 46)
8              Numeric features                      45
9                    Preprocess                    True
10              Imputation type                  simple
11           Numeric imputation                    mean
12       Categorical imputation                    mode
13               Fold Generator         StratifiedKFold
14                  Fold Number                      10
15                     CPU Jobs                      -1
16                      Use GPU                   False
17               Log Experiment                   False
18              Experiment Name        clf-default-name
19                          USI                    65e3
2025-02-20 10:51:30,252:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:51:30,254:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:51:30,340:INFO:Soft dependency imported: xgboost: 1.6.2
2025-02-20 10:51:30,343:INFO:Soft dependency imported: catboost: 1.2.2
2025-02-20 10:51:30,345:INFO:setup() successfully completed in 1.05s...............
2025-02-20 10:51:30,345:INFO:Initializing create_model()
2025-02-20 10:51:30,345:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8add80c10>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'criterion': 'entropy'})
2025-02-20 10:51:30,346:INFO:Checking exceptions
2025-02-20 10:51:30,347:INFO:Importing libraries
2025-02-20 10:51:30,347:INFO:Copying training dataset
2025-02-20 10:51:30,353:INFO:Defining folds
2025-02-20 10:51:30,353:INFO:Declaring metric variables
2025-02-20 10:51:30,354:INFO:Importing untrained model
2025-02-20 10:51:30,354:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:51:30,355:INFO:Starting cross validation
2025-02-20 10:51:30,356:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 10:51:32,127:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,145:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,166:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,216:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,232:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,245:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,246:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,261:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,266:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,275:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,276:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:32,283:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:33,571:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:33,620:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:33,683:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:34,152:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:34,192:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:34,224:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:34,306:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:34,353:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:34,372:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:34,426:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:34,451:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:34,466:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:35,331:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:35,367:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:35,397:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:35,622:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:35,635:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:35,641:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:35,654:INFO:Calculating mean and std
2025-02-20 10:51:35,655:INFO:Creating metrics dataframe
2025-02-20 10:51:35,661:INFO:Finalizing model
2025-02-20 10:51:36,377:INFO:Uploading results into container
2025-02-20 10:51:36,379:INFO:Uploading model into container now
2025-02-20 10:51:36,391:INFO:_master_model_container: 1
2025-02-20 10:51:36,392:INFO:_display_container: 2
2025-02-20 10:51:36,393:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 10:51:36,393:INFO:create_model() successfully completed......................................
2025-02-20 10:51:36,542:INFO:Initializing tune_model()
2025-02-20 10:51:36,542:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid={'criterion': ['entropy']}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8add80c10>)
2025-02-20 10:51:36,542:INFO:Checking exceptions
2025-02-20 10:51:36,551:INFO:Copying training dataset
2025-02-20 10:51:36,556:INFO:Checking base model
2025-02-20 10:51:36,556:INFO:Base model : Random Forest Classifier
2025-02-20 10:51:36,557:INFO:Declaring metric variables
2025-02-20 10:51:36,558:INFO:Defining Hyperparameters
2025-02-20 10:51:36,699:INFO:custom_grid: {'actual_estimator__criterion': ['entropy']}
2025-02-20 10:51:36,700:INFO:Tuning with n_jobs=-1
2025-02-20 10:51:36,700:INFO:Initializing RandomizedSearchCV
2025-02-20 10:51:38,294:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:38,329:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:38,403:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:38,435:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:40,141:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:40,175:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:40,196:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:40,283:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:41,350:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:41,477:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:41,494:INFO:best_params: {'actual_estimator__criterion': 'entropy'}
2025-02-20 10:51:41,494:INFO:Hyperparameter search completed
2025-02-20 10:51:41,494:INFO:SubProcess create_model() called ==================================
2025-02-20 10:51:41,496:INFO:Initializing create_model()
2025-02-20 10:51:41,496:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8add80c10>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff8adcb7580>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'criterion': 'entropy'})
2025-02-20 10:51:41,496:INFO:Checking exceptions
2025-02-20 10:51:41,496:INFO:Importing libraries
2025-02-20 10:51:41,496:INFO:Copying training dataset
2025-02-20 10:51:41,518:INFO:Defining folds
2025-02-20 10:51:41,518:INFO:Declaring metric variables
2025-02-20 10:51:41,518:INFO:Importing untrained model
2025-02-20 10:51:41,519:INFO:Declaring custom model
2025-02-20 10:51:41,524:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:51:41,526:INFO:Starting cross validation
2025-02-20 10:51:41,528:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 10:51:43,768:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:43,789:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:43,802:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:43,890:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:43,925:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:43,943:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:43,960:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:43,966:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:43,984:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:44,102:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:44,129:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:44,147:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:45,828:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:45,862:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:45,877:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:45,972:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:45,984:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:45,995:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:46,058:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:46,082:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:46,095:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:46,104:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:46,116:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:46,124:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:47,558:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:47,566:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:47,576:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:47,613:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:47,621:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:47,629:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:47,640:INFO:Calculating mean and std
2025-02-20 10:51:47,641:INFO:Creating metrics dataframe
2025-02-20 10:51:47,645:INFO:Finalizing model
2025-02-20 10:51:48,558:INFO:Uploading results into container
2025-02-20 10:51:48,559:INFO:Uploading model into container now
2025-02-20 10:51:48,561:INFO:_master_model_container: 2
2025-02-20 10:51:48,561:INFO:_display_container: 3
2025-02-20 10:51:48,561:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 10:51:48,562:INFO:create_model() successfully completed......................................
2025-02-20 10:51:48,708:INFO:SubProcess create_model() end ==================================
2025-02-20 10:51:48,709:INFO:choose_better activated
2025-02-20 10:51:48,709:INFO:SubProcess create_model() called ==================================
2025-02-20 10:51:48,711:INFO:Initializing create_model()
2025-02-20 10:51:48,712:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8add80c10>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 10:51:48,712:INFO:Checking exceptions
2025-02-20 10:51:48,713:INFO:Importing libraries
2025-02-20 10:51:48,713:INFO:Copying training dataset
2025-02-20 10:51:48,720:INFO:Defining folds
2025-02-20 10:51:48,721:INFO:Declaring metric variables
2025-02-20 10:51:48,721:INFO:Importing untrained model
2025-02-20 10:51:48,721:INFO:Declaring custom model
2025-02-20 10:51:48,722:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:51:48,723:INFO:Starting cross validation
2025-02-20 10:51:48,724:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 10:51:50,425:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,436:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,446:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,462:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,471:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,491:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,500:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,510:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,517:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,611:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,636:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:50,644:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,196:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,204:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,219:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,329:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,349:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,356:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,407:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,417:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,426:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,460:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,472:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:52,493:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:53,489:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:53,494:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:53,496:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:53,499:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:53,504:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:53,507:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:51:53,523:INFO:Calculating mean and std
2025-02-20 10:51:53,524:INFO:Creating metrics dataframe
2025-02-20 10:51:53,528:INFO:Finalizing model
2025-02-20 10:51:54,696:INFO:Uploading results into container
2025-02-20 10:51:54,697:INFO:Uploading model into container now
2025-02-20 10:51:54,698:INFO:_master_model_container: 3
2025-02-20 10:51:54,698:INFO:_display_container: 4
2025-02-20 10:51:54,698:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 10:51:54,699:INFO:create_model() successfully completed......................................
2025-02-20 10:51:54,863:INFO:SubProcess create_model() end ==================================
2025-02-20 10:51:54,864:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 10:51:54,865:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for F1 is 0.9711
2025-02-20 10:51:54,866:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) is best model
2025-02-20 10:51:54,866:INFO:choose_better completed
2025-02-20 10:51:54,866:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-02-20 10:51:54,878:INFO:_master_model_container: 3
2025-02-20 10:51:54,878:INFO:_display_container: 3
2025-02-20 10:51:54,879:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 10:51:54,879:INFO:tune_model() successfully completed......................................
2025-02-20 10:51:55,064:INFO:Initializing save_model()
2025-02-20 10:51:55,064:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=outputs/experiment_20250220_105008/models/tuned_model, prep_pipe_=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb'...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 10:51:55,064:INFO:Adding model into prep_pipe
2025-02-20 10:51:55,156:INFO:outputs/experiment_20250220_105008/models/tuned_model.pkl saved in current working directory
2025-02-20 10:51:55,167:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='entropy', max_depth=None,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-20 10:51:55,167:INFO:save_model() successfully completed......................................
2025-02-20 10:51:55,312:INFO:Initializing calibrate_model()
2025-02-20 10:51:55,312:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8add80c10>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',
                       criterion='entropy', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2025-02-20 10:51:55,312:INFO:Checking exceptions
2025-02-20 10:51:55,317:INFO:Preloading libraries
2025-02-20 10:51:55,317:INFO:Preparing display monitor
2025-02-20 10:51:55,320:INFO:Getting model name
2025-02-20 10:51:55,320:INFO:Base model : Random Forest Classifier
2025-02-20 10:51:55,321:INFO:Importing untrained CalibratedClassifierCV
2025-02-20 10:51:55,321:INFO:SubProcess create_model() called ==================================
2025-02-20 10:51:55,324:INFO:Initializing create_model()
2025-02-20 10:51:55,324:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8add80c10>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff8ae044850>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 10:51:55,324:INFO:Checking exceptions
2025-02-20 10:51:55,324:INFO:Importing libraries
2025-02-20 10:51:55,325:INFO:Copying training dataset
2025-02-20 10:51:55,334:INFO:Defining folds
2025-02-20 10:51:55,334:INFO:Declaring metric variables
2025-02-20 10:51:55,334:INFO:Importing untrained model
2025-02-20 10:51:55,335:INFO:Declaring custom model
2025-02-20 10:51:55,337:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:51:55,338:INFO:Starting cross validation
2025-02-20 10:51:55,341:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 10:52:02,252:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,262:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,269:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,276:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,288:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,299:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,535:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,544:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,552:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,780:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,790:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:02,802:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,147:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,159:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,168:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,300:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,309:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,316:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,458:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,465:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,471:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,758:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,764:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:09,771:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:13,115:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:13,122:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:13,129:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:13,167:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:13,178:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:13,189:WARNING:/home/dsg/vortex/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'PDLC') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 10:52:13,197:INFO:Calculating mean and std
2025-02-20 10:52:13,198:INFO:Creating metrics dataframe
2025-02-20 10:52:13,201:INFO:Finalizing model
2025-02-20 10:52:15,730:INFO:Uploading results into container
2025-02-20 10:52:15,731:INFO:Uploading model into container now
2025-02-20 10:52:15,731:INFO:_master_model_container: 4
2025-02-20 10:52:15,731:INFO:_display_container: 4
2025-02-20 10:52:15,733:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 10:52:15,733:INFO:create_model() successfully completed......................................
2025-02-20 10:52:15,861:INFO:SubProcess create_model() end ==================================
2025-02-20 10:52:15,876:INFO:_master_model_container: 4
2025-02-20 10:52:15,876:INFO:_display_container: 4
2025-02-20 10:52:15,877:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 10:52:15,878:INFO:calibrate_model() successfully completed......................................
2025-02-20 10:52:16,014:INFO:Initializing finalize_model()
2025-02-20 10:52:16,014:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8add80c10>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 10:52:16,016:INFO:Finalizing CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None)
2025-02-20 10:52:16,023:INFO:Initializing create_model()
2025-02-20 10:52:16,023:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8add80c10>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=RandomForestClassifier(bootstrap=True,
                                                        ccp_alpha=0.0,
                                                        class_weight='balanced',
                                                        criterion='entropy',
                                                        max_depth=None,
                                                        max_features='sqrt',
                                                        max_leaf_nodes=None,
                                                        max_samples=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        monotonic_cst=None,
                                                        n_estimators=100,
                                                        n_jobs=-1,
                                                        oob_score=False,
                                                        random_state=123,
                                                        verbose=0,
                                                        warm_start=False),
                       method='sigmoid', n_jobs=None), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 10:52:16,023:INFO:Checking exceptions
2025-02-20 10:52:16,024:INFO:Importing libraries
2025-02-20 10:52:16,024:INFO:Copying training dataset
2025-02-20 10:52:16,025:INFO:Defining folds
2025-02-20 10:52:16,025:INFO:Declaring metric variables
2025-02-20 10:52:16,025:INFO:Importing untrained model
2025-02-20 10:52:16,025:INFO:Declaring custom model
2025-02-20 10:52:16,027:INFO:Random Forest Classifier Imported successfully
2025-02-20 10:52:16,028:INFO:Cross validation set to False
2025-02-20 10:52:16,028:INFO:Fitting Model
2025-02-20 10:52:18,823:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 10:52:18,824:INFO:create_model() successfully completed......................................
2025-02-20 10:52:18,961:INFO:_master_model_container: 4
2025-02-20 10:52:18,961:INFO:_display_container: 4
2025-02-20 10:52:18,976:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False)
2025-02-20 10:52:18,976:INFO:finalize_model() successfully completed......................................
2025-02-20 10:52:19,131:INFO:Initializing predict_model()
2025-02-20 10:52:19,132:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff8add80c10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Al', 'Si', 'P', 'S', 'Cl', 'K',
                                             'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn',
                                             'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga',
                                             'Ge', 'As', 'Se', 'Br', 'Rb', 'Sr',
                                             'Y', 'Zr', 'Nb', 'Mo', 'Ru',...
                                                                         class_weight='balanced',
                                                                         criterion='entropy',
                                                                         max_depth=None,
                                                                         max_features='sqrt',
                                                                         max_leaf_nodes=None,
                                                                         max_samples=None,
                                                                         min_impurity_decrease=0.0,
                                                                         min_samples_leaf=1,
                                                                         min_samples_split=2,
                                                                         min_weight_fraction_leaf=0.0,
                                                                         monotonic_cst=None,
                                                                         n_estimators=100,
                                                                         n_jobs=-1,
                                                                         oob_score=False,
                                                                         random_state=123,
                                                                         verbose=0,
                                                                         warm_start=False),
                                        method='sigmoid', n_jobs=None))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x7ff8adae3370>)
2025-02-20 10:52:19,132:INFO:Checking exceptions
2025-02-20 10:52:19,132:INFO:Preloading libraries
2025-02-20 10:52:19,132:INFO:Set up data.
2025-02-20 10:52:19,160:INFO:Set up index.
2025-02-24 15:20:14,405:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 15:20:14,405:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 15:20:14,405:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 15:20:14,405:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 15:24:42,712:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 15:24:42,713:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 15:24:42,713:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 15:24:42,713:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 19:52:08,882:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 19:52:08,882:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 19:52:08,882:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-24 19:52:08,882:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
